%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: culture and creative fine art icons.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: ADMIN
%%CreationDate: 1/30/2017
%%BoundingBox: 0 0 111 111
%%HiResBoundingBox: 0 0 110.9080 110.9090
%%CropBox: 0 0 110.9080 110.9090
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2017-01-30T16:55:49+05:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -110.909 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 110.909 li
110.908 110.909 li
110.908 0 li
cp
clp
0 110.909 mo
110.908 110.909 li
110.908 0 li
0 0 li
0 110.909 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
55.496 72.058 mo
55.378 72.058 55.283 71.962 55.283 71.844 cv
55.283 71.727 55.379 71.631 55.496 71.632 cv
58.458 71.631 li
58.575 71.631 58.67 71.727 58.67 71.844 cv
58.67 71.962 58.575 72.058 58.458 72.057 cv
55.496 72.058 li
cp
49.902 72.057 mo
49.785 72.057 49.689 71.962 49.689 71.844 cv
49.689 71.727 49.784 71.631 49.902 71.631 cv
52.863 71.632 li
52.98 71.631 53.076 71.727 53.076 71.844 cv
53.076 71.962 52.98 72.058 52.863 72.057 cv
49.902 72.057 li
cp
55.496 73.279 mo
55.378 73.279 55.283 73.183 55.283 73.066 cv
55.283 72.949 55.379 72.853 55.496 72.853 cv
58.457 72.853 li
58.574 72.853 58.67 72.949 58.67 73.066 cv
58.67 73.183 58.574 73.279 58.458 73.279 cv
55.496 73.279 li
cp
49.902 73.279 mo
49.784 73.279 49.689 73.183 49.689 73.066 cv
49.689 72.948 49.785 72.853 49.902 72.853 cv
52.863 72.853 li
52.98 72.853 53.076 72.948 53.076 73.066 cv
53.076 73.183 52.98 73.279 52.863 73.279 cv
49.902 73.279 li
cp
55.496 74.468 mo
55.379 74.468 55.283 74.372 55.283 74.254 cv
55.283 74.137 55.379 74.042 55.496 74.042 cv
58.457 74.042 li
58.575 74.042 58.67 74.137 58.67 74.254 cv
58.67 74.372 58.574 74.468 58.458 74.468 cv
55.496 74.468 li
cp
49.902 74.468 mo
49.785 74.468 49.689 74.372 49.689 74.254 cv
49.689 74.137 49.784 74.042 49.902 74.042 cv
52.863 74.042 li
52.98 74.042 53.076 74.137 53.076 74.254 cv
53.076 74.372 52.98 74.468 52.863 74.468 cv
49.902 74.468 li
cp
55.496 75.662 mo
55.379 75.662 55.283 75.567 55.283 75.449 cv
55.283 75.331 55.379 75.236 55.496 75.236 cv
58.458 75.236 li
58.575 75.236 58.67 75.332 58.67 75.449 cv
58.67 75.567 58.575 75.662 58.457 75.662 cv
55.496 75.662 li
cp
49.902 75.662 mo
49.784 75.662 49.689 75.567 49.689 75.449 cv
49.689 75.331 49.785 75.236 49.902 75.236 cv
52.863 75.236 li
52.98 75.236 53.076 75.331 53.076 75.449 cv
53.076 75.567 52.98 75.662 52.863 75.662 cv
49.902 75.662 li
cp
54.401 77.149 mo
54.541 77.048 li
54.809 76.878 55.105 76.819 55.674 76.819 cv
59.47 76.818 li
59.455 70.589 li
55.203 70.589 li
54.648 70.589 54.359 70.843 54.401 71.374 cv
54.401 71.378 54.401 71.386 54.401 71.391 cv
54.401 77.149 li
cp
53.958 77.149 mo
53.958 71.391 li
53.958 71.386 53.958 71.378 53.959 71.374 cv
54 70.848 53.708 70.589 53.156 70.589 cv
48.904 70.589 li
48.889 76.818 li
52.685 76.819 li
53.256 76.819 53.552 76.879 53.82 77.049 cv
53.958 77.149 li
cp
54.171 77.848 mo
54.118 77.849 54.064 77.829 54.02 77.785 cv
53.788 77.554 53.668 77.434 53.506 77.359 cv
53.346 77.284 53.126 77.244 52.685 77.244 cv
48.676 77.244 li
48.558 77.244 48.462 77.149 48.463 77.031 cv
48.479 70.376 li
48.478 70.257 48.574 70.162 48.691 70.162 cv
53.156 70.162 li
53.512 70.162 53.818 70.257 54.036 70.441 cv
54.178 70.591 li
54.321 70.44 li
54.539 70.256 54.844 70.162 55.203 70.162 cv
59.668 70.162 li
59.785 70.162 59.881 70.257 59.881 70.376 cv
59.896 77.031 li
59.897 77.149 59.801 77.244 59.684 77.244 cv
55.674 77.244 li
54.876 77.244 54.788 77.335 54.339 77.785 cv
54.301 77.823 54.256 77.842 54.21 77.847 cv
54.19 77.847 li
54.171 77.848 li
cp
55.238 78.053 mo
55.121 78.053 55.025 77.958 55.025 77.84 cv
55.025 77.723 55.121 77.627 55.239 77.627 cv
59.602 77.627 li
59.719 77.627 59.815 77.723 59.814 77.84 cv
59.815 77.958 59.719 78.053 59.602 78.054 cv
55.238 78.053 li
cp
48.757 78.053 mo
48.64 78.054 48.545 77.958 48.544 77.84 cv
48.545 77.723 48.64 77.627 48.757 77.627 cv
53.121 77.627 li
53.238 77.627 53.334 77.723 53.334 77.84 cv
53.334 77.958 53.238 78.053 53.12 78.053 cv
48.757 78.053 li
cp
.2 .2 .2 rgb
f
34.585 54.388 mo
34.278 54.391 33.98 54.313 33.695 54.148 cv
33.593 54.089 33.559 53.958 33.618 53.856 cv
33.676 53.754 33.807 53.719 33.909 53.779 cv
34.13 53.906 34.352 53.963 34.581 53.961 cv
34.81 53.958 35.054 53.895 35.313 53.771 cv
35.419 53.72 35.547 53.765 35.598 53.871 cv
35.649 53.977 35.604 54.105 35.498 54.156 cv
35.196 54.301 34.891 54.385 34.585 54.388 cv
cp
34.48 56.16 mo
39.83 53.896 li
34.634 51.679 li
29.014 54.056 li
34.48 56.16 li
cp
34.579 57.367 mo
35.613 57.366 36.647 57.086 37.684 56.529 cv
37.707 56.523 li
37.707 55.257 li
34.567 56.586 li
34.542 56.597 34.515 56.603 34.488 56.603 cv
34.461 56.603 34.433 56.599 34.408 56.589 cv
31.473 55.46 li
31.473 56.529 li
31.475 56.53 li
32.511 57.089 33.545 57.368 34.579 57.367 cv
cp
34.588 58.329 mo
35.527 58.322 36.469 58.083 37.413 57.627 cv
37.707 57.476 li
37.707 56.996 li
37.474 57.113 li
36.51 57.566 35.545 57.793 34.579 57.794 cv
33.614 57.795 32.648 57.568 31.685 57.114 cv
31.472 57.007 li
31.473 57.479 li
31.769 57.639 li
32.709 58.111 33.648 58.336 34.588 58.329 cv
cp
29.063 59.643 mo
29.182 59.643 29.341 59.433 29.341 59.119 cv
29.341 58.803 29.181 58.597 29.063 58.597 cv
28.943 58.597 28.785 58.806 28.785 59.119 cv
28.785 59.436 28.944 59.643 29.063 59.643 cv
cp
29.063 60.07 mo
28.834 60.07 28.652 59.93 28.538 59.759 cv
28.422 59.586 28.358 59.359 28.358 59.119 cv
28.358 58.88 28.422 58.653 28.538 58.48 cv
28.595 58.394 28.67 58.317 28.758 58.26 cv
28.871 58.208 li
28.871 54.459 li
28.367 54.265 li
28.189 54.197 28.184 53.944 28.361 53.869 cv
34.551 51.25 li
34.605 51.227 34.665 51.228 34.718 51.25 cv
40.459 53.7 li
40.632 53.774 40.632 54.02 40.459 54.094 cv
38.13 55.079 li
38.134 55.1 li
38.134 57.606 li
38.134 57.684 38.091 57.756 38.023 57.793 cv
36.883 58.417 35.737 58.747 34.591 58.756 cv
33.445 58.765 32.298 58.452 31.152 57.791 cv
31.086 57.753 31.046 57.682 31.046 57.606 cv
31.046 55.296 li
29.297 54.623 li
29.297 58.228 li
29.368 58.261 li
29.456 58.317 29.53 58.395 29.587 58.48 cv
29.703 58.653 29.767 58.88 29.767 59.119 cv
29.767 59.359 29.703 59.586 29.587 59.759 cv
29.472 59.931 29.29 60.07 29.063 60.07 cv
cp
f
92.162 51.345 mo
91.242 50.785 li
90.303 51.345 li
92.162 51.345 li
cp
89.587 51.739 mo
89.387 51.739 89.315 51.475 89.486 51.373 cv
91.143 50.386 li
91.205 50.349 91.284 50.349 91.346 50.387 cv
92.967 51.374 li
93.137 51.477 93.063 51.739 92.865 51.739 cv
89.587 51.739 li
cp
95.215 52.188 mo
91.275 49.791 li
87.251 52.188 li
95.215 52.188 li
cp
94.377 56.243 mo
94.377 52.585 li
93.889 52.585 li
93.889 56.243 li
94.377 56.243 li
cp
91.517 56.243 mo
91.517 52.585 li
91.029 52.585 li
91.029 56.243 li
91.517 56.243 li
cp
88.641 56.243 mo
88.641 52.585 li
88.153 52.585 li
88.153 56.243 li
88.641 56.243 li
cp
93.495 56.309 mo
93.495 52.582 li
91.911 52.582 li
91.911 56.309 li
93.495 56.309 li
cp
90.635 56.309 mo
90.635 52.582 li
89.035 52.582 li
89.035 56.309 li
90.635 56.309 li
cp
95.05 57.194 mo
95.05 56.703 li
87.447 56.703 li
87.447 57.194 li
95.05 57.194 li
cp
95.538 58.148 mo
95.538 57.598 li
86.959 57.598 li
86.959 58.148 li
95.538 58.148 li
cp
86.958 58.542 mo
86.879 58.542 86.799 58.524 86.731 58.485 cv
86.651 58.44 86.565 58.353 86.565 58.22 cv
86.565 57.526 li
86.565 57.392 86.653 57.305 86.732 57.26 cv
86.799 57.222 86.879 57.204 86.958 57.204 cv
87.053 57.204 li
87.053 56.631 li
87.053 56.485 87.154 56.388 87.254 56.344 cv
87.307 56.321 87.365 56.309 87.425 56.309 cv
87.759 56.309 li
87.759 52.582 li
86.535 52.582 li
86.335 52.582 86.263 52.318 86.434 52.216 cv
91.175 49.391 li
91.238 49.354 91.316 49.354 91.379 49.392 cv
96.02 52.217 li
96.189 52.32 96.116 52.582 95.917 52.582 cv
94.772 52.582 li
94.772 56.309 li
95.072 56.309 li
95.132 56.309 95.19 56.321 95.243 56.344 cv
95.341 56.387 95.444 56.483 95.444 56.631 cv
95.444 57.204 li
95.538 57.204 li
95.618 57.204 95.697 57.222 95.765 57.261 cv
95.845 57.305 95.932 57.393 95.932 57.526 cv
95.932 58.22 li
95.932 58.354 95.843 58.441 95.765 58.485 cv
95.698 58.523 95.618 58.542 95.538 58.542 cv
86.958 58.542 li
cp
f
56.259 32.479 mo
56.423 32.479 56.557 32.346 56.557 32.18 cv
56.557 32.016 56.423 31.882 56.259 31.882 cv
56.093 31.882 55.959 32.016 55.959 32.18 cv
55.959 32.346 56.093 32.479 56.259 32.479 cv
cp
51.965 32.777 mo
52.083 32.777 52.18 32.68 52.18 32.561 cv
52.18 32.443 52.083 32.346 51.965 32.346 cv
51.846 32.346 51.75 32.443 51.75 32.561 cv
51.75 32.68 51.846 32.777 51.965 32.777 cv
cp
56.259 32.932 mo
55.843 32.932 55.508 32.596 55.508 32.18 cv
55.508 31.766 55.843 31.429 56.259 31.429 cv
56.673 31.429 57.009 31.766 57.009 32.18 cv
57.009 32.595 56.673 32.932 56.259 32.932 cv
cp
51.965 33.229 mo
51.596 33.229 51.298 32.93 51.298 32.561 cv
51.298 32.194 51.597 31.894 51.965 31.894 cv
52.333 31.894 52.632 32.194 52.632 32.561 cv
52.632 32.93 52.333 33.229 51.965 33.229 cv
cp
56.222 34.038 mo
57.247 34.038 58.08 33.206 58.08 32.18 cv
58.08 31.155 57.247 30.323 56.222 30.323 cv
55.197 30.323 54.365 31.155 54.365 32.18 cv
54.365 33.206 55.197 34.038 56.222 34.038 cv
cp
51.965 34.087 mo
52.806 34.087 53.49 33.404 53.49 32.561 cv
53.49 31.72 52.806 31.036 51.965 31.036 cv
51.123 31.036 50.44 31.72 50.44 32.561 cv
50.44 33.404 51.123 34.087 51.965 34.087 cv
cp
53.683 34.285 mo
53.559 34.285 53.457 34.183 53.457 34.059 cv
53.457 33.934 53.559 33.832 53.683 33.832 cv
54.386 33.832 li
54.51 33.832 54.611 33.934 54.611 34.059 cv
54.611 34.183 54.51 34.285 54.386 34.285 cv
53.683 34.285 li
cp
51.965 34.539 mo
50.873 34.539 49.988 33.653 49.988 32.561 cv
49.988 31.47 50.873 30.584 51.965 30.584 cv
52.92 30.584 53.718 31.263 53.901 32.163 cv
53.916 32.257 li
53.912 32.18 li
53.912 30.905 54.947 29.87 56.222 29.87 cv
57.497 29.87 58.532 30.905 58.532 32.18 cv
58.532 33.456 57.497 34.491 56.222 34.491 cv
55.106 34.491 54.175 33.698 53.959 32.646 cv
53.939 32.519 li
53.942 32.561 li
53.942 33.653 53.056 34.539 51.965 34.539 cv
cp
55.812 36.213 mo
55.812 35.431 li
53.763 35.431 li
53.763 36.213 li
55.812 36.213 li
cp
53.711 36.665 mo
53.489 36.665 53.311 36.485 53.311 36.265 cv
53.311 35.38 li
53.311 35.159 53.489 34.979 53.711 34.979 cv
55.864 34.979 li
56.085 34.979 56.264 35.159 56.264 35.38 cv
56.264 36.265 li
56.264 36.485 56.085 36.665 55.864 36.665 cv
53.711 36.665 li
cp
52.41 37.505 mo
52.51 37.505 52.591 37.424 52.591 37.324 cv
52.591 37.225 52.51 37.143 52.41 37.143 cv
52.31 37.143 52.229 37.225 52.229 37.324 cv
52.229 37.424 52.31 37.505 52.41 37.505 cv
cp
50.416 37.516 mo
50.291 37.516 50.19 37.414 50.19 37.289 cv
50.19 35.187 li
50.19 35.062 50.291 34.96 50.416 34.96 cv
50.541 34.96 50.642 35.062 50.642 35.187 cv
50.642 37.289 li
50.642 37.414 50.541 37.516 50.416 37.516 cv
cp
59.116 37.629 mo
59.116 34.83 li
57.859 35.383 li
57.859 37.136 li
59.116 37.629 li
cp
52.41 37.957 mo
52.06 37.957 51.777 37.673 51.777 37.324 cv
51.777 36.975 52.061 36.691 52.41 36.691 cv
52.759 36.691 53.043 36.975 53.043 37.324 cv
53.043 37.673 52.759 37.957 52.41 37.957 cv
cp
55.769 38.106 mo
55.654 38.106 55.556 38.02 55.544 37.903 cv
55.531 37.779 55.621 37.667 55.746 37.655 cv
55.833 37.645 55.883 37.62 55.913 37.591 cv
55.943 37.562 55.977 37.507 55.991 37.393 cv
56.006 37.268 56.119 37.18 56.242 37.195 cv
56.366 37.21 56.455 37.323 56.44 37.446 cv
56.416 37.634 56.351 37.796 56.227 37.916 cv
56.105 38.035 55.949 38.088 55.792 38.105 cv
55.784 38.105 55.777 38.106 55.769 38.106 cv
cp
59.315 38.185 mo
59.296 38.182 59.278 38.178 59.26 38.17 cv
57.55 37.5 li
57.464 37.466 57.408 37.383 57.408 37.289 cv
57.408 35.235 li
57.408 35.146 57.46 35.065 57.542 35.028 cv
59.251 34.277 li
59.4 34.211 59.568 34.321 59.568 34.483 cv
59.568 37.96 li
59.568 38.099 59.445 38.2 59.315 38.185 cv
cp
54.104 42.169 mo
53.979 42.169 53.878 42.068 53.878 41.943 cv
53.878 38.792 li
53.643 38.792 li
52.376 41.91 li
52.341 41.997 52.258 42.051 52.17 42.052 cv
52.14 42.052 52.11 42.046 52.082 42.035 cv
51.966 41.988 51.911 41.856 51.958 41.741 cv
53.156 38.792 li
51.751 38.792 li
51.273 38.792 50.885 38.404 50.885 37.926 cv
50.885 34.682 li
50.885 34.557 50.987 34.456 51.111 34.456 cv
51.236 34.456 51.337 34.557 51.337 34.682 cv
51.337 37.926 li
51.337 38.155 51.523 38.34 51.751 38.34 cv
56.31 38.34 li
56.539 38.34 56.724 38.155 56.724 37.926 cv
56.724 34.682 li
56.724 34.557 56.825 34.456 56.95 34.456 cv
57.075 34.456 57.176 34.557 57.176 34.682 cv
57.176 37.926 li
57.176 38.405 56.788 38.792 56.31 38.792 cv
55.096 38.792 li
56.256 41.647 li
56.303 41.763 56.248 41.895 56.132 41.942 cv
56.103 41.953 56.073 41.959 56.044 41.959 cv
55.956 41.957 55.873 41.904 55.838 41.817 cv
54.609 38.792 li
54.329 38.792 li
54.329 41.943 li
54.329 42.068 54.228 42.169 54.104 42.169 cv
cp
f
17.41 88.2 mo
17.277 87.97 li
17.236 87.9 17.235 87.814 17.273 87.742 cv
17.41 87.487 li
16.456 87.487 li
16.456 88.2 li
17.41 88.2 li
cp
19.809 92.226 mo
19.417 92.036 li
18.806 91.726 18.215 91.385 17.677 90.985 cv
17.35 90.727 li
17.415 90.809 li
17.75 91.198 18.155 91.58 18.629 91.954 cv
18.993 92.226 li
19.809 92.226 li
cp
18.222 92.226 mo
18.178 92.192 li
17.673 91.778 17.241 91.349 16.887 90.905 cv
16.841 90.845 li
16.942 91.179 li
17.003 91.371 17.069 91.563 17.14 91.755 cv
17.329 92.226 li
18.222 92.226 li
cp
16.823 92.226 mo
16.739 92.018 li
16.548 91.519 16.396 91.022 16.268 90.527 cv
16.252 90.464 li
16.247 90.504 li
16.169 91 16.068 91.498 15.93 91.997 cv
15.86 92.226 li
16.823 92.226 li
cp
15.369 92.226 mo
15.554 91.584 li
15.617 91.329 15.672 91.073 15.719 90.816 cv
15.721 90.802 li
15.662 90.892 li
15.442 91.21 15.181 91.52 14.881 91.821 cv
14.45 92.226 li
15.369 92.226 li
cp
13.717 92.226 mo
14.045 91.96 li
14.334 91.711 14.592 91.46 14.819 91.205 cv
15.006 90.977 li
14.907 91.069 li
14.447 91.469 13.918 91.84 13.313 92.176 cv
13.218 92.226 li
13.717 92.226 li
cp
20.06 92.891 mo
20.187 92.887 20.314 92.847 20.416 92.776 cv
20.498 92.694 li
19.628 92.694 li
19.725 92.797 li
19.814 92.861 19.932 92.894 20.06 92.891 cv
cp
18.237 92.891 mo
18.365 92.887 18.492 92.847 18.593 92.776 cv
18.675 92.694 li
17.805 92.694 li
17.902 92.797 li
17.991 92.861 18.109 92.894 18.237 92.891 cv
cp
16.383 92.891 mo
16.511 92.887 16.637 92.847 16.739 92.776 cv
16.821 92.694 li
15.951 92.694 li
16.048 92.797 li
16.138 92.861 16.255 92.894 16.383 92.891 cv
cp
14.622 92.891 mo
14.75 92.887 14.877 92.847 14.978 92.776 cv
15.06 92.694 li
14.191 92.694 li
14.288 92.797 li
14.377 92.861 14.495 92.894 14.622 92.891 cv
cp
12.824 92.891 mo
12.951 92.887 13.079 92.847 13.18 92.776 cv
13.262 92.694 li
12.389 92.694 li
12.428 92.745 li
12.448 92.765 12.468 92.782 12.49 92.797 cv
12.579 92.861 12.696 92.894 12.824 92.891 cv
cp
12.781 97.242 mo
12.842 97.192 li
13.846 96.327 14.525 95.171 14.588 93.474 cv
14.589 93.357 li
14.474 93.352 li
14.312 93.333 14.154 93.277 14.016 93.178 cv
13.922 93.112 13.842 93.028 13.778 92.927 cv
13.737 92.845 li
13.714 92.883 li
13.674 92.933 li
13.698 93.619 li
13.701 95.177 13.35 96.264 12.844 97.14 cv
12.781 97.242 li
cp
12.224 97.244 mo
12.28 97.165 li
12.867 96.255 13.281 95.112 13.224 93.32 cv
13.223 93.277 li
13.156 93.305 li
13.052 93.338 12.944 93.356 12.837 93.359 cv
12.783 93.36 12.729 93.358 12.675 93.352 cv
12.664 93.349 li
12.702 93.616 li
12.824 94.818 12.626 96.037 12.244 97.189 cv
12.224 97.244 li
cp
20.068 97.28 mo
20.005 97.177 li
19.426 96.176 19.05 94.899 19.175 92.959 cv
19.195 92.884 li
19.171 92.849 li
19.161 92.825 li
19.15 92.845 li
19.076 92.973 18.977 93.078 18.863 93.158 cv
18.727 93.254 18.571 93.316 18.41 93.343 cv
18.259 93.358 li
18.261 93.511 li
18.323 95.207 19.001 96.364 20.005 97.229 cv
20.068 97.28 li
cp
20.651 97.319 mo
20.605 97.189 li
20.222 96.037 20.024 94.818 20.147 93.616 cv
20.185 93.348 li
20.073 93.359 li
19.966 93.362 19.857 93.35 19.752 93.32 cv
19.628 93.274 li
19.624 93.357 li
19.567 95.149 19.981 96.292 20.569 97.202 cv
20.651 97.319 li
cp
19.858 97.708 mo
19.514 97.417 li
18.526 96.495 17.853 95.265 17.792 93.516 cv
17.79 93.269 li
17.775 93.263 li
17.725 93.24 17.676 93.211 17.631 93.178 cv
17.525 93.104 17.436 93.007 17.369 92.889 cv
17.324 92.791 li
17.273 92.883 li
17.202 92.994 17.111 93.086 17.009 93.158 cv
16.991 93.168 li
17.01 93.218 li
17.382 95.562 18.303 97.026 19.767 97.673 cv
19.858 97.708 li
cp
12.912 97.738 mo
13.08 97.674 li
14.543 97.028 15.466 95.566 15.839 93.218 cv
15.84 93.216 li
15.776 93.178 li
15.683 93.112 15.602 93.028 15.539 92.927 cv
15.513 92.881 li
15.489 92.919 li
15.421 93.013 15.339 93.093 15.248 93.158 cv
15.203 93.19 15.156 93.218 15.106 93.243 cv
15.058 93.262 li
15.056 93.498 li
14.986 95.34 14.236 96.605 13.156 97.539 cv
12.912 97.738 li
cp
19.224 97.919 mo
19.101 97.855 li
17.831 97.093 17.006 95.693 16.619 93.699 cv
16.556 93.343 li
16.396 93.359 li
16.291 93.354 li
16.229 93.7 li
15.841 95.696 15.014 97.095 13.745 97.855 cv
13.625 97.919 li
19.224 97.919 li
cp
11.585 98.508 mo
11.408 98.522 11.281 98.34 11.354 98.178 cv
12.07 96.593 12.469 94.845 12.168 93.185 cv
12.169 93.137 li
12.087 93.066 li
11.968 92.94 11.882 92.776 11.846 92.577 cv
11.829 92.482 11.872 92.389 11.949 92.339 cv
11.988 92.323 li
11.992 92.317 li
12.014 92.295 12.04 92.277 12.069 92.264 cv
13.88 91.484 15.086 90.458 15.878 89.265 cv
15.988 89.092 li
15.988 87.254 li
15.988 87.124 16.093 87.019 16.222 87.019 cv
17.801 87.019 li
17.978 87.019 18.091 87.208 18.008 87.364 cv
17.748 87.849 li
18.019 88.316 li
18.109 88.472 17.996 88.667 17.816 88.667 cv
16.456 88.667 li
16.456 89.059 li
16.624 89.302 li
17.643 90.678 19.247 91.479 20.964 92.247 cv
21.078 92.298 21.117 92.41 21.096 92.509 cv
21.077 92.559 li
21.076 92.592 li
21.014 92.838 20.868 93.029 20.685 93.158 cv
20.68 93.162 li
20.681 93.185 li
20.38 94.845 20.779 96.593 21.495 98.178 cv
21.568 98.34 21.44 98.522 21.263 98.508 cv
21.096 98.488 li
21.074 98.492 li
21.062 98.492 21.05 98.491 21.039 98.489 cv
21.005 98.478 li
20.78 98.451 li
20.475 98.387 li
12.374 98.387 li
12.068 98.451 li
11.911 98.476 11.751 98.495 11.585 98.508 cv
cp
.298039 .298039 .298039 rgb
f
39.587 70.139 mo
39.596 70.13 li
39.587 70.13 li
39.587 70.139 li
cp
39.379 71.73 mo
39.379 71.209 li
38.696 71.209 li
38.696 71.73 li
39.379 71.73 li
cp
31.062 71.73 mo
31.062 71.209 li
30.378 71.209 li
30.378 71.73 li
31.062 71.73 li
cp
38.554 72.131 mo
38.411 72.131 38.296 72.015 38.296 71.872 cv
38.296 71.067 li
38.296 70.923 38.412 70.809 38.554 70.809 cv
39.521 70.809 li
39.663 70.809 39.78 70.923 39.78 71.067 cv
39.78 71.872 li
39.78 72.015 39.664 72.131 39.521 72.131 cv
38.554 72.131 li
cp
30.236 72.131 mo
30.093 72.131 29.978 72.015 29.978 71.872 cv
29.978 71.067 li
29.978 70.923 30.094 70.809 30.236 70.809 cv
31.203 70.809 li
31.344 70.809 31.462 70.923 31.462 71.067 cv
31.462 71.872 li
31.462 72.016 31.345 72.131 31.203 72.131 cv
30.236 72.131 li
cp
39.379 73.706 mo
39.379 73.185 li
38.696 73.185 li
38.696 73.706 li
39.379 73.706 li
cp
31.062 73.706 mo
31.062 73.185 li
30.378 73.185 li
30.378 73.706 li
31.062 73.706 li
cp
38.554 74.107 mo
38.411 74.107 38.296 73.99 38.296 73.848 cv
38.296 73.043 li
38.296 72.899 38.412 72.784 38.554 72.784 cv
39.521 72.784 li
39.663 72.784 39.78 72.899 39.78 73.043 cv
39.78 73.848 li
39.78 73.99 39.665 74.107 39.521 74.107 cv
38.554 74.107 li
cp
30.236 74.107 mo
30.092 74.107 29.978 73.99 29.978 73.848 cv
29.978 73.043 li
29.978 72.9 30.093 72.784 30.236 72.784 cv
31.203 72.784 li
31.345 72.784 31.462 72.898 31.462 73.043 cv
31.462 73.848 li
31.462 73.991 31.346 74.107 31.203 74.107 cv
30.236 74.107 li
cp
34.181 74.538 mo
34.804 74.174 li
34.957 74.086 35.204 73.94 35.357 73.851 cv
35.979 73.488 li
35.354 73.131 li
35.2 73.043 34.951 72.901 34.797 72.813 cv
34.171 72.457 li
34.175 73.177 li
34.176 73.353 34.177 73.641 34.178 73.817 cv
34.181 74.538 li
cp
34.129 74.963 mo
33.99 74.96 33.87 74.879 33.815 74.745 cv
33.792 74.688 33.781 74.627 33.781 74.566 cv
33.778 73.819 li
33.777 73.643 33.775 73.355 33.775 73.178 cv
33.771 72.432 li
33.771 72.371 33.78 72.31 33.803 72.253 cv
33.864 72.099 34.01 72.013 34.175 72.035 cv
34.237 72.043 34.294 72.065 34.347 72.095 cv
34.995 72.466 li
35.149 72.553 35.399 72.695 35.552 72.783 cv
36.201 73.153 li
36.253 73.183 36.301 73.221 36.34 73.27 cv
36.443 73.401 36.443 73.57 36.342 73.702 cv
36.304 73.751 36.256 73.79 36.204 73.82 cv
35.559 74.197 li
35.406 74.286 35.158 74.431 35.006 74.52 cv
34.361 74.897 li
34.308 74.927 34.251 74.95 34.189 74.958 cv
34.169 74.961 34.148 74.963 34.129 74.963 cv
cp
39.379 75.763 mo
39.379 75.242 li
38.696 75.242 li
38.696 75.763 li
39.379 75.763 li
cp
31.062 75.763 mo
31.062 75.242 li
30.378 75.242 li
30.378 75.763 li
31.062 75.763 li
cp
37.565 75.88 mo
37.631 75.88 37.686 75.825 37.686 75.758 cv
37.686 71.331 li
37.686 71.263 37.631 71.209 37.565 71.209 cv
32.246 71.209 li
32.178 71.209 32.123 71.264 32.123 71.331 cv
32.123 75.758 li
32.123 75.825 32.178 75.88 32.246 75.88 cv
37.565 75.88 li
cp
38.554 76.164 mo
38.412 76.164 38.296 76.048 38.296 75.905 cv
38.296 75.1 li
38.296 74.956 38.412 74.841 38.554 74.841 cv
39.521 74.841 li
39.663 74.841 39.78 74.956 39.78 75.1 cv
39.78 75.905 li
39.78 76.048 39.664 76.164 39.521 76.164 cv
38.554 76.164 li
cp
30.236 76.164 mo
30.093 76.164 29.978 76.047 29.978 75.905 cv
29.978 75.1 li
29.978 74.956 30.093 74.841 30.236 74.841 cv
31.203 74.841 li
31.345 74.841 31.462 74.955 31.462 75.1 cv
31.462 75.905 li
31.462 76.048 31.345 76.164 31.203 76.164 cv
30.236 76.164 li
cp
32.246 76.28 mo
31.957 76.28 31.723 76.046 31.723 75.758 cv
31.723 71.331 li
31.723 71.043 31.957 70.808 32.246 70.808 cv
37.565 70.808 li
37.853 70.808 38.086 71.043 38.086 71.331 cv
38.086 75.758 li
38.086 76.046 37.853 76.28 37.565 76.28 cv
32.246 76.28 li
cp
38.319 76.956 mo
38.332 76.894 li
38.372 76.801 38.464 76.737 38.571 76.737 cv
39.538 76.737 li
39.644 76.737 39.736 76.801 39.775 76.894 cv
39.779 76.911 li
39.889 76.826 li
39.954 76.755 39.993 76.661 39.993 76.558 cv
39.993 70.553 li
39.993 70.451 39.954 70.357 39.889 70.286 cv
39.781 70.203 li
39.776 70.231 li
39.737 70.323 39.644 70.389 39.538 70.389 cv
38.571 70.389 li
38.463 70.389 38.371 70.323 38.332 70.231 cv
38.316 70.156 li
31.457 70.156 li
31.442 70.231 li
31.402 70.324 31.31 70.389 31.203 70.389 cv
30.236 70.389 li
30.128 70.389 30.037 70.323 29.998 70.231 cv
29.987 70.186 li
29.843 70.247 29.742 70.389 29.742 70.553 cv
29.742 76.558 li
29.742 76.723 29.843 76.865 29.99 76.925 cv
29.998 76.894 li
30.037 76.801 30.129 76.737 30.236 76.737 cv
31.203 76.737 li
31.309 76.737 31.402 76.801 31.442 76.894 cv
31.454 76.956 li
38.319 76.956 li
cp
39.596 76.995 mo
39.588 76.987 li
39.588 76.995 li
39.596 76.995 li
cp
39.396 77.366 mo
39.396 77.137 li
38.712 77.137 li
38.712 77.357 li
31.062 77.357 li
31.062 77.137 li
30.378 77.137 li
30.378 77.357 li
30.14 77.357 li
29.699 77.357 29.341 76.999 29.341 76.558 cv
29.341 70.553 li
29.341 70.113 29.699 69.755 30.14 69.755 cv
30.378 69.755 li
30.378 69.988 li
31.062 69.988 li
31.062 69.755 li
38.712 69.755 li
38.712 69.988 li
39.396 69.988 li
39.396 69.745 li
39.675 69.759 li
40.078 69.8 40.393 70.141 40.393 70.553 cv
40.393 76.558 li
40.393 76.972 40.078 77.311 39.673 77.353 cv
39.396 77.366 li
cp
.2 .2 .2 rgb
f
76.9 89.05 mo
76.893 89.05 76.886 89.049 76.878 89.049 cv
76.764 89.034 76.684 88.93 76.698 88.816 cv
76.709 88.727 76.738 88.64 76.795 88.566 cv
76.825 88.529 76.86 88.497 76.899 88.472 cv
76.966 88.43 77.039 88.411 77.108 88.404 cv
77.222 88.392 77.324 88.475 77.336 88.589 cv
77.348 88.704 77.265 88.805 77.15 88.817 cv
77.133 88.819 77.125 88.822 77.122 88.823 cv
77.12 88.828 77.114 88.841 77.111 88.868 cv
77.097 88.975 77.005 89.052 76.9 89.05 cv
cp
69.364 89.05 mo
69.357 89.05 69.35 89.049 69.343 89.049 cv
69.229 89.034 69.148 88.93 69.162 88.816 cv
69.173 88.727 69.202 88.64 69.259 88.566 cv
69.289 88.529 69.324 88.497 69.363 88.472 cv
69.43 88.43 69.503 88.411 69.572 88.404 cv
69.686 88.392 69.788 88.475 69.8 88.589 cv
69.812 88.704 69.729 88.805 69.614 88.817 cv
69.597 88.819 69.589 88.822 69.586 88.823 cv
69.584 88.828 69.578 88.841 69.574 88.868 cv
69.561 88.975 69.469 89.052 69.364 89.05 cv
cp
77.154 89.462 mo
77.489 89.462 77.761 89.189 77.761 88.854 cv
77.761 88.519 77.489 88.246 77.154 88.246 cv
76.819 88.246 76.546 88.519 76.546 88.854 cv
76.546 89.189 76.819 89.462 77.154 89.462 cv
cp
69.585 89.462 mo
69.92 89.462 70.192 89.189 70.192 88.854 cv
70.192 88.519 69.92 88.246 69.585 88.246 cv
69.249 88.246 68.977 88.519 68.977 88.854 cv
68.977 89.189 69.249 89.462 69.585 89.462 cv
cp
77.139 95.989 mo
77.196 95.99 77.251 95.987 77.31 95.981 cv
77.311 89.96 li
76.962 89.96 li
76.965 95.977 li
77.026 95.984 77.082 95.988 77.139 95.989 cv
cp
69.57 95.989 mo
69.626 95.99 69.682 95.987 69.741 95.981 cv
69.743 89.96 li
69.393 89.96 li
69.396 95.977 li
69.457 95.984 69.514 95.988 69.57 95.989 cv
cp
77.137 96.53 mo
77.553 96.53 77.931 96.495 78.221 96.438 cv
78.365 96.41 78.484 96.377 78.572 96.343 cv
78.584 96.338 78.595 96.334 78.605 96.329 cv
78.619 96.323 li
78.582 96.305 li
78.535 96.283 78.478 96.262 78.411 96.241 cv
78.234 96.184 78.004 96.137 77.752 96.111 cv
77.727 96.106 li
77.727 96.155 li
77.727 96.251 77.662 96.335 77.568 96.358 cv
77.422 96.393 77.277 96.406 77.135 96.405 cv
76.992 96.403 76.852 96.386 76.715 96.359 cv
76.617 96.34 76.546 96.255 76.546 96.155 cv
76.546 96.107 li
76.385 96.126 li
76.196 96.153 76.024 96.191 75.882 96.234 cv
75.788 96.263 75.71 96.294 75.653 96.323 cv
75.667 96.329 li
75.678 96.334 75.689 96.338 75.701 96.343 cv
75.789 96.377 75.907 96.41 76.052 96.438 cv
76.342 96.495 76.72 96.53 77.137 96.53 cv
cp
69.567 96.53 mo
69.984 96.53 70.362 96.495 70.651 96.438 cv
70.797 96.41 70.915 96.377 71.003 96.343 cv
71.014 96.338 71.026 96.334 71.037 96.329 cv
71.05 96.323 li
71.013 96.305 li
70.965 96.283 70.908 96.262 70.842 96.241 cv
70.664 96.184 70.435 96.137 70.183 96.111 cv
70.159 96.106 li
70.159 96.155 li
70.159 96.251 70.093 96.335 69.999 96.358 cv
69.852 96.393 69.708 96.406 69.566 96.405 cv
69.423 96.403 69.283 96.386 69.146 96.359 cv
69.048 96.34 68.977 96.255 68.977 96.155 cv
68.977 96.107 li
68.817 96.126 li
68.627 96.153 68.455 96.191 68.313 96.234 cv
68.218 96.263 68.142 96.294 68.084 96.323 cv
68.098 96.329 li
68.109 96.334 68.12 96.338 68.132 96.343 cv
68.219 96.377 68.338 96.41 68.483 96.438 cv
68.772 96.495 69.151 96.53 69.567 96.53 cv
cp
77.136 97.195 mo
77.549 97.195 77.926 97.168 78.217 97.123 cv
78.363 97.101 78.484 97.075 78.575 97.047 cv
78.624 97.033 78.659 97.019 78.683 97.008 cv
78.691 97.004 li
78.691 96.741 li
78.527 96.794 li
78.456 96.813 78.38 96.831 78.3 96.846 cv
77.979 96.909 77.574 96.945 77.137 96.945 cv
76.699 96.945 76.294 96.909 75.972 96.846 cv
75.893 96.831 75.816 96.813 75.746 96.794 cv
75.58 96.741 li
75.58 97.004 li
75.587 97.008 li
75.611 97.019 75.646 97.032 75.696 97.047 cv
75.788 97.075 75.908 97.101 76.054 97.123 cv
76.345 97.168 76.722 97.195 77.136 97.195 cv
cp
69.567 97.195 mo
69.98 97.195 70.357 97.168 70.648 97.123 cv
70.794 97.101 70.914 97.075 71.006 97.047 cv
71.055 97.033 71.09 97.019 71.114 97.008 cv
71.122 97.004 li
71.122 96.741 li
70.958 96.794 li
70.887 96.813 70.812 96.831 70.731 96.846 cv
70.41 96.909 70.005 96.945 69.567 96.945 cv
69.13 96.945 68.725 96.909 68.403 96.846 cv
68.323 96.831 68.247 96.813 68.177 96.794 cv
68.01 96.741 li
68.01 97.004 li
68.018 97.008 li
68.042 97.019 68.077 97.032 68.127 97.047 cv
68.218 97.075 68.339 97.101 68.484 97.123 cv
68.776 97.168 69.153 97.195 69.567 97.195 cv
cp
69.567 97.611 mo
69.136 97.611 68.738 97.583 68.422 97.534 cv
68.264 97.511 68.123 97.481 68.007 97.446 cv
67.899 97.413 67.786 97.369 67.708 97.301 cv
67.659 97.259 67.595 97.183 67.595 97.072 cv
67.595 96.432 li
67.606 96.375 li
67.596 96.323 li
67.596 96.235 67.635 96.164 67.674 96.117 cv
67.78 95.987 67.992 95.898 68.191 95.837 cv
68.411 95.769 68.683 95.717 68.971 95.689 cv
68.977 95.689 li
68.977 89.752 li
68.977 89.738 68.978 89.724 68.981 89.711 cv
68.989 89.685 li
68.934 89.643 li
68.706 89.456 68.561 89.172 68.561 88.854 cv
68.561 88.289 69.02 87.831 69.585 87.831 cv
70.149 87.831 70.608 88.289 70.608 88.854 cv
70.608 89.207 70.429 89.518 70.157 89.703 cv
70.153 89.705 li
70.154 89.711 li
70.158 89.749 li
70.187 89.763 li
70.208 89.78 70.226 89.8 70.241 89.825 cv
71.703 92.436 74.836 92.354 76.455 89.815 cv
76.47 89.791 76.49 89.772 76.512 89.756 cv
76.549 89.74 li
76.56 89.685 li
76.43 89.577 li
76.245 89.392 76.13 89.136 76.13 88.854 cv
76.13 88.289 76.589 87.831 77.154 87.831 cv
77.719 87.831 78.177 88.289 78.177 88.854 cv
78.177 89.207 77.998 89.518 77.726 89.703 cv
77.718 89.706 li
77.727 89.752 li
77.727 95.702 li
77.754 95.697 li
77.796 95.697 li
78.07 95.726 78.328 95.778 78.537 95.844 cv
78.728 95.904 78.926 95.991 79.03 96.117 cv
79.031 96.119 li
79.046 96.129 li
79.084 96.167 79.107 96.219 79.107 96.276 cv
79.107 96.317 li
79.108 96.323 li
79.107 96.328 li
79.107 97.072 li
79.107 97.183 79.043 97.259 78.994 97.301 cv
78.916 97.368 78.803 97.413 78.694 97.446 cv
78.579 97.481 78.437 97.511 78.28 97.534 cv
77.964 97.583 77.566 97.611 77.136 97.611 cv
76.705 97.611 76.307 97.583 75.991 97.534 cv
75.833 97.511 75.693 97.481 75.576 97.446 cv
75.468 97.413 75.356 97.369 75.277 97.301 cv
75.228 97.259 75.164 97.183 75.164 97.072 cv
75.164 96.432 li
75.176 96.375 li
75.165 96.323 li
75.165 96.235 75.204 96.164 75.243 96.117 cv
75.35 95.987 75.561 95.898 75.76 95.837 cv
75.98 95.769 76.252 95.717 76.54 95.689 cv
76.546 95.689 li
76.546 90.407 li
76.453 90.529 li
75.588 91.599 74.431 92.156 73.288 92.167 cv
72.144 92.179 71.015 91.647 70.204 90.539 cv
70.159 90.466 li
70.159 95.702 li
70.185 95.697 li
70.227 95.697 li
70.501 95.726 70.759 95.778 70.968 95.844 cv
71.159 95.904 71.357 95.991 71.461 96.117 cv
71.462 96.119 li
71.477 96.129 li
71.515 96.167 71.538 96.219 71.538 96.276 cv
71.538 96.317 li
71.539 96.323 li
71.538 96.328 li
71.538 97.072 li
71.538 97.183 71.474 97.259 71.425 97.301 cv
71.346 97.368 71.234 97.413 71.126 97.446 cv
71.009 97.481 70.868 97.511 70.711 97.534 cv
70.395 97.583 69.997 97.611 69.567 97.611 cv
cp
f
56.489 50.364 mo
57.552 49.879 li
57.147 48.99 li
57.086 48.856 56.926 48.797 56.792 48.858 cv
56.687 48.907 li
56.489 50.364 li
cp
54.622 51.217 mo
56.11 50.538 li
56.096 50.526 li
56.063 50.482 56.046 50.426 56.054 50.367 cv
56.223 49.118 li
54.813 49.762 li
54.815 49.787 li
54.622 51.217 li
cp
52.793 52.054 mo
54.217 51.403 li
54.188 51.344 li
54.18 51.317 54.178 51.288 54.182 51.259 cv
54.356 49.971 li
52.976 50.601 li
52.98 50.661 li
52.793 52.054 li
cp
50.86 52.937 mo
52.367 52.248 li
52.352 52.218 li
52.345 52.191 52.343 52.162 52.347 52.133 cv
52.526 50.807 li
51.032 51.49 li
51.037 51.499 li
51.044 51.526 51.046 51.554 51.043 51.584 cv
50.86 52.937 li
cp
50.349 53.17 mo
50.415 53.14 li
50.41 53.055 li
50.594 51.69 li
49.556 52.164 li
49.422 52.226 49.363 52.385 49.425 52.519 cv
49.622 52.953 li
49.639 52.948 li
49.689 52.937 49.741 52.932 49.795 52.932 cv
50.008 52.932 50.201 53.019 50.341 53.159 cv
50.349 53.17 li
cp
49.76 54.081 mo
49.968 54.081 50.136 53.913 50.136 53.705 cv
50.136 53.497 49.968 53.329 49.76 53.329 cv
49.553 53.329 49.384 53.497 49.384 53.705 cv
49.384 53.913 49.553 54.081 49.76 54.081 cv
cp
58.491 55.074 mo
58.491 54.119 li
58.166 54.119 li
57.542 55.074 li
58.491 55.074 li
cp
57.028 55.074 mo
57.652 54.119 li
56.092 54.119 li
55.468 55.074 li
57.028 55.074 li
cp
54.954 55.074 mo
55.578 54.119 li
54.059 54.119 li
53.435 55.074 li
54.954 55.074 li
cp
52.921 55.074 mo
53.545 54.119 li
51.913 54.119 li
51.289 55.074 li
52.921 55.074 li
cp
50.775 55.074 mo
51.399 54.119 li
50.431 54.119 li
50.341 54.251 li
50.271 54.321 50.188 54.378 50.095 54.417 cv
50.001 54.447 li
50.001 55.074 li
50.775 55.074 li
cp
51.642 56.56 mo
51.523 56.56 51.427 56.464 51.427 56.345 cv
51.427 56.226 51.523 56.129 51.642 56.129 cv
56.777 56.129 li
56.895 56.129 56.991 56.226 56.991 56.345 cv
56.991 56.464 56.895 56.56 56.777 56.56 cv
51.642 56.56 li
cp
51.642 57.651 mo
51.523 57.651 51.427 57.555 51.427 57.435 cv
51.427 57.317 51.523 57.22 51.642 57.22 cv
56.777 57.22 li
56.895 57.22 56.991 57.317 56.991 57.435 cv
56.991 57.555 56.895 57.651 56.777 57.651 cv
51.642 57.651 li
cp
54.559 58.703 mo
54.44 58.703 54.343 58.607 54.343 58.488 cv
54.343 58.37 54.44 58.273 54.559 58.273 cv
56.713 58.273 li
56.832 58.273 56.928 58.37 56.928 58.488 cv
56.928 58.607 56.832 58.703 56.713 58.703 cv
54.559 58.703 li
cp
51.642 58.703 mo
51.523 58.703 51.427 58.607 51.427 58.488 cv
51.427 58.37 51.523 58.273 51.642 58.273 cv
53.831 58.273 li
53.95 58.273 54.047 58.37 54.047 58.488 cv
54.047 58.607 53.95 58.703 53.831 58.703 cv
51.642 58.703 li
cp
58.224 59.405 mo
58.371 59.405 58.491 59.285 58.491 59.137 cv
58.491 55.505 li
50.001 55.505 li
50.001 59.137 li
50.001 59.285 50.121 59.405 50.269 59.405 cv
58.224 59.405 li
cp
50.269 59.836 mo
49.883 59.836 49.57 59.523 49.57 59.137 cv
49.57 54.441 li
49.494 54.417 li
49.216 54.3 49.022 54.025 49.022 53.705 cv
49.022 53.598 49.043 53.497 49.082 53.405 cv
49.245 53.163 li
49.033 52.698 li
48.872 52.347 49.027 51.933 49.377 51.772 cv
56.613 48.467 li
56.964 48.306 57.379 48.461 57.539 48.812 cv
58.034 49.895 li
58.083 50.004 58.035 50.131 57.927 50.181 cv
50.552 53.551 li
50.566 53.689 li
58.707 53.689 li
58.825 53.689 58.922 53.785 58.922 53.904 cv
58.922 59.137 li
58.922 59.523 58.609 59.836 58.224 59.836 cv
50.269 59.836 li
cp
f
49.928 90.463 mo
49.907 90.463 49.885 90.46 49.865 90.452 cv
49.752 90.415 49.691 90.294 49.728 90.181 cv
49.864 89.773 50.123 89.521 50.481 89.416 cv
50.594 89.382 50.713 89.448 50.747 89.561 cv
50.78 89.674 50.715 89.794 50.602 89.827 cv
50.49 89.86 50.399 89.913 50.325 89.987 cv
50.25 90.062 50.184 90.168 50.136 90.316 cv
50.105 90.408 50.019 90.465 49.928 90.463 cv
cp
57.521 90.686 mo
57.402 90.686 57.306 90.59 57.306 90.472 cv
57.306 90.353 57.402 90.257 57.521 90.257 cv
58.035 90.257 li
58.153 90.257 58.249 90.353 58.249 90.472 cv
58.249 90.59 58.153 90.686 58.035 90.686 cv
57.521 90.686 li
cp
57.521 91.543 mo
57.402 91.543 57.306 91.447 57.306 91.329 cv
57.306 91.211 57.402 91.115 57.521 91.115 cv
58.035 91.115 li
58.153 91.115 58.249 91.211 58.249 91.329 cv
58.249 91.447 58.153 91.543 58.035 91.543 cv
57.521 91.543 li
cp
57.521 92.383 mo
57.402 92.383 57.306 92.287 57.306 92.169 cv
57.306 92.051 57.402 91.954 57.521 91.954 cv
58.035 91.954 li
58.153 91.954 58.249 92.051 58.249 92.169 cv
58.249 92.287 58.153 92.383 58.035 92.383 cv
57.521 92.383 li
cp
51.139 92.486 mo
51.098 92.482 51.058 92.466 51.024 92.438 cv
50.932 92.364 50.918 92.228 50.993 92.137 cv
52.056 90.834 li
52.131 90.742 52.266 90.728 52.358 90.803 cv
52.45 90.878 52.463 91.013 52.388 91.104 cv
51.325 92.408 li
51.278 92.465 51.208 92.492 51.139 92.486 cv
cp
51.38 93.6 mo
51.338 93.596 51.298 93.581 51.264 93.552 cv
51.172 93.477 51.158 93.342 51.233 93.251 cv
53.05 91.023 li
53.126 90.931 53.26 90.917 53.352 90.992 cv
53.444 91.067 53.458 91.202 53.383 91.294 cv
51.565 93.522 li
51.519 93.579 51.448 93.606 51.38 93.6 cv
cp
57.743 94.684 mo
57.826 94.684 57.892 94.617 57.892 94.535 cv
57.892 94.453 57.826 94.385 57.743 94.385 cv
57.661 94.385 57.594 94.453 57.594 94.535 cv
57.594 94.617 57.661 94.684 57.743 94.684 cv
cp
55.771 95.035 mo
56.209 95.035 56.566 94.678 56.566 94.237 cv
56.566 91.064 li
56.566 90.624 56.209 90.268 55.771 90.268 cv
51.341 90.268 li
50.903 90.268 50.547 90.624 50.547 91.064 cv
50.547 94.237 li
50.547 94.678 50.903 95.035 51.341 95.035 cv
55.771 95.035 li
cp
57.743 95.112 mo
57.425 95.112 57.165 94.853 57.165 94.535 cv
57.165 94.216 57.425 93.957 57.743 93.957 cv
58.062 93.957 58.321 94.216 58.321 94.535 cv
58.321 94.853 58.062 95.112 57.743 95.112 cv
cp
51.341 95.464 mo
50.665 95.464 50.118 94.913 50.118 94.237 cv
50.118 91.064 li
50.118 90.389 50.665 89.839 51.341 89.839 cv
55.771 89.839 li
56.446 89.839 56.994 90.389 56.994 91.064 cv
56.994 94.237 li
56.994 94.913 56.446 95.464 55.771 95.464 cv
51.341 95.464 li
cp
57.353 96.05 mo
58.064 96.05 58.641 95.473 58.641 94.762 cv
58.641 90.394 li
58.641 89.683 58.064 89.106 57.353 89.106 cv
50.756 89.106 li
50.045 89.106 49.468 89.683 49.468 90.394 cv
49.468 94.762 li
49.468 95.473 50.045 96.05 50.756 96.05 cv
57.353 96.05 li
cp
57.343 97.455 mo
57.19 96.479 li
57.076 96.479 li
57.331 97.455 li
57.343 97.455 li
cp
50.743 97.455 mo
50.998 96.479 li
50.885 96.479 li
50.731 97.455 li
50.743 97.455 li
cp
50.48 97.883 mo
50.348 97.883 50.248 97.766 50.269 97.636 cv
50.455 96.449 li
50.41 96.444 li
49.628 96.284 49.039 95.592 49.039 94.762 cv
49.039 90.394 li
49.039 89.447 49.808 88.678 50.756 88.678 cv
55.615 88.678 li
54.479 86.972 li
54.412 86.873 54.439 86.741 54.538 86.675 cv
54.637 86.609 54.77 86.636 54.835 86.734 cv
55.924 88.367 li
57.032 86.667 li
57.097 86.569 57.23 86.54 57.329 86.605 cv
57.428 86.67 57.456 86.803 57.391 86.902 cv
56.233 88.678 li
57.353 88.678 li
58.301 88.678 59.07 89.447 59.07 90.394 cv
59.07 94.762 li
59.07 95.592 58.481 96.284 57.699 96.444 cv
57.62 96.452 li
57.806 97.636 li
57.826 97.766 57.726 97.883 57.594 97.883 cv
57.165 97.883 li
57.067 97.883 56.982 97.817 56.958 97.723 cv
56.651 96.55 li
56.647 96.479 li
51.427 96.479 li
51.423 96.55 li
51.117 97.723 li
51.092 97.817 51.006 97.883 50.909 97.883 cv
50.48 97.883 li
cp
f
96.082 71.247 mo
96.081 70.592 li
96.042 70.592 li
96.042 71.247 li
96.082 71.247 li
cp
87.09 71.247 mo
87.09 70.592 li
87.05 70.592 li
87.051 71.247 li
87.09 71.247 li
cp
95.981 71.618 mo
95.945 71.618 95.909 71.611 95.876 71.599 cv
95.745 71.548 95.672 71.417 95.672 71.287 cv
95.672 70.551 li
95.672 70.423 95.745 70.29 95.876 70.24 cv
95.909 70.228 95.945 70.221 95.981 70.221 cv
96.144 70.221 li
96.18 70.221 96.215 70.228 96.248 70.24 cv
96.379 70.29 96.452 70.421 96.452 70.551 cv
96.452 71.287 li
96.452 71.417 96.379 71.548 96.248 71.599 cv
96.215 71.611 96.18 71.618 96.144 71.618 cv
95.981 71.618 li
cp
86.989 71.618 mo
86.952 71.618 86.918 71.611 86.885 71.599 cv
86.752 71.549 86.68 71.417 86.68 71.288 cv
86.68 70.551 li
86.68 70.423 86.753 70.29 86.885 70.241 cv
86.917 70.228 86.952 70.221 86.989 70.221 cv
87.152 70.221 li
87.187 70.221 87.222 70.228 87.253 70.239 cv
87.387 70.289 87.461 70.421 87.461 70.551 cv
87.461 71.288 li
87.461 71.418 87.386 71.551 87.253 71.6 cv
87.222 71.611 87.187 71.618 87.152 71.618 cv
86.989 71.618 li
cp
96.043 72.263 mo
96.082 72.245 li
96.081 72.037 li
96.042 72.036 li
96.043 72.263 li
cp
89.063 72.406 mo
89.016 72.409 88.967 72.394 88.929 72.359 cv
88.853 72.291 88.846 72.174 88.915 72.097 cv
90.133 70.739 li
90.201 70.663 90.318 70.656 90.395 70.724 cv
90.47 70.793 90.477 70.91 90.409 70.986 cv
89.191 72.345 li
89.157 72.383 89.111 72.404 89.063 72.406 cv
cp
88.365 72.407 mo
88.324 72.405 88.283 72.389 88.25 72.359 cv
88.174 72.291 88.166 72.173 88.236 72.097 cv
89.453 70.739 li
89.521 70.663 89.638 70.656 89.715 70.724 cv
89.791 70.793 89.797 70.91 89.729 70.986 cv
88.511 72.345 li
88.477 72.383 88.431 72.404 88.383 72.406 cv
88.368 72.407 li
88.365 72.407 li
cp
96.358 73.085 mo
97.718 72.443 li
97.976 72.322 98.024 72.12 97.985 72.037 cv
97.946 71.954 97.76 71.863 97.502 71.984 cv
96.151 72.621 li
96.358 73.085 li
cp
95.978 73.263 mo
96.022 73.243 li
95.815 72.78 li
95.772 72.8 li
95.978 73.263 li
cp
92.439 74.932 mo
95.643 73.422 li
95.436 72.958 li
92.232 74.469 li
92.439 74.932 li
cp
91.729 75.139 mo
92.098 75.079 li
91.9 74.635 li
91.606 74.885 li
91.559 74.94 91.529 74.985 91.51 75.02 cv
91.484 75.092 li
91.54 75.12 li
91.58 75.131 91.64 75.14 91.729 75.139 cv
cp
95.1 75.953 mo
95.128 75.953 95.16 75.928 95.16 75.885 cv
95.16 74.059 li
92.376 75.371 li
92.223 75.443 91.968 75.506 91.73 75.509 cv
91.61 75.511 91.49 75.499 91.388 75.461 cv
91.377 75.456 li
91.297 75.412 li
90.868 75.624 li
90.851 75.63 li
90.798 75.642 li
90.779 75.643 li
90.714 75.641 90.651 75.604 90.62 75.541 cv
90.575 75.449 90.613 75.337 90.704 75.292 cv
91.112 75.09 li
91.191 74.827 li
91.339 74.565 91.656 74.33 91.844 74.242 cv
95.16 72.679 li
95.16 70.559 li
95.16 70.517 95.128 70.491 95.1 70.491 cv
87.999 70.491 li
87.97 70.491 87.939 70.517 87.939 70.559 cv
87.939 75.885 li
87.939 75.928 87.97 75.953 87.999 75.953 cv
95.1 75.953 li
cp
91.01 76.937 mo
90.907 76.937 90.824 76.854 90.824 76.752 cv
90.824 76.65 90.907 76.567 91.01 76.567 cv
92.374 76.567 li
92.476 76.567 92.559 76.65 92.559 76.752 cv
92.559 76.854 92.476 76.937 92.374 76.937 cv
91.01 76.937 li
cp
96.004 77.273 mo
96.082 77.273 96.157 77.254 96.222 77.219 cv
96.378 77.068 li
96.434 76.909 li
96.505 76.052 li
96.558 75.332 96.59 74.625 96.606 73.921 cv
96.613 73.374 li
95.531 73.884 li
95.531 75.885 li
95.531 76.122 95.343 76.324 95.1 76.324 cv
87.999 76.324 li
87.756 76.324 87.568 76.122 87.568 75.885 cv
87.568 70.559 li
87.568 70.323 87.756 70.12 87.999 70.12 cv
95.1 70.12 li
95.343 70.12 95.531 70.323 95.531 70.559 cv
95.531 72.504 li
95.672 72.438 li
95.672 71.996 li
95.672 71.867 95.745 71.735 95.876 71.685 cv
95.908 71.672 95.944 71.665 95.981 71.665 cv
96.144 71.665 li
96.18 71.665 96.216 71.673 96.248 71.685 cv
96.379 71.735 96.452 71.866 96.452 71.996 cv
96.452 72.07 li
96.614 71.993 li
96.613 71.801 li
96.571 70.078 li
96.534 69.918 li
96.419 69.778 li
96.37 69.746 96.31 69.73 96.243 69.73 cv
86.948 69.73 li
86.88 69.73 86.82 69.745 86.771 69.775 cv
86.659 69.914 li
86.62 70.08 li
86.576 71.782 li
86.558 73.195 86.588 74.58 86.689 76.04 cv
86.757 76.916 li
86.78 77.013 li
86.85 77.132 li
86.942 77.232 87.09 77.273 87.266 77.273 cv
96.004 77.273 li
cp
87.266 77.717 mo
86.925 77.717 86.4 77.58 86.316 76.975 cv
86.106 74.551 86.09 72.385 86.176 70.048 cv
86.177 70.037 li
86.22 69.589 86.515 69.286 86.948 69.286 cv
96.243 69.286 li
96.676 69.286 96.977 69.6 97.014 70.039 cv
97.014 70.05 li
97.056 71.785 li
97.344 71.649 li
97.682 71.489 98.152 71.522 98.32 71.879 cv
98.489 72.236 98.215 72.619 97.876 72.778 cv
97.06 73.163 li
97.058 73.505 li
97.041 74.641 96.987 75.779 96.875 76.968 cv
96.873 76.979 li
96.799 77.45 96.403 77.717 96.004 77.717 cv
87.266 77.717 li
cp
f
19.678 71.329 mo
19.554 70.912 li
18.868 71.115 li
19.678 71.329 li
cp
20.725 71.606 mo
20.731 71.588 li
20.752 71.558 li
20.678 71.31 li
20.646 71.296 li
20.514 71.225 20.408 71.101 20.362 70.945 cv
20.316 70.79 20.337 70.629 20.409 70.497 cv
20.429 70.468 li
20.418 70.433 li
20.401 70.434 li
20.098 70.434 19.814 70.264 19.673 69.991 cv
19.645 69.929 li
17.164 70.665 li
18.115 70.917 li
19.632 70.466 li
19.74 70.435 19.852 70.496 19.884 70.603 cv
20.135 71.45 li
20.725 71.606 li
cp
14.465 73.172 mo
14.448 73.172 14.431 73.17 14.415 73.165 cv
14.075 73.075 li
13.967 73.047 13.902 72.936 13.931 72.828 cv
13.959 72.72 14.07 72.656 14.178 72.684 cv
14.518 72.774 li
14.626 72.803 14.691 72.913 14.662 73.021 cv
14.638 73.112 14.555 73.172 14.465 73.172 cv
cp
16.436 74.119 mo
16.467 73.804 li
16.474 73.738 16.512 73.679 16.57 73.647 cv
16.847 73.494 li
16.557 73.367 li
16.496 73.341 16.452 73.286 16.439 73.22 cv
16.379 72.911 li
16.17 73.147 li
16.126 73.197 16.059 73.221 15.994 73.213 cv
15.679 73.174 li
15.839 73.447 li
15.873 73.505 15.877 73.575 15.848 73.635 cv
15.714 73.922 li
16.024 73.854 li
16.089 73.84 16.157 73.858 16.206 73.903 cv
16.436 74.119 li
cp
12.697 74.14 mo
12.698 74.126 li
13.469 71.21 li
13.491 71.165 li
12.626 70.936 li
11.839 73.914 li
12.697 74.14 li
cp
18.284 74.182 mo
18.267 74.182 18.25 74.179 18.233 74.175 cv
17.893 74.085 li
17.785 74.057 17.721 73.946 17.749 73.838 cv
17.778 73.73 17.889 73.666 17.996 73.694 cv
18.337 73.783 li
18.444 73.812 18.509 73.923 18.48 74.031 cv
18.456 74.122 18.374 74.182 18.284 74.182 cv
cp
16.617 74.748 mo
16.563 74.754 16.506 74.737 16.46 74.695 cv
16.007 74.272 li
15.402 74.406 li
15.239 74.442 15.104 74.274 15.175 74.122 cv
15.437 73.56 li
15.123 73.026 li
15.038 72.882 15.156 72.703 15.322 72.723 cv
15.937 72.799 li
16.348 72.335 li
16.459 72.209 16.666 72.266 16.698 72.43 cv
16.816 73.039 li
17.384 73.287 li
17.538 73.354 17.548 73.568 17.402 73.649 cv
16.86 73.95 li
16.8 74.566 li
16.79 74.671 16.707 74.739 16.617 74.748 cv
cp
18.651 75.715 mo
18.652 75.699 li
19.423 72.783 li
19.445 72.739 li
13.863 71.263 li
13.86 71.314 li
13.09 74.23 li
13.083 74.243 li
18.651 75.715 li
cp
12.985 75.919 mo
13.424 75.789 li
12.905 75.652 li
12.985 75.919 li
cp
19.883 76.04 mo
20.67 73.062 li
19.817 72.837 li
19.814 72.887 li
19.044 75.802 li
19.037 75.817 li
19.883 76.04 li
cp
20.056 76.488 mo
20.029 76.492 20.002 76.491 19.975 76.483 cv
11.54 74.253 li
11.432 74.224 11.368 74.113 11.396 74.006 cv
12.287 70.636 li
12.316 70.528 12.427 70.464 12.535 70.492 cv
20.97 72.723 li
21.078 72.751 21.142 72.862 21.114 72.97 cv
20.223 76.34 li
20.201 76.421 20.134 76.477 20.056 76.488 cv
cp
12.889 76.858 mo
15.046 76.218 li
14.138 75.978 li
14.132 75.984 li
14.112 76.001 14.088 76.014 14.061 76.022 cv
12.906 76.365 li
12.893 76.368 12.879 76.371 12.865 76.372 cv
12.772 76.381 12.682 76.322 12.654 76.228 cv
12.447 75.531 li
11.888 75.383 li
11.912 75.393 li
12.045 75.465 12.151 75.588 12.196 75.744 cv
12.243 75.9 12.221 76.06 12.149 76.193 cv
12.143 76.204 12.136 76.215 12.128 76.224 cv
12.121 76.234 li
12.156 76.353 li
12.208 76.355 li
12.482 76.381 12.731 76.545 12.861 76.795 cv
12.889 76.858 li
cp
20.019 77.115 mo
20.049 77.034 li
20.189 76.741 20.483 76.553 20.804 76.544 cv
20.832 76.545 li
20.868 76.399 li
20.859 76.386 20.852 76.375 20.845 76.364 cv
20.766 76.228 20.738 76.06 20.782 75.895 cv
20.825 75.73 20.933 75.598 21.069 75.519 cv
21.08 75.513 21.092 75.507 21.107 75.503 cv
21.182 75.213 li
21.173 75.2 21.165 75.189 21.159 75.178 cv
21.08 75.042 21.052 74.874 21.096 74.709 cv
21.139 74.544 21.246 74.413 21.382 74.334 cv
21.394 74.326 21.406 74.321 21.421 74.317 cv
21.495 74.033 li
21.485 74.02 21.478 74.009 21.471 73.998 cv
21.391 73.861 21.365 73.694 21.407 73.529 cv
21.452 73.364 21.558 73.233 21.695 73.153 cv
21.706 73.147 21.718 73.141 21.733 73.137 cv
21.749 73.078 li
21.723 73.066 li
21.449 72.898 21.287 72.59 21.309 72.266 cv
21.324 72.183 li
12.521 69.855 li
12.492 69.934 li
12.374 70.178 12.151 70.349 11.895 70.405 cv
11.752 70.423 li
11.736 70.483 li
11.749 70.497 li
11.757 70.507 11.765 70.517 11.771 70.529 cv
11.851 70.665 11.879 70.833 11.835 70.998 cv
11.792 71.162 11.685 71.295 11.548 71.374 cv
11.537 71.381 11.525 71.386 11.513 71.39 cv
11.494 71.397 li
11.423 71.662 li
11.437 71.677 li
11.445 71.687 11.453 71.698 11.459 71.709 cv
11.539 71.845 11.567 72.013 11.523 72.178 cv
11.479 72.343 11.373 72.475 11.235 72.554 cv
11.224 72.561 11.213 72.566 11.201 72.57 cv
11.182 72.576 li
11.11 72.849 li
11.123 72.864 li
11.132 72.874 11.139 72.884 11.146 72.895 cv
11.225 73.031 11.253 73.199 11.209 73.363 cv
11.166 73.529 11.059 73.661 10.922 73.74 cv
10.911 73.747 10.899 73.752 10.887 73.757 cv
10.868 73.763 li
10.828 73.912 li
10.943 73.997 li
11.14 74.173 11.249 74.432 11.231 74.702 cv
11.217 74.787 li
20.019 77.115 li
cp
20.202 77.563 mo
20.174 77.568 20.145 77.566 20.116 77.559 cv
15.798 76.417 li
12.805 77.305 li
12.781 77.312 12.755 77.315 12.73 77.312 cv
12.705 77.31 12.68 77.303 12.656 77.292 cv
12.599 77.263 12.56 77.21 12.547 77.148 cv
12.529 77.049 li
12.502 76.982 li
12.429 76.843 12.286 76.757 12.132 76.757 cv
12.055 76.764 li
11.951 76.788 11.845 76.727 11.815 76.625 cv
11.702 76.246 li
11.683 76.181 11.697 76.111 11.74 76.06 cv
11.799 75.988 li
11.808 75.967 li
11.818 75.933 11.82 75.895 11.809 75.859 cv
11.798 75.822 11.777 75.791 11.749 75.769 cv
11.73 75.756 li
11.641 75.728 li
11.578 75.708 11.527 75.657 11.509 75.593 cv
11.408 75.256 li
10.914 75.125 li
10.88 75.116 10.848 75.098 10.822 75.072 cv
10.766 75.015 10.747 74.931 10.775 74.857 cv
10.813 74.758 li
10.825 74.589 li
10.806 74.421 10.694 74.273 10.529 74.212 cv
10.426 74.176 10.369 74.069 10.395 73.966 cv
10.505 73.555 li
10.522 73.49 10.57 73.439 10.634 73.416 cv
10.726 73.384 li
10.781 73.337 li
10.798 73.314 10.81 73.289 10.818 73.26 cv
10.825 73.233 10.827 73.204 10.823 73.177 cv
10.8 73.108 li
10.734 73.034 li
10.69 72.983 10.674 72.914 10.691 72.849 cv
10.818 72.369 li
10.835 72.304 10.883 72.253 10.947 72.23 cv
11.04 72.197 li
11.094 72.15 li
11.111 72.129 11.124 72.103 11.132 72.075 cv
11.139 72.046 11.141 72.018 11.137 71.99 cv
11.113 71.923 li
11.048 71.848 li
11.004 71.798 10.987 71.728 11.004 71.663 cv
11.13 71.19 li
11.148 71.125 11.196 71.073 11.26 71.05 cv
11.353 71.018 li
11.406 70.97 li
11.423 70.949 11.436 70.923 11.443 70.894 cv
11.451 70.866 11.453 70.838 11.449 70.81 cv
11.424 70.742 li
11.36 70.668 li
11.316 70.617 11.3 70.548 11.317 70.483 cv
11.402 70.161 li
11.423 70.083 11.487 70.027 11.562 70.013 cv
11.809 70.015 li
11.918 69.986 12.016 69.923 12.083 69.831 cv
12.156 69.679 li
12.172 69.576 li
12.185 69.492 12.249 69.425 12.333 69.409 cv
12.364 69.402 12.395 69.403 12.425 69.411 cv
16.412 70.465 li
19.73 69.482 li
19.845 69.448 19.964 69.52 19.986 69.638 cv
20.005 69.735 li
20.032 69.804 li
20.104 69.942 20.248 70.029 20.402 70.029 cv
20.477 70.022 li
20.514 70.013 li
20.619 69.987 20.726 70.048 20.757 70.152 cv
20.847 70.455 li
20.866 70.52 20.852 70.589 20.81 70.641 cv
20.759 70.703 li
20.751 70.723 li
20.74 70.757 20.739 70.793 20.75 70.831 cv
20.761 70.867 20.782 70.898 20.81 70.92 cv
20.827 70.933 li
20.903 70.956 li
20.967 70.977 21.016 71.027 21.036 71.092 cv
21.17 71.545 li
21.18 71.577 21.181 71.611 21.175 71.643 cv
21.14 71.716 li
21.627 71.844 li
21.742 71.875 21.807 71.999 21.765 72.111 cv
21.728 72.21 li
21.716 72.379 li
21.729 72.491 21.783 72.595 21.866 72.669 cv
22.011 72.757 li
22.05 72.769 li
22.153 72.801 22.213 72.91 22.185 73.015 cv
22.097 73.343 li
22.08 73.408 22.032 73.46 21.968 73.482 cv
21.89 73.509 li
21.836 73.556 li
21.82 73.578 21.806 73.604 21.799 73.632 cv
21.791 73.661 21.79 73.69 21.794 73.717 cv
21.817 73.785 li
21.872 73.847 li
21.916 73.898 21.932 73.967 21.915 74.032 cv
21.786 74.523 li
21.769 74.589 21.72 74.64 21.656 74.663 cv
21.578 74.69 li
21.525 74.737 li
21.508 74.759 21.495 74.784 21.487 74.813 cv
21.48 74.841 21.478 74.869 21.482 74.897 cv
21.506 74.965 li
21.56 75.028 li
21.604 75.078 21.62 75.148 21.603 75.212 cv
21.472 75.709 li
21.455 75.774 21.406 75.826 21.343 75.848 cv
21.265 75.876 li
21.211 75.923 li
21.194 75.945 21.181 75.97 21.173 75.999 cv
21.166 76.027 21.165 76.056 21.168 76.083 cv
21.192 76.152 li
21.246 76.213 li
21.29 76.264 21.307 76.334 21.29 76.398 cv
21.18 76.816 li
21.152 76.92 21.047 76.985 20.942 76.962 cv
20.732 76.953 li
20.622 76.982 20.524 77.045 20.458 77.136 cv
20.385 77.289 li
20.368 77.395 li
20.354 77.484 20.284 77.549 20.202 77.563 cv
cp
f
92.729 87.212 mo
92.653 87.208 92.581 87.167 92.539 87.097 cv
91.979 86.158 li
91.912 86.046 91.948 85.901 92.061 85.834 cv
92.172 85.768 92.317 85.805 92.384 85.916 cv
92.944 86.856 li
93.011 86.967 92.974 87.113 92.863 87.179 cv
92.82 87.204 92.773 87.214 92.729 87.212 cv
cp
92.295 87.675 mo
92.251 87.674 92.205 87.66 92.165 87.631 cv
91.196 86.936 li
91.09 86.86 91.067 86.713 91.142 86.607 cv
91.218 86.502 91.365 86.477 91.471 86.553 cv
92.44 87.248 li
92.546 87.324 92.57 87.471 92.494 87.577 cv
92.447 87.643 92.371 87.678 92.295 87.675 cv
cp
92.037 88.186 mo
91.997 88.182 li
90.924 87.952 li
90.797 87.924 90.716 87.798 90.743 87.671 cv
90.77 87.544 90.896 87.463 91.023 87.49 cv
92.093 87.719 li
92.219 87.747 92.301 87.872 92.274 87.999 cv
92.25 88.111 92.151 88.187 92.041 88.186 cv
92.037 88.186 li
cp
93.2 88.625 mo
93.658 87.986 li
93.591 87.938 li
93.133 88.578 li
93.2 88.625 li
cp
93.77 89.034 mo
94.228 88.395 li
94.042 88.261 li
93.583 88.901 li
93.77 89.034 li
cp
94.254 89.382 mo
94.713 88.743 li
94.612 88.67 li
94.153 89.309 li
94.254 89.382 li
cp
91.775 89.534 mo
91.691 89.536 91.609 89.494 91.564 89.416 cv
91.499 89.304 91.536 89.16 91.649 89.094 cv
91.882 88.958 92.127 88.893 92.378 88.883 cv
92.508 88.878 92.618 88.979 92.623 89.109 cv
92.628 89.24 92.527 89.349 92.397 89.354 cv
92.218 89.361 92.048 89.407 91.886 89.501 cv
91.851 89.522 91.813 89.532 91.775 89.534 cv
cp
94.304 91.409 mo
94.323 91.345 li
94.374 90.977 li
94.386 90.732 94.354 90.493 94.288 90.279 cv
94.167 89.98 li
94.077 89.838 li
94.03 89.81 li
94.021 89.804 li
92.804 88.934 li
92.754 88.889 li
92.564 88.851 li
91.993 88.852 li
91.465 89.017 li
91.198 89.17 li
91.21 89.195 li
91.441 89.536 li
91.992 90.234 93.035 90.984 93.886 91.292 cv
94.292 91.407 li
94.304 91.409 li
cp
88.305 93.918 mo
88.259 93.917 88.214 93.903 88.174 93.874 cv
88.069 93.798 88.044 93.651 88.119 93.545 cv
89.712 91.324 li
89.789 91.219 89.936 91.195 90.042 91.27 cv
90.147 91.346 90.172 91.493 90.096 91.599 cv
88.503 93.819 li
88.456 93.886 88.38 93.92 88.305 93.918 cv
cp
89.633 95.405 mo
91.82 92.355 li
91.702 92.29 li
90.985 91.882 90.333 91.407 89.923 90.882 cv
87.77 93.878 li
87.851 94.039 li
88.085 94.434 88.489 94.827 88.96 95.108 cv
89.45 95.347 li
89.633 95.405 li
cp
89.829 97.388 mo
89.965 97.39 90.066 97.365 90.134 97.319 cv
90.146 97.313 li
94.072 91.838 li
93.961 91.812 li
92.9 91.506 91.54 90.531 90.926 89.635 cv
90.874 89.55 li
90.214 90.471 li
90.324 90.626 li
90.685 91.006 li
91.099 91.382 91.657 91.742 92.278 92.067 cv
92.404 92.133 92.443 92.296 92.359 92.413 cv
89.918 95.818 li
89.875 95.878 89.809 95.912 89.74 95.916 cv
89.67 95.916 li
88.771 95.691 87.903 95.028 87.464 94.311 cv
86.963 95.004 li
86.965 95.032 li
86.961 95.062 li
86.836 95.426 87.314 96.107 88.161 96.696 cv
88.783 97.128 89.42 97.381 89.829 97.388 cv
cp
89.311 97.775 mo
88.879 97.631 li
88.537 97.489 88.193 97.293 87.892 97.083 cv
87.44 96.77 86.985 96.357 86.715 95.925 cv
86.701 95.894 li
86.709 95.922 li
86.886 96.28 87.296 96.713 87.856 97.102 cv
88.329 97.432 88.812 97.66 89.198 97.757 cv
89.311 97.775 li
cp
89.575 98.281 mo
88.976 98.284 88.198 97.915 87.587 97.49 cv
86.789 96.935 85.932 96.043 86.185 95.297 cv
86.189 95.288 li
86.21 95.246 li
86.216 95.236 li
90.713 88.966 li
90.723 88.954 li
90.769 88.911 li
90.806 88.893 li
90.843 88.84 li
90.865 88.818 li
91.386 88.466 91.97 88.288 92.63 88.383 cv
92.69 88.394 li
92.71 88.362 li
92.869 88.136 li
92.779 88.072 li
92.674 87.996 92.649 87.848 92.725 87.742 cv
92.8 87.636 92.948 87.612 93.054 87.689 cv
93.145 87.753 li
93.242 87.617 li
93.376 87.431 93.635 87.389 93.82 87.522 cv
95.034 88.392 li
95.22 88.525 95.262 88.784 95.129 88.971 cv
94.596 89.709 li
94.573 89.739 li
94.583 89.756 li
94.83 90.23 94.925 90.852 94.781 91.456 cv
94.718 91.671 li
94.719 91.688 li
94.715 91.729 94.702 91.77 94.675 91.807 cv
90.178 98.077 li
90.169 98.088 li
90.128 98.128 li
90.117 98.136 li
89.964 98.238 89.777 98.281 89.575 98.281 cv
cp
f
19.239 51.415 mo
19.415 51.187 li
19.441 51.152 19.478 51.127 19.52 51.115 cv
19.905 50.999 li
19.906 50.998 li
19.881 50.966 li
19.843 50.894 19.85 50.805 19.905 50.738 cv
19.96 50.673 20.047 50.649 20.125 50.673 cv
20.147 50.685 li
20.238 50.568 li
20.224 50.551 li
20.187 50.479 20.194 50.389 20.248 50.323 cv
20.303 50.257 20.39 50.234 20.468 50.257 cv
20.475 50.26 li
20.557 50.154 li
20.555 50.151 li
20.518 50.08 20.524 49.99 20.579 49.923 cv
20.615 49.879 20.666 49.854 20.719 49.849 cv
20.771 49.854 li
20.763 49.826 li
20.685 49.622 20.561 49.519 20.397 49.473 cv
20.332 49.464 li
20.35 49.487 li
20.388 49.558 20.38 49.648 20.326 49.714 cv
20.289 49.758 20.238 49.783 20.186 49.788 cv
20.16 49.791 20.132 49.788 20.107 49.78 cv
20.038 49.743 li
19.97 49.825 li
20.02 49.885 li
20.057 49.957 20.05 50.047 19.996 50.113 cv
19.959 50.158 19.908 50.182 19.856 50.188 cv
19.829 50.19 19.802 50.188 19.776 50.18 cv
19.707 50.143 li
19.626 50.24 li
19.676 50.302 li
19.713 50.373 19.706 50.463 19.652 50.529 cv
19.616 50.573 19.565 50.598 19.512 50.603 cv
19.485 50.605 19.458 50.603 19.433 50.595 cv
19.363 50.558 li
19.326 50.602 li
19.372 50.97 li
19.379 51.028 19.362 51.086 19.324 51.13 cv
19.147 51.337 li
19.239 51.415 li
cp
18.683 52.139 mo
18.987 51.743 li
18.878 51.653 li
18.554 52.033 li
18.683 52.139 li
cp
18.143 52.841 mo
18.43 52.468 li
18.285 52.348 li
17.98 52.707 li
18.143 52.841 li
cp
17.585 53.567 mo
17.89 53.17 li
17.711 53.022 li
17.386 53.403 li
17.585 53.567 li
cp
17.027 54.294 mo
17.333 53.896 li
17.118 53.718 li
16.792 54.1 li
17.027 54.294 li
cp
15.092 54.506 mo
15.051 54.512 15.008 54.503 14.97 54.479 cv
14.883 54.424 14.857 54.309 14.912 54.222 cv
14.953 54.155 15.003 54.094 15.059 54.048 cv
15.117 54 15.184 53.965 15.262 53.951 cv
15.339 53.938 15.415 53.949 15.484 53.976 cv
15.552 54.003 15.613 54.045 15.668 54.094 cv
15.745 54.163 15.751 54.281 15.682 54.357 cv
15.614 54.434 15.496 54.44 15.419 54.372 cv
15.387 54.343 15.362 54.329 15.347 54.322 cv
15.332 54.317 15.327 54.318 15.325 54.318 cv
15.319 54.319 15.282 54.332 15.226 54.42 cv
15.196 54.47 15.146 54.499 15.092 54.506 cv
cp
16.393 55.119 mo
16.774 54.622 li
16.523 54.415 li
16.119 54.889 li
16.255 54.979 li
16.393 55.119 li
cp
15.61 56.535 mo
15.788 56.518 15.96 56.434 16.084 56.284 cv
16.33 55.986 16.289 55.544 15.991 55.298 cv
15.693 55.052 15.251 55.093 15.005 55.391 cv
14.758 55.689 14.8 56.131 15.097 56.377 cv
15.246 56.5 15.431 56.551 15.61 56.535 cv
cp
15.131 57.761 mo
15.079 57.766 15.024 57.751 14.98 57.714 cv
13.875 56.8 li
13.786 56.727 13.774 56.597 13.847 56.508 cv
13.92 56.42 14.051 56.408 14.138 56.481 cv
15.243 57.395 li
15.332 57.468 15.344 57.599 15.271 57.687 cv
15.235 57.73 15.184 57.756 15.131 57.761 cv
cp
15.04 59.589 mo
15.371 59.554 15.657 59.348 15.886 58.898 cv
15.989 58.67 li
16.109 58.104 li
16.264 57.515 16.524 56.958 17.072 56.595 cv
17.481 56.302 17.599 56.082 17.601 55.976 cv
17.602 55.927 17.564 55.804 17.206 55.736 cv
17.197 55.734 17.189 55.732 17.18 55.729 cv
16.983 55.665 16.848 55.555 16.766 55.423 cv
16.734 55.356 li
16.612 55.513 li
16.61 55.516 li
16.613 55.523 li
16.714 55.866 16.648 56.252 16.403 56.548 cv
16.206 56.786 15.933 56.92 15.649 56.947 cv
15.364 56.974 15.07 56.892 14.834 56.696 cv
14.359 56.304 14.294 55.6 14.686 55.127 cv
14.931 54.831 15.298 54.694 15.653 54.729 cv
15.704 54.739 li
16.217 54.136 li
16.179 54.107 li
15.778 53.815 15.452 53.73 15.212 53.78 cv
14.951 53.834 14.706 54.067 14.551 54.596 cv
14.374 55.202 13.655 55.513 13.186 55.669 cv
11.926 56.089 11.591 57.401 12.937 58.526 cv
13.753 59.237 14.405 59.577 14.897 59.594 cv
14.945 59.596 14.994 59.594 15.04 59.589 cv
cp
15.009 60.007 mo
14.967 60.009 14.925 60.009 14.883 60.008 cv
14.238 59.986 13.492 59.559 12.668 58.841 cv
11.103 57.533 11.454 55.81 13.055 55.276 cv
13.553 55.11 14.045 54.853 14.153 54.48 cv
14.328 53.882 14.652 53.473 15.127 53.374 cv
15.474 53.303 15.85 53.407 16.234 53.645 cv
16.482 53.826 li
18.95 50.93 li
18.905 50.564 li
18.898 50.508 18.914 50.451 18.951 50.407 cv
19.044 50.294 li
18.873 50.153 li
18.785 50.08 18.772 49.95 18.846 49.861 cv
18.918 49.773 19.049 49.761 19.137 49.834 cv
19.308 49.976 li
19.388 49.879 li
19.216 49.738 li
19.128 49.665 19.116 49.534 19.189 49.446 cv
19.262 49.358 19.392 49.346 19.48 49.419 cv
19.652 49.561 li
19.718 49.48 li
19.548 49.338 li
19.459 49.265 19.447 49.134 19.52 49.046 cv
19.593 48.958 19.724 48.946 19.812 49.019 cv
19.982 49.161 li
20.029 49.104 li
20.07 49.054 20.132 49.026 20.196 49.029 cv
20.667 49.045 21.062 49.266 21.206 49.863 cv
21.221 49.924 21.207 49.988 21.169 50.038 cv
21.12 50.102 li
21.358 50.299 li
21.446 50.372 21.459 50.502 21.386 50.59 cv
21.349 50.635 21.298 50.66 21.246 50.665 cv
21.193 50.67 21.138 50.655 21.094 50.618 cv
20.867 50.43 li
20.803 50.514 li
21.028 50.699 li
21.115 50.772 21.128 50.902 21.055 50.99 cv
21.018 51.035 20.967 51.06 20.915 51.064 cv
20.862 51.07 20.807 51.054 20.763 51.018 cv
20.549 50.841 li
20.474 50.94 li
20.684 51.114 li
20.772 51.187 20.784 51.318 20.711 51.406 cv
20.675 51.45 20.624 51.475 20.571 51.48 cv
20.518 51.485 20.463 51.469 20.42 51.433 cv
20.22 51.269 li
20.192 51.305 li
20.166 51.339 20.129 51.365 20.088 51.377 cv
19.703 51.492 li
17.114 54.86 li
17.112 54.869 li
17.027 55.06 17.073 55.259 17.309 55.336 cv
17.563 55.409 li
17.824 55.514 18.019 55.696 18.015 55.984 cv
18.009 56.31 17.726 56.637 17.306 56.936 cv
16.729 57.318 16.531 57.979 16.391 58.77 cv
16.388 58.784 16.384 58.797 16.379 58.811 cv
16.106 59.5 15.691 59.918 15.131 59.995 cv
15.091 60.001 15.05 60.005 15.009 60.007 cv
cp
f
41.134 88.824 mo
39.602 88.437 li
39.614 88.256 li
39.685 88.25 li
40.191 88.208 40.676 88.272 41.163 88.617 cv
41.177 88.627 li
41.134 88.824 li
cp
35.328 89.395 mo
35.232 89.395 35.152 89.315 35.152 89.218 cv
35.152 89.122 35.232 89.042 35.328 89.042 cv
35.425 89.042 35.504 89.122 35.504 89.218 cv
35.504 89.315 35.425 89.395 35.328 89.395 cv
cp
34.787 90.695 mo
34.69 90.695 34.611 90.616 34.611 90.519 cv
34.611 90.423 34.69 90.343 34.787 90.343 cv
34.884 90.343 34.963 90.423 34.963 90.519 cv
34.963 90.616 34.884 90.695 34.787 90.695 cv
cp
34.269 91.984 mo
34.173 91.984 34.093 91.905 34.093 91.808 cv
34.093 91.711 34.173 91.632 34.269 91.632 cv
34.366 91.632 34.445 91.711 34.445 91.808 cv
34.445 91.904 34.366 91.984 34.269 91.984 cv
cp
29.861 92.073 mo
29.934 92.076 30.009 92.044 30.057 91.981 cv
30.98 90.752 32.066 90.461 33.37 91.04 cv
33.486 91.092 33.622 91.039 33.674 90.923 cv
33.725 90.807 33.673 90.671 33.557 90.619 cv
32.045 89.948 30.734 90.313 29.688 91.704 cv
29.612 91.806 29.633 91.95 29.734 92.027 cv
29.773 92.056 29.816 92.071 29.861 92.073 cv
cp
33.739 93.331 mo
33.643 93.331 33.563 93.252 33.563 93.155 cv
33.563 93.058 33.643 92.979 33.739 92.979 cv
33.837 92.979 33.916 93.058 33.916 93.155 cv
33.916 93.252 33.836 93.331 33.739 93.331 cv
cp
33.267 94.632 mo
33.171 94.632 33.091 94.553 33.091 94.455 cv
33.091 94.359 33.171 94.279 33.267 94.279 cv
33.364 94.279 33.443 94.359 33.443 94.455 cv
33.443 94.552 33.364 94.632 33.267 94.632 cv
cp
31.859 97.853 mo
31.199 97.84 30.533 97.303 30.675 96.337 cv
30.753 96.002 li
30.978 95.493 li
31.466 94.35 31.814 93.186 30.781 92.25 cv
30.694 92.179 li
30.813 92.046 li
31.351 91.539 32.079 91.355 32.719 91.56 cv
32.93 91.651 li
32.933 91.768 li
32.925 92.177 32.819 92.675 32.695 93.1 cv
32.544 93.56 li
31.387 96.285 li
31.383 96.295 31.38 96.305 31.378 96.315 cv
31.184 97.085 32.105 97.434 32.435 96.827 cv
32.487 96.706 li
33.192 94.998 li
33.267 95.013 li
33.575 95.013 33.825 94.763 33.825 94.455 cv
33.825 94.302 33.763 94.162 33.661 94.061 cv
33.597 94.018 li
33.724 93.71 li
33.739 93.713 li
34.047 93.713 34.297 93.462 34.297 93.155 cv
34.297 93.001 34.234 92.862 34.134 92.761 cv
34.12 92.752 li
34.28 92.364 li
34.486 92.322 li
34.687 92.237 34.827 92.039 34.827 91.808 cv
34.827 91.731 34.812 91.658 34.783 91.591 cv
34.669 91.422 li
34.813 91.072 li
35.004 91.033 li
35.204 90.948 35.345 90.75 35.345 90.519 cv
35.345 90.442 35.329 90.369 35.301 90.302 cv
35.196 90.146 li
35.35 89.772 li
35.545 89.732 li
35.745 89.647 35.886 89.449 35.886 89.218 cv
35.886 89.141 35.87 89.068 35.842 89.002 cv
35.734 88.842 li
35.939 88.345 li
35.941 88.341 35.943 88.335 35.945 88.33 cv
36.129 87.754 36.799 87.144 37.5 87.36 cv
37.8 87.505 li
38.096 87.733 li
38.397 87.946 38.762 88.154 39.121 88.271 cv
39.203 88.295 li
39.202 88.32 li
39.055 88.29 li
38.632 88.192 38.216 88.015 37.764 87.708 cv
37.756 87.703 37.748 87.698 37.74 87.694 cv
37.275 87.465 36.655 87.611 36.352 88.166 cv
36.249 88.415 li
32.944 97.112 li
32.76 97.626 32.311 97.862 31.859 97.853 cv
cp
31.899 98.258 mo
32.491 98.265 33.075 97.952 33.327 97.254 cv
36.629 88.559 li
36.63 88.556 36.633 88.55 36.634 88.546 cv
36.772 88.086 37.142 87.942 37.438 88.016 cv
37.557 88.058 li
37.951 88.3 li
38.36 88.522 38.757 88.655 39.165 88.728 cv
39.179 88.73 39.192 88.731 39.206 88.731 cv
39.243 88.726 li
39.338 88.79 li
41.24 89.271 li
41.254 89.275 41.268 89.277 41.282 89.278 cv
41.379 89.282 41.468 89.215 41.489 89.116 cv
41.602 88.584 li
41.618 88.508 41.59 88.43 41.529 88.382 cv
40.81 87.81 40.087 87.776 39.394 87.872 cv
39.327 87.907 li
39.287 87.896 li
38.851 87.763 38.371 87.454 38.045 87.18 cv
38.04 87.176 38.034 87.171 38.027 87.167 cv
37.026 86.497 36.079 87.189 35.689 87.903 cv
35.563 88.19 li
35.366 88.669 li
35.328 88.661 li
35.021 88.661 34.77 88.911 34.77 89.218 cv
34.77 89.372 34.833 89.511 34.934 89.613 cv
34.967 89.635 li
34.828 89.97 li
34.787 89.961 li
34.48 89.961 34.229 90.212 34.229 90.519 cv
34.229 90.673 34.292 90.812 34.393 90.913 cv
34.429 90.938 li
34.297 91.256 li
34.269 91.25 li
33.962 91.25 33.712 91.5 33.712 91.808 cv
33.712 91.961 33.774 92.101 33.875 92.202 cv
33.9 92.219 li
33.743 92.598 li
33.739 92.597 li
33.432 92.597 33.182 92.847 33.182 93.155 cv
33.182 93.308 33.245 93.448 33.345 93.549 cv
33.349 93.552 li
33.201 93.911 li
33.05 93.942 li
32.851 94.027 32.71 94.225 32.71 94.455 cv
32.71 94.532 32.725 94.606 32.754 94.672 cv
32.836 94.794 li
32.11 96.551 li
32.109 96.554 32.106 96.561 32.105 96.565 cv
32.026 96.806 31.763 96.782 31.758 96.535 cv
31.772 96.425 li
32.921 93.714 li
32.922 93.713 32.924 93.707 32.925 93.706 cv
33.131 93.151 33.394 92.18 33.332 91.498 cv
33.326 91.431 33.287 91.371 33.228 91.339 cv
32.221 90.777 30.963 91.126 30.236 92.08 cv
30.167 92.171 30.187 92.302 30.28 92.369 cv
31.515 93.257 31.033 94.372 30.374 95.851 cv
30.371 95.859 30.368 95.866 30.365 95.873 cv
29.901 97.349 30.912 98.247 31.899 98.258 cv
cp
f
76.653 70.577 mo
76.653 70.153 li
76.229 70.153 li
76.229 70.577 li
76.653 70.577 li
cp
71.858 72.514 mo
71.831 72.515 71.804 72.508 71.779 72.495 cv
71.699 72.453 71.669 72.354 71.711 72.274 cv
71.853 72.003 72.015 71.767 72.25 71.622 cv
72.327 71.574 72.428 71.598 72.475 71.675 cv
72.523 71.751 72.499 71.853 72.422 71.9 cv
72.265 71.998 72.136 72.169 72 72.427 cv
71.971 72.482 71.915 72.513 71.858 72.514 cv
cp
71.216 72.533 mo
71.195 72.531 71.174 72.525 71.154 72.515 cv
71.074 72.472 71.043 72.374 71.086 72.294 cv
71.375 71.745 71.69 71.293 72.13 71.02 cv
72.207 70.972 72.308 70.996 72.356 71.073 cv
72.403 71.149 72.379 71.251 72.303 71.298 cv
71.939 71.524 71.657 71.91 71.375 72.446 cv
71.343 72.506 71.279 72.538 71.216 72.533 cv
cp
72.353 72.675 mo
72.326 72.675 72.3 72.669 72.275 72.656 cv
72.195 72.614 72.165 72.515 72.206 72.435 cv
72.287 72.282 72.384 72.134 72.533 72.042 cv
72.61 71.995 72.711 72.019 72.758 72.096 cv
72.806 72.173 72.782 72.273 72.705 72.321 cv
72.635 72.364 72.571 72.445 72.496 72.587 cv
72.467 72.643 72.411 72.674 72.353 72.675 cv
cp
73.539 73.3 mo
73.592 73.3 73.636 73.257 73.636 73.204 cv
73.636 73.151 73.592 73.107 73.539 73.107 cv
73.486 73.107 73.443 73.151 73.443 73.204 cv
73.443 73.257 73.486 73.3 73.539 73.3 cv
cp
73.539 73.628 mo
73.305 73.628 73.116 73.438 73.116 73.204 cv
73.116 72.97 73.306 72.78 73.539 72.78 cv
73.773 72.78 73.963 72.97 73.963 73.204 cv
73.963 73.437 73.773 73.628 73.539 73.628 cv
cp
73.539 74.016 mo
73.987 74.016 74.351 73.652 74.351 73.203 cv
74.351 72.756 73.987 72.391 73.539 72.391 cv
73.091 72.391 72.727 72.756 72.727 73.203 cv
72.727 73.652 73.091 74.016 73.539 74.016 cv
cp
73.539 74.343 mo
72.91 74.343 72.4 73.832 72.4 73.203 cv
72.4 72.575 72.91 72.064 73.539 72.064 cv
74.168 72.064 74.678 72.575 74.678 73.203 cv
74.678 73.832 74.168 74.343 73.539 74.343 cv
cp
74.499 74.519 mo
74.447 74.517 74.396 74.489 74.367 74.441 cv
74.319 74.364 74.343 74.264 74.42 74.216 cv
74.491 74.172 74.554 74.091 74.629 73.949 cv
74.672 73.869 74.77 73.839 74.85 73.881 cv
74.931 73.923 74.961 74.022 74.919 74.102 cv
74.838 74.255 74.74 74.402 74.592 74.494 cv
74.563 74.512 74.531 74.52 74.499 74.519 cv
cp
74.783 74.939 mo
74.73 74.937 74.679 74.91 74.65 74.862 cv
74.602 74.785 74.626 74.684 74.703 74.637 cv
74.861 74.539 74.989 74.368 75.125 74.11 cv
75.167 74.03 75.266 73.999 75.346 74.042 cv
75.425 74.084 75.456 74.183 75.414 74.262 cv
75.272 74.533 75.11 74.769 74.875 74.915 cv
74.846 74.933 74.814 74.941 74.783 74.939 cv
cp
74.902 75.541 mo
74.85 75.539 74.799 75.512 74.77 75.464 cv
74.722 75.387 74.745 75.286 74.822 75.238 cv
75.186 75.013 75.468 74.626 75.75 74.091 cv
75.792 74.011 75.891 73.98 75.971 74.022 cv
76.051 74.064 76.081 74.164 76.04 74.243 cv
75.75 74.792 75.435 75.243 74.995 75.516 cv
74.966 75.534 74.934 75.543 74.902 75.541 cv
cp
73.539 76.152 mo
75.113 76.152 76.392 74.874 76.392 73.3 cv
76.392 73.005 76.346 72.72 76.263 72.452 cv
76.187 72.247 li
75.317 73.149 li
75.273 73.195 75.214 73.218 75.155 73.219 cv
75.096 73.221 75.037 73.199 74.991 73.155 cv
74.9 73.067 74.897 72.92 74.986 72.83 cv
75.968 71.812 li
75.904 71.706 li
75.391 70.947 74.523 70.447 73.539 70.447 cv
71.965 70.447 70.687 71.726 70.687 73.3 cv
70.687 74.874 71.965 76.152 73.539 76.152 cv
cp
73.539 76.479 mo
71.784 76.479 70.36 75.055 70.36 73.3 cv
70.36 71.545 71.784 70.12 73.539 70.12 cv
74.636 70.12 75.604 70.677 76.175 71.523 cv
76.203 71.569 li
76.21 71.561 li
76.21 71.037 li
76.123 71.037 li
75.927 71.037 75.768 70.878 75.768 70.682 cv
75.768 70.048 li
75.768 69.852 75.927 69.692 76.123 69.692 cv
76.758 69.692 li
76.954 69.692 77.113 69.852 77.113 70.048 cv
77.113 70.682 li
77.113 70.878 76.954 71.037 76.758 71.037 cv
76.671 71.037 li
76.671 71.654 li
76.671 71.714 76.647 71.771 76.606 71.814 cv
76.434 71.992 li
76.469 72.063 li
76.629 72.443 76.719 72.861 76.719 73.3 cv
76.719 75.055 75.294 76.479 73.539 76.479 cv
cp
76.491 76.569 mo
76.544 76.569 76.588 76.526 76.588 76.472 cv
76.588 76.42 76.544 76.376 76.491 76.376 cv
76.437 76.376 76.395 76.42 76.395 76.472 cv
76.395 76.526 76.438 76.569 76.491 76.569 cv
cp
70.501 76.569 mo
70.554 76.569 70.597 76.526 70.597 76.472 cv
70.597 76.42 70.554 76.376 70.501 76.376 cv
70.447 76.376 70.404 76.42 70.404 76.472 cv
70.404 76.526 70.447 76.569 70.501 76.569 cv
cp
76.491 76.896 mo
76.257 76.896 76.067 76.707 76.067 76.472 cv
76.067 76.239 76.257 76.049 76.491 76.049 cv
76.725 76.049 76.915 76.239 76.915 76.472 cv
76.915 76.706 76.725 76.896 76.491 76.896 cv
cp
70.501 76.896 mo
70.267 76.896 70.077 76.707 70.077 76.472 cv
70.077 76.239 70.267 76.049 70.501 76.049 cv
70.734 76.049 70.924 76.239 70.924 76.472 cv
70.924 76.706 70.734 76.896 70.501 76.896 cv
cp
76.554 77.433 mo
77.089 77.433 77.523 76.998 77.523 76.464 cv
77.523 70.383 li
77.523 69.849 77.089 69.414 76.554 69.414 cv
70.474 69.414 li
69.939 69.414 69.505 69.849 69.505 70.383 cv
69.505 76.464 li
69.505 76.998 69.939 77.433 70.474 77.433 cv
76.554 77.433 li
cp
70.474 77.893 mo
69.685 77.893 69.045 77.253 69.045 76.464 cv
69.045 70.383 li
69.045 69.594 69.685 68.954 70.474 68.954 cv
76.554 68.954 li
77.343 68.954 77.983 69.594 77.983 70.383 cv
77.983 76.464 li
77.983 77.253 77.343 77.893 76.554 77.893 cv
70.474 77.893 li
cp
f
12.849 31.511 mo
15.054 31.011 li
15.054 30.414 li
12.848 30.915 li
12.849 31.511 li
cp
19.156 32.025 mo
19.041 32.044 18.927 31.975 18.896 31.859 cv
18.859 31.729 18.847 31.589 18.896 31.46 cv
18.924 31.388 18.968 31.326 19.026 31.278 cv
19.124 31.196 19.244 31.162 19.361 31.15 cv
19.487 31.137 19.6 31.229 19.613 31.355 cv
19.626 31.482 19.534 31.595 19.408 31.608 cv
19.359 31.613 19.336 31.623 19.325 31.628 cv
19.324 31.634 19.324 31.64 19.324 31.65 cv
19.324 31.669 19.328 31.697 19.339 31.736 cv
19.373 31.858 19.302 31.986 19.179 32.02 cv
19.171 32.022 19.163 32.023 19.156 32.025 cv
cp
14.411 33.632 mo
14.844 33.632 15.086 33.39 15.086 33.218 cv
15.086 33.045 14.841 32.805 14.411 32.805 cv
13.978 32.805 13.736 33.047 13.736 33.218 cv
13.736 33.392 13.981 33.632 14.411 33.632 cv
cp
21.209 33.764 mo
21.267 33.77 21.323 33.769 21.373 33.762 cv
21.388 33.763 li
21.469 33.636 li
21.776 33.064 21.733 32.353 21.249 31.727 cv
21.035 31.486 li
20.735 31.255 li
19.971 30.758 19.18 30.923 18.634 31.395 cv
18.587 31.443 li
18.591 31.471 li
18.57 31.822 18.979 32.421 19.626 32.956 cv
20.184 33.419 20.795 33.73 21.209 33.764 cv
cp
11.701 34.16 mo
12.133 34.16 12.376 33.918 12.376 33.746 cv
12.376 33.573 12.131 33.333 11.701 33.333 cv
11.267 33.333 11.026 33.575 11.026 33.746 cv
11.026 33.92 11.27 34.16 11.701 34.16 cv
cp
11.701 34.654 mo
11.112 34.654 10.532 34.301 10.532 33.746 cv
10.532 33.195 11.109 32.839 11.701 32.839 cv
11.928 32.839 12.146 32.89 12.341 32.981 cv
12.341 30.712 li
12.341 30.593 12.422 30.49 12.538 30.464 cv
15.252 29.849 li
15.411 29.812 15.562 29.933 15.562 30.095 cv
15.562 32.935 li
15.56 32.948 li
15.549 33.005 li
15.553 33.017 li
15.571 33.084 15.58 33.15 15.58 33.218 cv
15.58 33.77 15.003 34.125 14.411 34.125 cv
13.822 34.125 13.242 33.772 13.242 33.218 cv
13.242 32.667 13.819 32.311 14.411 32.311 cv
14.638 32.311 14.856 32.362 15.044 32.453 cv
15.054 32.46 li
15.054 31.531 li
12.85 32.031 li
12.851 33.55 li
12.849 33.574 li
12.863 33.639 li
12.868 33.679 12.87 33.712 12.87 33.746 cv
12.87 34.298 12.293 34.654 11.701 34.654 cv
cp
19.496 34.742 mo
19.502 34.738 li
19.528 34.724 19.558 34.716 19.589 34.713 cv
20.161 34.669 20.633 34.483 20.981 34.21 cv
20.997 34.195 li
20.936 34.186 li
20.41 34.067 19.815 33.711 19.333 33.311 cv
18.856 32.917 18.397 32.405 18.214 31.917 cv
18.212 31.91 li
18.138 32.038 li
17.936 32.445 17.869 32.921 18.004 33.378 cv
18.009 33.395 18.012 33.413 18.013 33.431 cv
18.011 33.465 li
18.172 33.706 li
18.454 34.083 18.796 34.343 19.152 34.555 cv
19.496 34.742 li
cp
18.953 35.304 mo
19.172 35.062 li
18.929 34.93 li
18.543 34.7 18.151 34.405 17.824 33.968 cv
17.754 33.865 li
17.567 34.115 li
17.694 34.303 li
17.976 34.68 18.318 34.941 18.674 35.152 cv
18.953 35.304 li
cp
16.359 37.115 mo
16.3 37.121 16.24 37.105 16.191 37.064 cv
16.092 36.985 16.077 36.839 16.157 36.741 cv
17.195 35.465 li
17.275 35.367 17.421 35.352 17.519 35.431 cv
17.618 35.512 17.633 35.657 17.553 35.755 cv
16.514 37.031 li
16.474 37.081 16.418 37.109 16.359 37.115 cv
cp
14.711 39.763 mo
14.942 39.741 li
18.653 35.637 li
18.451 35.527 li
18.065 35.297 17.672 35.002 17.346 34.566 cv
17.291 34.484 li
13.998 38.882 li
14.024 39.127 li
14.064 39.361 14.143 39.518 14.246 39.613 cv
14.342 39.704 14.488 39.766 14.711 39.763 cv
cp
14.211 40.39 mo
14.37 40.373 li
14.521 40.206 li
14.383 40.188 li
14.21 40.147 14.058 40.069 13.932 39.95 cv
13.799 39.826 13.705 39.669 13.642 39.488 cv
13.617 39.39 li
13.483 39.569 li
13.499 39.737 li
13.57 40.188 13.784 40.401 14.211 40.39 cv
cp
14.103 40.849 mo
13.394 40.816 13.052 40.305 13.016 39.513 cv
13.014 39.46 13.03 39.407 13.061 39.364 cv
17.537 33.387 li
17.487 33.138 li
17.277 31.283 19.479 29.462 21.347 31.147 cv
21.349 31.149 21.354 31.154 21.355 31.155 cv
22.862 32.651 22.012 34.718 20.035 35.115 cv
19.704 35.161 li
14.653 40.746 li
14.618 40.784 14.572 40.81 14.521 40.819 cv
14.49 40.824 14.459 40.829 14.429 40.833 cv
14.312 40.848 14.204 40.854 14.103 40.849 cv
cp
f
16.832 13.736 mo
17.15 13.736 17.409 13.476 17.409 13.156 cv
17.409 12.837 17.15 12.578 16.832 12.578 cv
16.512 12.578 16.253 12.837 16.253 13.156 cv
16.253 13.476 16.512 13.736 16.832 13.736 cv
cp
16.832 14.196 mo
16.257 14.196 15.793 13.73 15.793 13.156 cv
15.793 12.583 16.258 12.117 16.832 12.117 cv
17.405 12.117 17.87 12.583 17.87 13.156 cv
17.87 13.73 17.405 14.196 16.832 14.196 cv
cp
14.393 15.009 mo
14.711 15.009 14.971 14.749 14.971 14.43 cv
14.971 14.11 14.711 13.851 14.393 13.851 cv
14.074 13.851 13.815 14.11 13.815 14.43 cv
13.815 14.749 14.074 15.009 14.393 15.009 cv
cp
14.393 15.469 mo
13.819 15.469 13.354 15.003 13.354 14.43 cv
13.354 13.857 13.82 13.39 14.393 13.39 cv
14.967 13.39 15.432 13.857 15.432 14.43 cv
15.432 15.003 14.967 15.469 14.393 15.469 cv
cp
17.937 15.888 mo
18.416 15.44 li
19.435 14.444 20.248 13.424 20.869 12.256 cv
21.332 11.245 li
20.885 11.55 li
19.484 12.571 18.448 13.785 17.642 15.352 cv
17.538 15.562 li
17.937 15.888 li
cp
20.629 15.936 mo
20.829 15.936 20.991 15.774 20.991 15.573 cv
20.991 15.372 20.829 15.21 20.629 15.21 cv
20.429 15.21 20.267 15.373 20.267 15.573 cv
20.267 15.774 20.429 15.936 20.629 15.936 cv
cp
20.629 16.396 mo
20.174 16.396 19.807 16.027 19.807 15.573 cv
19.807 15.119 20.174 14.75 20.629 14.75 cv
21.084 14.75 21.451 15.119 21.451 15.573 cv
21.451 16.027 21.084 16.396 20.629 16.396 cv
cp
17.44 16.663 mo
17.476 16.618 li
17.659 16.316 li
17.696 16.24 li
17.241 15.868 li
17.179 15.912 li
16.907 16.152 li
16.881 16.183 li
17.44 16.663 li
cp
16.647 17.429 mo
16.726 17.376 li
17.005 17.15 li
17.166 16.988 li
16.615 16.517 li
16.465 16.764 li
16.306 17.138 li
16.647 17.429 li
cp
13.12 17.577 mo
13.438 17.577 13.698 17.317 13.698 16.997 cv
13.698 16.678 13.438 16.419 13.12 16.419 cv
12.801 16.419 12.542 16.678 12.542 16.997 cv
12.542 17.317 12.801 17.577 13.12 17.577 cv
cp
13.12 18.037 mo
12.546 18.037 12.081 17.571 12.081 16.997 cv
12.081 16.424 12.547 15.958 13.12 15.958 cv
13.693 15.958 14.159 16.424 14.159 16.997 cv
14.159 17.571 13.693 18.037 13.12 18.037 cv
cp
15.188 19.302 mo
15.844 19.208 li
15.926 19.178 li
16.022 19.132 li
16.368 18.951 16.595 18.596 16.477 17.909 cv
16.46 17.83 li
16.21 17.615 li
16.147 17.65 li
15.843 17.931 li
15.73 18.09 15.639 18.312 15.597 18.636 cv
15.583 18.738 15.501 18.813 15.401 18.821 cv
15.36 18.821 li
15.242 18.804 15.16 18.698 15.175 18.581 cv
15.224 18.203 15.334 17.912 15.496 17.684 cv
15.663 17.496 li
15.471 17.539 li
15.355 17.581 15.264 17.635 15.199 17.705 cv
15.069 17.843 14.983 18.109 15.169 18.697 cv
15.236 18.927 15.194 19.128 15.083 19.282 cv
15.064 19.302 li
15.188 19.302 li
cp
13.444 19.993 mo
13.691 19.993 13.892 19.792 13.892 19.543 cv
13.892 19.296 13.691 19.094 13.444 19.094 cv
13.197 19.094 12.995 19.296 12.995 19.543 cv
12.995 19.792 13.197 19.993 13.444 19.993 cv
cp
14.762 21.954 mo
14.804 21.955 14.844 21.955 14.885 21.953 cv
15.85 21.918 16.429 21.281 16.618 20.35 cv
16.682 19.994 li
16.864 19.193 17.23 18.802 17.854 18.546 cv
18.412 18.316 19.201 18.185 20.234 17.853 cv
20.683 17.701 li
21.15 17.447 li
22.591 16.468 22.221 14.507 20.995 13.162 cv
20.893 13.062 li
20.548 13.6 li
19.958 14.455 19.253 15.242 18.429 16.016 cv
18.152 16.271 li
17.935 16.692 li
17.688 17.097 17.365 17.438 16.973 17.722 cv
16.884 17.782 li
16.895 17.837 li
17.038 18.667 16.761 19.225 16.221 19.508 cv
15.949 19.652 15.625 19.718 15.284 19.729 cv
15.113 19.734 14.937 19.726 14.76 19.706 cv
14.344 19.632 li
14.334 19.726 li
14.249 20.141 13.883 20.453 13.444 20.453 cv
12.942 20.453 12.535 20.045 12.535 19.543 cv
12.535 19.042 12.942 18.634 13.444 18.634 cv
13.82 18.634 14.143 18.863 14.281 19.19 cv
14.282 19.193 li
14.289 19.191 li
14.45 19.2 14.599 19.155 14.687 19.086 cv
14.76 19.028 14.799 18.95 14.762 18.82 cv
14.561 18.184 14.599 17.719 14.89 17.412 cv
15.094 17.197 15.39 17.098 15.692 17.045 cv
15.901 17.018 li
15.954 16.865 li
16.144 16.383 16.422 16.001 16.768 15.699 cv
17.132 15.425 li
17.277 15.133 li
17.789 14.143 18.391 13.288 19.112 12.532 cv
19.557 12.1 li
19.244 11.97 li
19.125 11.927 19.003 11.89 18.88 11.859 cv
14.839 10.846 11.776 13.687 11.549 16.723 cv
11.356 19.393 12.034 21.12 13.791 21.775 cv
14.147 21.893 14.471 21.95 14.762 21.954 cv
cp
14.781 22.413 mo
14.434 22.41 14.052 22.345 13.638 22.21 cv
11.577 21.441 10.892 19.424 11.09 16.689 cv
11.337 13.381 14.662 10.327 18.992 11.412 cv
19.192 11.462 19.387 11.528 19.576 11.605 cv
19.923 11.776 li
20.289 11.468 li
20.713 11.136 21.171 10.823 21.667 10.526 cv
21.836 10.425 22.042 10.591 21.976 10.779 cv
21.794 11.301 21.584 11.793 21.347 12.261 cv
21.132 12.649 li
21.4 12.931 li
22.873 14.622 23.144 17.145 20.862 18.126 cv
20.848 18.131 li
19.491 18.617 18.645 18.718 18.029 18.971 cv
17.495 19.191 17.202 19.5 17.071 20.428 cv
17.069 20.442 li
16.837 21.583 16.087 22.356 14.929 22.409 cv
14.88 22.412 14.831 22.413 14.781 22.413 cv
cp
f
72.373 48.291 mo
72.246 48.291 72.143 48.188 72.143 48.061 cv
72.143 47.934 72.246 47.831 72.373 47.831 cv
72.967 47.831 li
73.094 47.831 73.197 47.934 73.197 48.061 cv
73.197 48.188 73.094 48.291 72.967 48.291 cv
72.373 48.291 li
cp
71.726 49.074 mo
71.599 49.074 71.496 48.971 71.496 48.844 cv
71.496 48.717 71.599 48.614 71.726 48.614 cv
73.614 48.614 li
73.741 48.614 73.845 48.717 73.845 48.844 cv
73.845 48.971 73.741 49.074 73.614 49.074 cv
71.726 49.074 li
cp
74.259 51.584 mo
74.304 51.583 74.354 51.577 74.409 51.567 cv
74.477 51.55 li
74.503 51.536 li
74.71 51.416 74.688 51.243 74.62 51.099 cv
74.518 50.884 74.312 50.757 74.174 50.775 cv
74.054 50.791 73.968 50.855 73.914 50.946 cv
73.856 51.04 73.834 51.163 73.854 51.277 cv
73.873 51.388 73.93 51.477 74.016 51.528 cv
74.07 51.56 74.148 51.586 74.259 51.584 cv
cp
74.267 52.044 mo
74.083 52.047 73.92 52.006 73.781 51.924 cv
73.561 51.793 73.439 51.576 73.4 51.356 cv
73.362 51.137 73.403 50.901 73.52 50.707 cv
73.64 50.509 73.842 50.355 74.113 50.319 cv
74.516 50.266 74.88 50.573 75.036 50.902 cv
75.117 51.073 75.156 51.279 75.101 51.481 cv
75.043 51.691 74.891 51.864 74.656 51.975 cv
74.644 51.981 74.632 51.986 74.619 51.989 cv
74.496 52.024 74.378 52.042 74.267 52.044 cv
cp
75.018 54.76 mo
74.844 54.76 74.713 54.674 74.62 54.575 cv
74.532 54.48 74.466 54.361 74.414 54.256 cv
74.342 54.108 74.279 53.951 74.221 53.851 cv
74.207 53.829 li
74.138 53.893 li
74.065 53.95 73.915 54.017 73.755 53.915 cv
73.56 53.773 73.459 53.461 73.404 53.27 cv
73.368 53.15 73.341 53.034 73.317 52.934 cv
73.304 52.884 li
73.287 52.912 73.269 52.939 73.25 52.97 cv
73.182 53.076 73.054 53.281 72.918 53.369 cv
72.77 53.465 72.576 53.456 72.448 53.286 cv
72.365 53.174 72.316 53.002 72.282 52.795 cv
72.257 52.648 72.195 52.356 72.118 52.077 cv
72.099 52.008 72.079 51.94 72.059 51.877 cv
72.002 51.708 li
71.918 51.818 li
71.361 52.609 70.851 53.66 70.638 54.516 cv
70.607 54.64 70.481 54.715 70.358 54.684 cv
70.235 54.653 70.16 54.528 70.191 54.405 cv
70.452 53.357 71.115 52.065 71.8 51.209 cv
71.849 51.147 71.939 51.082 72.063 51.1 cv
72.163 51.114 72.228 51.179 72.259 51.214 cv
72.39 51.365 72.494 51.708 72.562 51.955 cv
72.643 52.247 72.709 52.554 72.736 52.719 cv
72.744 52.77 72.753 52.813 72.761 52.848 cv
72.765 52.866 li
72.783 52.84 li
72.806 52.808 72.832 52.769 72.862 52.722 cv
72.918 52.633 73.049 52.417 73.165 52.328 cv
73.211 52.294 73.3 52.239 73.415 52.257 cv
73.538 52.276 73.609 52.364 73.645 52.428 cv
73.667 52.467 73.683 52.51 73.696 52.553 cv
73.737 52.69 73.785 52.932 73.846 53.143 cv
73.882 53.267 73.917 53.359 73.947 53.423 cv
73.953 53.436 li
74.007 53.389 li
74.119 53.311 74.282 53.283 74.436 53.399 cv
74.455 53.413 74.473 53.429 74.49 53.446 cv
74.637 53.593 74.709 53.81 74.828 54.053 cv
74.939 54.28 74.998 54.299 75.018 54.299 cv
75.145 54.299 75.249 54.403 75.249 54.53 cv
75.249 54.657 75.145 54.76 75.018 54.76 cv
cp
70.144 55.473 mo
70.07 55.467 70 55.427 69.961 55.357 cv
69.898 55.247 69.936 55.107 70.047 55.043 cv
70.867 54.574 71.808 54.551 72.696 54.632 cv
73.578 54.712 74.442 54.898 75.156 54.898 cv
75.283 54.898 75.387 55.001 75.387 55.128 cv
75.387 55.255 75.283 55.358 75.156 55.358 cv
74.4 55.358 73.519 55.169 72.654 55.09 cv
71.79 55.012 70.969 55.046 70.275 55.443 cv
70.234 55.467 70.188 55.477 70.144 55.473 cv
cp
75.645 55.885 mo
75.645 49.67 li
69.62 49.67 li
69.62 55.885 li
75.645 55.885 li
cp
73.939 56.608 mo
73.859 56.345 li
73.039 56.345 li
73.039 56.608 li
73.939 56.608 li
cp
72.578 56.608 mo
72.578 56.345 li
71.668 56.345 li
71.587 56.608 li
72.578 56.608 li
cp
70.373 60.065 mo
70.359 60.066 70.346 60.066 70.333 60.065 cv
70.318 60.063 70.303 60.06 70.288 60.055 cv
70.166 60.018 70.098 59.889 70.136 59.768 cv
70.965 57.068 li
70.302 57.068 li
70.175 57.068 70.072 56.965 70.072 56.838 cv
70.072 56.711 70.175 56.608 70.302 56.608 cv
71.106 56.608 li
71.186 56.345 li
69.389 56.345 li
69.262 56.345 69.159 56.242 69.159 56.115 cv
69.159 49.44 li
69.159 49.313 69.262 49.21 69.389 49.21 cv
75.875 49.21 li
76.002 49.21 76.105 49.313 76.105 49.44 cv
76.105 56.115 li
76.105 56.242 76.002 56.345 75.875 56.345 cv
74.34 56.345 li
74.42 56.608 li
75.131 56.608 li
75.257 56.608 75.361 56.711 75.361 56.838 cv
75.361 56.965 75.257 57.068 75.131 57.068 cv
74.562 57.068 li
75.391 59.768 li
75.429 59.889 75.36 60.018 75.239 60.055 cv
75.224 60.06 75.208 60.063 75.193 60.065 cv
75.086 60.075 74.984 60.009 74.951 59.903 cv
74.08 57.068 li
73.039 57.068 li
73.039 58.99 li
73.039 59.117 72.935 59.22 72.808 59.22 cv
72.681 59.22 72.578 59.117 72.578 58.99 cv
72.578 57.068 li
71.446 57.068 li
70.575 59.903 li
70.547 59.996 70.465 60.058 70.373 60.065 cv
cp
f
32.171 15.017 mo
32.156 15.017 32.14 15.015 32.125 15.011 cv
32.001 14.985 31.922 14.863 31.948 14.738 cv
32.023 14.388 32.237 13.95 32.497 13.694 cv
32.642 13.55 32.889 13.654 32.889 13.857 cv
32.889 13.886 32.888 13.914 32.888 13.941 cv
32.902 13.951 li
32.999 13.974 33.079 14.06 33.079 14.174 cv
33.079 14.186 33.079 14.199 33.078 14.213 cv
33.081 14.23 li
33.109 14.216 33.136 14.206 33.163 14.199 cv
33.227 14.182 33.33 14.169 33.431 14.23 cv
33.472 14.254 33.498 14.285 33.514 14.31 cv
33.523 14.324 li
33.534 14.308 li
33.632 14.149 33.735 13.964 33.908 13.825 cv
33.94 13.8 33.973 13.777 34.008 13.758 cv
34.039 13.741 34.082 13.723 34.132 13.718 cv
34.188 13.711 34.255 13.72 34.317 13.762 cv
34.376 13.802 34.405 13.856 34.42 13.895 cv
34.423 13.905 34.426 13.914 34.429 13.924 cv
34.458 13.911 li
34.506 13.883 34.56 13.858 34.618 13.846 cv
34.672 13.834 34.731 13.83 34.793 13.843 cv
34.847 13.854 34.898 13.878 34.94 13.916 cv
34.985 13.893 li
35.064 13.855 35.168 13.815 35.286 13.823 cv
35.317 13.825 35.347 13.83 35.383 13.838 cv
35.393 13.834 li
35.401 13.827 35.409 13.819 35.416 13.813 cv
35.42 13.81 35.43 13.801 35.443 13.793 cv
35.665 13.645 35.933 13.564 36.205 13.564 cv
36.331 13.564 36.435 13.668 36.435 13.794 cv
36.435 13.921 36.331 14.024 36.205 14.024 cv
36.045 14.024 35.888 14.067 35.755 14.141 cv
35.707 14.171 li
35.697 14.179 35.683 14.192 35.665 14.207 cv
35.642 14.227 35.606 14.256 35.565 14.279 cv
35.541 14.292 35.503 14.311 35.456 14.32 cv
35.413 14.329 35.348 14.331 35.282 14.298 cv
35.254 14.283 li
35.245 14.284 35.225 14.288 35.189 14.306 cv
35.142 14.33 35.091 14.363 35.024 14.408 cv
34.999 14.425 34.972 14.441 34.946 14.454 cv
34.927 14.464 34.893 14.479 34.853 14.485 cv
34.81 14.492 34.726 14.494 34.652 14.431 cv
34.634 14.417 34.62 14.401 34.607 14.385 cv
34.585 14.394 li
34.494 14.479 34.424 14.555 34.335 14.606 cv
34.31 14.62 34.266 14.642 34.209 14.645 cv
34.14 14.648 34.069 14.624 34.016 14.568 cv
33.993 14.545 33.978 14.521 33.968 14.498 cv
33.964 14.488 li
33.948 14.513 li
33.87 14.642 33.784 14.78 33.656 14.895 cv
33.651 14.899 33.646 14.903 33.642 14.907 cv
33.614 14.93 33.574 14.957 33.525 14.972 cv
33.472 14.989 33.408 14.993 33.342 14.968 cv
33.28 14.945 33.239 14.903 33.215 14.87 cv
33.191 14.837 33.177 14.804 33.167 14.779 cv
33.162 14.765 33.157 14.75 33.152 14.734 cv
33.132 14.74 li
33.095 14.77 33.066 14.796 33.043 14.814 cv
33.038 14.818 33.027 14.827 33.012 14.835 cv
33.006 14.838 32.987 14.85 32.961 14.858 cv
32.947 14.862 32.919 14.87 32.882 14.869 cv
32.843 14.867 32.779 14.854 32.727 14.801 cv
32.702 14.776 32.685 14.749 32.671 14.723 cv
32.637 14.718 li
32.58 14.718 32.522 14.699 32.479 14.661 cv
32.456 14.636 li
32.426 14.727 li
32.415 14.764 32.406 14.8 32.398 14.834 cv
32.374 14.943 32.278 15.018 32.171 15.017 cv
cp
39.566 15.404 mo
39.844 15.055 li
40.63 14.022 li
40.747 13.827 li
40.908 13.532 40.979 13.279 40.961 13.092 cv
40.913 12.928 li
40.847 12.844 li
40.647 12.744 li
40.406 12.694 40.051 12.803 39.647 13.124 cv
39.313 13.372 38.989 13.637 38.673 13.916 cv
38.315 14.241 li
38.406 14.286 li
38.492 14.336 38.573 14.389 38.652 14.446 cv
38.732 14.507 li
39.426 13.743 li
39.57 13.585 39.798 13.433 40 13.48 cv
40.054 13.499 li
40.086 13.511 li
40.122 13.545 li
40.16 13.58 40.184 13.621 40.199 13.663 cv
40.264 13.858 40.134 14.097 39.989 14.256 cv
39.283 15.032 li
39.315 15.068 li
39.566 15.404 li
cp
38.07 15.799 mo
38.227 15.673 li
39.731 14.021 li
39.842 13.853 li
39.685 13.979 li
38.181 15.631 li
38.07 15.799 li
cp
33.392 15.84 mo
33.423 15.832 li
33.4 15.82 li
33.392 15.84 li
cp
33.869 15.963 mo
33.839 15.913 li
33.775 15.932 li
33.864 15.963 li
33.869 15.963 li
cp
32.171 16.768 mo
32.158 16.769 32.144 16.769 32.131 16.768 cv
32.116 16.767 32.101 16.763 32.086 16.759 cv
31.964 16.722 31.895 16.594 31.932 16.472 cv
31.975 16.326 32.04 16.152 32.143 16.002 cv
32.25 15.848 32.406 15.709 32.63 15.659 cv
32.727 15.638 32.822 15.669 32.887 15.737 cv
32.937 15.79 32.957 15.853 32.965 15.885 cv
32.968 15.896 li
32.981 15.883 li
33.021 15.842 33.067 15.794 33.111 15.754 cv
33.152 15.715 33.206 15.668 33.264 15.635 cv
33.293 15.62 33.332 15.601 33.381 15.593 cv
33.442 15.583 33.491 15.599 33.526 15.618 cv
33.546 15.628 li
33.563 15.605 33.578 15.589 33.594 15.573 cv
33.693 15.474 33.841 15.492 33.927 15.579 cv
33.95 15.561 li
33.988 15.524 34.033 15.486 34.08 15.459 cv
34.117 15.437 34.17 15.414 34.233 15.408 cv
34.301 15.403 34.371 15.419 34.433 15.46 cv
34.502 15.507 34.534 15.573 34.546 15.6 cv
34.551 15.611 34.555 15.622 34.561 15.633 cv
34.58 15.644 li
34.67 15.652 34.744 15.621 34.823 15.569 cv
34.951 15.485 35.09 15.34 35.257 15.256 cv
35.37 15.198 35.509 15.245 35.566 15.358 cv
35.623 15.471 35.577 15.61 35.464 15.667 cv
35.356 15.721 35.234 15.849 35.076 15.953 cv
34.89 16.076 34.648 16.164 34.338 16.06 cv
34.276 16.039 34.234 16 34.203 15.969 cv
34.179 15.992 34.148 16.028 34.12 16.058 cv
34.093 16.088 34.057 16.125 34.017 16.154 cv
33.994 16.17 33.963 16.19 33.924 16.204 cv
33.885 16.218 33.826 16.23 33.761 16.213 cv
33.744 16.209 33.727 16.203 33.708 16.196 cv
33.691 16.208 li
33.676 16.224 33.661 16.241 33.646 16.257 cv
33.616 16.287 33.561 16.324 33.486 16.325 cv
33.415 16.327 33.364 16.296 33.339 16.277 cv
33.328 16.268 33.318 16.259 33.31 16.25 cv
33.29 16.225 li
33.242 16.273 li
33.219 16.295 33.196 16.318 33.172 16.339 cv
33.127 16.379 33.068 16.426 33.003 16.457 cv
32.95 16.483 32.855 16.516 32.747 16.478 cv
32.633 16.438 32.577 16.342 32.551 16.269 cv
32.549 16.26 32.546 16.251 32.542 16.243 cv
32.522 16.264 li
32.459 16.355 32.411 16.475 32.373 16.604 cv
32.344 16.698 32.262 16.76 32.171 16.768 cv
cp
37.652 17.48 mo
37.812 17.331 li
37.999 17.153 38.175 16.981 38.342 16.811 cv
39.035 16.073 li
39.341 15.687 li
39.046 15.293 li
38.485 15.908 li
38.357 16.048 38.169 16.18 37.992 16.18 cv
37.966 16.18 37.94 16.178 37.915 16.172 cv
37.871 16.162 37.828 16.141 37.784 16.109 cv
37.745 16.054 li
37.74 16.046 li
37.713 15.993 li
37.648 15.794 37.778 15.555 37.922 15.396 cv
38.496 14.765 li
38.447 14.729 li
38.232 14.59 li
38.045 14.494 li
37.738 14.786 li
37.427 15.096 37.068 15.496 36.699 15.934 cv
36.378 16.323 li
36.612 16.582 li
36.842 16.822 37.087 17.048 37.346 17.254 cv
37.652 17.48 li
cp
35.314 18.241 mo
35.269 18.245 35.223 18.232 35.186 18.201 cv
35.112 18.139 35.102 18.029 35.165 17.955 cv
35.982 16.981 li
36.044 16.907 36.155 16.897 36.228 16.959 cv
36.302 17.021 36.312 17.131 36.25 17.205 cv
35.432 18.179 li
35.401 18.216 35.358 18.237 35.314 18.241 cv
cp
32.296 18.245 mo
32.283 18.246 32.27 18.246 32.257 18.245 cv
32.241 18.243 32.226 18.24 32.211 18.235 cv
32.089 18.198 32.021 18.069 32.059 17.948 cv
32.194 17.507 32.521 17.073 33.008 16.911 cv
33.09 16.883 33.182 16.889 33.262 16.937 cv
33.332 16.98 33.371 17.042 33.392 17.085 cv
33.417 17.136 33.434 17.193 33.445 17.249 cv
33.464 17.242 li
33.496 17.224 33.531 17.208 33.571 17.196 cv
33.661 17.168 33.761 17.168 33.864 17.214 cv
33.932 17.245 33.992 17.293 34.047 17.348 cv
34.136 17.438 34.135 17.584 34.044 17.673 cv
33.954 17.762 33.808 17.761 33.719 17.671 cv
33.712 17.663 33.705 17.658 33.7 17.653 cv
33.688 17.644 li
33.684 17.647 33.68 17.649 33.674 17.652 cv
33.651 17.666 33.631 17.68 33.594 17.704 cv
33.527 17.748 33.431 17.807 33.304 17.838 cv
33.226 17.857 33.158 17.834 33.111 17.799 cv
33.073 17.77 33.053 17.737 33.046 17.723 cv
33.03 17.694 33.024 17.667 33.023 17.662 cv
33.019 17.644 33.018 17.628 33.017 17.622 cv
33.015 17.601 33.015 17.583 33.013 17.538 cv
33.011 17.507 33.009 17.471 33.006 17.436 cv
33.004 17.415 li
32.986 17.425 li
32.757 17.564 32.583 17.81 32.499 18.083 cv
32.47 18.177 32.388 18.238 32.296 18.245 cv
cp
35.843 19.038 mo
36.143 18.793 li
36.541 18.465 36.894 18.163 37.213 17.879 cv
37.39 17.72 li
37.129 17.529 li
36.855 17.31 36.6 17.075 36.359 16.823 cv
36.158 16.6 li
35.601 17.31 li
35.367 17.616 35.145 17.916 34.946 18.192 cv
34.933 18.211 li
34.952 18.256 li
35.04 18.373 li
35.117 18.464 35.218 18.569 35.326 18.67 cv
35.435 18.772 35.546 18.866 35.642 18.934 cv
35.691 18.969 35.732 18.995 35.766 19.013 cv
35.813 19.032 li
35.843 19.034 li
35.843 19.038 li
cp
35.508 19.309 mo
35.54 19.282 li
35.44 19.22 li
35.327 19.138 35.203 19.034 35.088 18.926 cv
34.972 18.817 34.859 18.702 34.772 18.597 cv
34.715 18.521 li
34.699 18.543 li
34.819 18.714 li
35.306 19.174 li
35.508 19.309 li
cp
33.996 20.415 mo
34.288 20.345 li
34.459 20.342 li
34.495 20.339 li
34.531 20.341 li
34.689 20.337 li
34.8 19.87 li
34.853 19.715 34.929 19.572 35.049 19.432 cv
35.059 19.421 li
34.67 19.074 li
34.634 19.034 li
34.435 19.206 li
34.365 19.255 34.293 19.295 34.219 19.33 cv
33.756 19.488 li
33.766 19.642 li
33.772 19.682 li
33.772 19.722 li
33.783 19.888 li
33.741 20.175 li
34.158 19.718 li
34.144 19.627 li
34.144 19.618 li
34.151 19.437 34.299 19.287 34.488 19.296 cv
34.676 19.305 34.81 19.468 34.802 19.648 cv
34.795 19.828 34.647 19.979 34.458 19.97 cv
34.448 19.969 li
34.411 19.959 li
33.996 20.415 li
cp
33.873 21.965 mo
34.117 21.951 li
39.499 19.682 li
39.343 19.657 li
38.564 19.452 38.041 18.939 37.725 18.206 cv
37.636 17.967 li
37.327 18.245 li
36.845 18.669 36.29 19.132 35.626 19.662 cv
35.555 19.718 li
35.504 19.721 li
35.426 19.674 li
35.348 19.624 li
35.315 19.658 li
35.19 19.841 li
35.092 20.033 35.061 20.253 34.998 20.582 cv
34.977 20.688 34.866 20.75 34.766 20.712 cv
34.443 20.592 33.824 20.79 33.438 21.015 cv
33.428 21.019 li
33.367 21.037 li
33.351 21.039 li
33.328 21.038 li
33.223 21.022 33.138 20.907 33.192 20.79 cv
33.379 20.384 33.525 19.756 33.375 19.447 cv
33.328 19.35 33.38 19.233 33.483 19.203 cv
33.805 19.109 34.021 19.059 34.203 18.943 cv
34.374 18.801 li
34.414 18.753 li
34.336 18.631 li
34.293 18.56 li
34.295 18.511 li
34.342 18.443 li
34.731 17.877 35.275 17.143 35.844 16.428 cv
36.002 16.233 li
36.018 16.203 li
36.045 16.18 li
36.272 15.9 li
36.595 15.511 36.914 15.143 37.209 14.83 cv
37.366 14.669 li
37.368 14.633 li
37.415 13.986 37.5 13.299 37.61 12.587 cv
37.691 12.099 li
31.463 13.417 li
31.438 14.964 li
31.411 16.669 31.409 18.269 31.644 19.522 cv
31.934 21.068 32.547 21.981 33.873 21.965 cv
cp
33.856 22.426 mo
32.231 22.435 31.498 21.241 31.192 19.607 cv
30.868 17.878 30.979 15.522 31.006 13.227 cv
31.007 13.119 31.083 13.026 31.188 13.004 cv
37.926 11.579 li
38.085 11.545 38.229 11.683 38.2 11.843 cv
38.127 12.26 38.061 12.668 38.005 13.064 cv
37.869 14.187 li
38.441 13.654 li
38.764 13.371 39.094 13.1 39.435 12.847 cv
39.906 12.474 40.486 12.247 40.918 12.467 cv
41.022 12.542 li
41.05 12.553 li
41.087 12.588 li
41.523 12.996 41.256 13.698 40.917 14.215 cv
40.393 14.928 39.853 15.617 39.299 16.296 cv
38.959 16.679 38.606 17.049 38.205 17.437 cv
38.012 17.619 li
38.073 17.833 li
38.433 18.846 39.161 19.387 40.477 19.283 cv
40.736 19.263 40.823 19.624 40.584 19.724 cv
34.26 22.39 li
34.239 22.4 34.216 22.405 34.193 22.408 cv
34.077 22.419 33.964 22.425 33.856 22.426 cv
cp
f
70.445 15.446 mo
70.408 15.446 70.37 15.438 70.335 15.419 cv
70.223 15.36 70.18 15.221 70.239 15.108 cv
70.385 14.83 70.586 14.635 70.846 14.55 cv
71.101 14.466 71.376 14.501 71.648 14.603 cv
71.767 14.648 71.827 14.78 71.783 14.899 cv
71.738 15.019 71.605 15.079 71.486 15.034 cv
71.272 14.954 71.111 14.947 70.989 14.987 cv
70.87 15.026 70.752 15.121 70.646 15.322 cv
70.605 15.4 70.527 15.444 70.445 15.446 cv
cp
68.258 16.217 mo
68.221 16.218 68.183 16.209 68.148 16.19 cv
68.036 16.131 67.992 15.992 68.051 15.88 cv
68.198 15.601 68.399 15.406 68.658 15.321 cv
68.914 15.237 69.189 15.272 69.461 15.374 cv
69.58 15.419 69.64 15.552 69.596 15.671 cv
69.551 15.79 69.418 15.85 69.299 15.806 cv
69.085 15.725 68.924 15.719 68.802 15.758 cv
68.683 15.798 68.565 15.893 68.459 16.094 cv
68.418 16.171 68.339 16.216 68.258 16.217 cv
cp
74.505 16.219 mo
74.405 16.218 74.306 16.204 74.21 16.173 cv
73.951 16.088 73.749 15.895 73.602 15.616 cv
73.542 15.503 73.586 15.364 73.698 15.304 cv
73.81 15.245 73.949 15.288 74.009 15.401 cv
74.115 15.602 74.234 15.696 74.352 15.735 cv
74.475 15.775 74.636 15.768 74.85 15.687 cv
74.969 15.641 75.101 15.702 75.147 15.821 cv
75.192 15.939 75.131 16.072 75.013 16.117 cv
74.843 16.182 74.672 16.22 74.505 16.219 cv
cp
76.694 16.985 mo
76.594 16.985 76.495 16.969 76.399 16.938 cv
76.14 16.854 75.938 16.66 75.791 16.381 cv
75.731 16.269 75.775 16.129 75.887 16.07 cv
75.999 16.011 76.138 16.054 76.198 16.166 cv
76.304 16.368 76.423 16.462 76.542 16.501 cv
76.664 16.54 76.825 16.534 77.039 16.453 cv
77.158 16.407 77.291 16.468 77.336 16.586 cv
77.381 16.705 77.321 16.838 77.202 16.883 cv
77.032 16.948 76.861 16.986 76.694 16.985 cv
cp
70.042 17.927 mo
69.833 17.924 69.615 17.893 69.386 17.831 cv
69.264 17.798 69.191 17.671 69.224 17.549 cv
69.257 17.426 69.384 17.354 69.506 17.387 cv
70.353 17.616 71.005 17.342 71.55 16.66 cv
71.629 16.561 71.774 16.545 71.873 16.624 cv
71.972 16.704 71.989 16.848 71.909 16.948 cv
71.407 17.576 70.787 17.934 70.042 17.927 cv
cp
66.307 17.95 mo
66.327 17.872 li
66.424 17.511 66.31 17.193 66.049 17.017 cv
65.898 16.914 65.787 16.91 65.722 16.932 cv
65.661 16.952 65.582 17.016 65.537 17.186 cv
65.459 17.481 65.807 17.851 66.192 17.929 cv
66.307 17.95 li
cp
70.672 18.647 mo
70.575 18.65 70.481 18.591 70.447 18.493 cv
70.405 18.373 70.467 18.242 70.587 18.199 cv
71.13 18.008 li
71.25 17.966 71.382 18.029 71.424 18.148 cv
71.466 18.268 71.403 18.4 71.283 18.442 cv
70.74 18.634 li
70.718 18.642 70.695 18.646 70.672 18.647 cv
cp
75.806 19.171 mo
75.732 19.178 75.657 19.148 75.608 19.086 cv
75.061 18.406 74.408 18.133 73.563 18.365 cv
73.44 18.398 73.313 18.326 73.28 18.203 cv
73.246 18.081 73.319 17.954 73.441 17.921 cv
74.485 17.635 75.321 17.994 75.966 18.798 cv
76.046 18.897 76.03 19.042 75.931 19.121 cv
75.894 19.151 75.85 19.168 75.806 19.171 cv
cp
74.722 19.301 mo
74.7 19.3 74.677 19.296 74.655 19.287 cv
74.111 19.098 li
73.99 19.056 73.927 18.924 73.969 18.804 cv
74.011 18.684 74.142 18.621 74.263 18.663 cv
74.806 18.853 li
74.927 18.895 74.99 19.026 74.948 19.146 cv
74.914 19.244 74.821 19.304 74.722 19.301 cv
cp
70.914 19.413 mo
70.958 19.412 71.003 19.411 71.047 19.407 cv
71.319 19.363 li
71.576 19.205 li
72.806 18.299 72.959 15.972 72.138 13.293 cv
72.031 12.968 li
71.645 13.17 li
70.322 13.821 68.673 14.394 67.23 14.705 cv
66.793 14.788 li
66.925 15.18 li
67.937 17.966 69.532 19.426 70.914 19.413 cv
cp
74.297 20.345 mo
75.824 20.407 77.399 18.687 78.433 16.083 cv
78.553 15.762 li
78.125 15.678 li
76.685 15.359 75.04 14.775 73.719 14.116 cv
73.326 13.907 li
73.209 14.226 li
73.145 14.411 73.086 14.593 73.033 14.773 cv
73.024 14.803 73.01 14.83 72.991 14.854 cv
72.98 14.863 li
73.055 15.413 li
73.174 16.505 73.1 17.507 72.791 18.301 cv
72.72 18.456 li
72.743 18.508 li
72.92 19.299 73.286 19.87 73.794 20.196 cv
73.997 20.307 li
74.297 20.345 li
cp
77.712 20.535 mo
77.997 20.532 78.292 20.173 78.329 19.806 cv
78.339 19.69 li
78.259 19.677 li
77.89 19.617 77.586 19.762 77.436 20.039 cv
77.349 20.199 77.356 20.31 77.384 20.373 cv
77.41 20.431 77.481 20.503 77.655 20.531 cv
77.674 20.534 77.693 20.536 77.712 20.535 cv
cp
77.706 20.996 mo
77.665 20.996 77.624 20.992 77.582 20.986 cv
77.303 20.941 77.072 20.8 76.965 20.563 cv
76.859 20.33 76.899 20.063 77.031 19.82 cv
77.286 19.347 77.799 19.134 78.336 19.223 cv
78.324 19.117 78.303 19.029 78.272 18.95 cv
78.196 18.756 78.049 18.594 77.747 18.472 cv
77.726 18.458 li
77.688 18.516 li
76.774 19.874 75.652 20.774 74.46 20.808 cv
74.398 20.81 74.336 20.809 74.274 20.806 cv
74.142 20.8 74.009 20.783 73.876 20.754 cv
73.859 20.751 73.843 20.746 73.827 20.738 cv
73.232 20.462 72.794 19.965 72.516 19.311 cv
72.407 19.014 li
72.402 19.022 li
72.167 19.344 71.869 19.604 71.504 19.788 cv
71.489 19.796 71.472 19.802 71.455 19.806 cv
71.27 19.852 71.083 19.875 70.896 19.877 cv
70.834 19.877 70.772 19.876 70.709 19.871 cv
69.728 19.805 68.75 19.153 67.912 18.042 cv
67.835 17.933 li
67.822 17.953 li
67.645 18.182 67.43 18.328 67.174 18.4 cv
67.011 18.446 66.838 18.46 66.658 18.453 cv
66.645 18.452 li
66.588 18.605 li
66.562 18.665 66.53 18.723 66.491 18.78 cv
66.334 19.005 66.006 19.191 65.673 19.213 cv
65.626 19.216 65.578 19.216 65.531 19.212 cv
65.404 19.201 65.31 19.09 65.321 18.964 cv
65.331 18.837 65.442 18.742 65.569 18.753 cv
65.784 18.771 66.029 18.637 66.113 18.517 cv
66.136 18.484 66.156 18.446 66.177 18.402 cv
66.102 18.38 li
65.814 18.322 65.53 18.155 65.334 17.932 cv
65.138 17.709 65.005 17.4 65.093 17.068 cv
65.165 16.795 65.328 16.579 65.574 16.496 cv
65.817 16.413 66.079 16.48 66.307 16.635 cv
66.752 16.936 66.914 17.467 66.775 17.992 cv
66.878 17.992 66.968 17.98 67.049 17.957 cv
67.2 17.914 67.337 17.83 67.459 17.67 cv
67.553 17.52 li
67.375 17.235 li
66.947 16.508 66.571 15.649 66.271 14.678 cv
66.23 14.545 66.317 14.405 66.455 14.383 cv
68.215 14.101 70.499 13.306 72.052 12.437 cv
72.177 12.367 72.334 12.427 72.382 12.561 cv
72.518 12.949 72.638 13.337 72.738 13.722 cv
72.803 13.997 li
72.988 13.495 li
73.039 13.365 73.194 13.31 73.316 13.38 cv
74.866 14.26 77.146 15.068 78.901 15.361 cv
79.042 15.384 79.128 15.529 79.08 15.664 cv
78.834 16.369 78.541 17.039 78.211 17.649 cv
77.97 18.07 li
78.192 18.182 li
78.438 18.334 78.604 18.534 78.701 18.782 cv
78.763 18.94 78.794 19.111 78.805 19.29 cv
78.805 19.304 li
78.963 19.344 li
79.025 19.365 79.087 19.391 79.147 19.425 cv
79.42 19.578 79.665 19.957 79.672 20.336 cv
79.674 20.463 79.573 20.568 79.446 20.57 cv
79.319 20.573 79.214 20.472 79.211 20.345 cv
79.207 20.129 79.051 19.899 78.922 19.827 cv
78.887 19.807 78.847 19.791 78.795 19.776 cv
78.787 19.851 li
78.758 20.143 78.62 20.442 78.418 20.659 cv
78.241 20.85 77.993 20.999 77.706 20.996 cv
cp
f
95.519 30.599 mo
95.51 30.567 li
95.431 30.346 95.243 30.243 95.053 30.241 cv
94.862 30.239 94.662 30.341 94.566 30.574 cv
94.556 30.599 li
95.519 30.599 li
cp
94.049 30.599 mo
94.039 30.568 li
94.003 30.474 93.945 30.403 93.878 30.351 cv
93.786 30.281 93.667 30.242 93.543 30.241 cv
93.335 30.239 93.118 30.342 93.015 30.576 cv
93.006 30.599 li
94.049 30.599 li
cp
92.287 30.599 mo
92.277 30.568 li
92.241 30.474 92.184 30.403 92.116 30.351 cv
92.024 30.281 91.905 30.242 91.781 30.241 cv
91.573 30.239 91.356 30.342 91.253 30.576 cv
91.244 30.599 li
92.287 30.599 li
cp
90.579 30.599 mo
90.569 30.568 li
90.533 30.474 90.476 30.403 90.408 30.351 cv
90.316 30.281 90.197 30.242 90.073 30.241 cv
89.865 30.239 89.648 30.342 89.545 30.576 cv
89.536 30.599 li
90.579 30.599 li
cp
88.946 30.599 mo
88.937 30.568 li
88.9 30.474 88.843 30.403 88.776 30.351 cv
88.683 30.281 88.565 30.242 88.441 30.241 cv
88.232 30.239 88.015 30.342 87.913 30.576 cv
87.903 30.599 li
88.946 30.599 li
cp
95.97 32.219 mo
96.036 32.18 li
96.083 32.146 96.123 32.103 96.156 32.052 cv
96.224 31.947 96.263 31.81 96.264 31.663 cv
96.265 31.517 96.229 31.374 96.159 31.261 cv
96.125 31.206 96.083 31.158 96.034 31.118 cv
95.97 31.077 li
95.97 32.219 li
cp
87.442 32.22 mo
87.442 31.075 li
87.417 31.09 li
87.35 31.134 87.296 31.192 87.253 31.261 cv
87.184 31.374 87.147 31.517 87.149 31.663 cv
87.149 31.81 87.189 31.947 87.257 32.052 cv
87.298 32.116 87.35 32.168 87.412 32.204 cv
87.442 32.22 li
87.442 32.22 li
cp
92.125 33.152 mo
92.079 33.052 li
92.049 32.986 92.052 32.91 92.086 32.847 cv
92.121 32.783 li
91.771 32.783 li
91.771 33.152 li
92.125 33.152 li
cp
95.97 33.99 mo
96.036 33.952 li
96.083 33.918 96.123 33.874 96.156 33.823 cv
96.224 33.719 96.263 33.581 96.264 33.435 cv
96.265 33.288 96.229 33.145 96.159 33.032 cv
96.125 32.977 96.083 32.929 96.034 32.889 cv
95.97 32.848 li
95.97 33.99 li
cp
87.442 33.991 mo
87.442 32.847 li
87.417 32.861 li
87.35 32.905 87.296 32.963 87.253 33.032 cv
87.184 33.145 87.147 33.288 87.149 33.435 cv
87.149 33.581 87.189 33.719 87.256 33.823 cv
87.298 33.887 87.349 33.939 87.412 33.975 cv
87.442 33.991 li
cp
92.538 35.616 mo
92.521 35.548 li
92.375 35.014 92.119 34.613 91.792 34.291 cv
91.608 34.125 li
91.054 35.616 li
92.538 35.616 li
cp
87.442 35.834 mo
87.442 34.709 li
87.378 34.742 li
87.329 34.782 87.287 34.83 87.253 34.885 cv
87.184 34.998 87.147 35.141 87.149 35.287 cv
87.149 35.434 87.189 35.571 87.257 35.677 cv
87.29 35.728 87.33 35.771 87.376 35.805 cv
87.442 35.834 li
cp
95.97 35.843 mo
96.036 35.805 li
96.083 35.771 96.123 35.728 96.156 35.677 cv
96.224 35.571 96.263 35.434 96.264 35.287 cv
96.265 35.141 96.229 34.998 96.159 34.885 cv
96.125 34.83 96.083 34.782 96.034 34.742 cv
95.97 34.701 li
95.97 35.843 li
cp
90.724 36.076 mo
90.564 36.076 90.452 35.916 90.507 35.766 cv
91.286 33.671 li
91.335 33.597 li
91.328 33.586 li
91.317 33.559 91.311 33.529 91.311 33.497 cv
91.311 32.553 li
91.311 32.426 91.413 32.323 91.541 32.323 cv
92.507 32.323 li
92.681 32.323 92.793 32.51 92.71 32.663 cv
92.546 32.965 li
92.694 33.286 li
92.764 33.439 92.652 33.612 92.484 33.612 cv
91.739 33.612 li
91.731 33.626 li
91.724 33.632 li
91.885 33.755 li
92.452 34.226 92.887 34.862 93.05 35.807 cv
93.074 35.948 92.965 36.076 92.823 36.076 cv
90.724 36.076 li
cp
90.562 37.654 mo
90.628 37.653 90.705 37.63 90.794 37.577 cv
90.831 37.553 li
90.858 37.533 li
91.047 37.395 91.231 37.338 91.417 37.36 cv
91.579 37.378 91.718 37.454 91.826 37.52 cv
91.873 37.547 li
91.888 37.558 li
91.979 37.63 92.056 37.648 92.129 37.644 cv
92.2 37.64 92.282 37.615 92.378 37.566 cv
92.417 37.545 li
92.444 37.527 li
92.542 37.465 92.636 37.42 92.727 37.393 cv
92.73 37.392 li
92.727 37.376 li
92.724 37.317 92.743 37.257 92.786 37.21 cv
93.198 36.754 li
89.999 36.754 li
90.009 36.779 li
90.104 36.988 90.258 37.176 90.488 37.337 cv
90.566 37.393 90.599 37.487 90.58 37.575 cv
90.546 37.652 li
90.562 37.654 li
cp
87.442 37.746 mo
87.442 36.621 li
87.378 36.654 li
87.329 36.693 87.287 36.742 87.253 36.797 cv
87.184 36.91 87.147 37.053 87.149 37.199 cv
87.149 37.345 87.189 37.483 87.256 37.588 cv
87.29 37.639 87.329 37.682 87.376 37.716 cv
87.442 37.746 li
cp
95.97 37.755 mo
96.036 37.716 li
96.083 37.682 96.123 37.639 96.156 37.588 cv
96.224 37.483 96.263 37.345 96.264 37.199 cv
96.265 37.053 96.229 36.91 96.159 36.797 cv
96.125 36.742 96.083 36.693 96.034 36.654 cv
95.97 36.613 li
95.97 37.755 li
cp
90.54 38.102 mo
90.375 38.097 90.218 38.042 90.071 37.935 cv
90.053 37.922 li
90.017 37.9 li
89.919 37.84 89.857 37.813 89.799 37.807 cv
89.744 37.802 89.66 37.811 89.519 37.916 cv
89.419 37.989 89.281 37.969 89.207 37.87 cv
89.133 37.772 89.154 37.631 89.253 37.558 cv
89.405 37.444 89.552 37.38 89.699 37.363 cv
89.84 37.363 li
89.816 37.337 li
89.633 37.108 89.519 36.85 89.462 36.57 cv
89.433 36.428 89.542 36.294 89.688 36.294 cv
93.717 36.294 li
93.916 36.294 94.021 36.531 93.887 36.679 cv
93.214 37.423 li
93.22 37.425 li
93.287 37.454 93.347 37.489 93.4 37.521 cv
93.442 37.547 li
93.459 37.553 li
93.557 37.635 93.637 37.656 93.707 37.654 cv
93.782 37.652 93.872 37.622 93.981 37.551 cv
94.083 37.482 94.222 37.511 94.29 37.613 cv
94.358 37.717 94.33 37.855 94.227 37.923 cv
94.075 38.024 93.905 38.096 93.72 38.101 cv
93.544 38.106 93.374 38.05 93.217 37.936 cv
93.198 37.922 li
93.161 37.899 li
93.063 37.839 93.009 37.815 92.954 37.81 cv
92.902 37.804 92.816 37.815 92.654 37.923 cv
92.641 37.931 li
92.496 38.013 92.332 38.08 92.153 38.09 cv
91.979 38.1 91.808 38.053 91.644 37.936 cv
91.626 37.922 li
91.589 37.9 li
91.49 37.839 91.427 37.81 91.367 37.803 cv
91.313 37.797 91.232 37.807 91.091 37.912 cv
91.082 37.923 li
90.93 38.024 90.759 38.096 90.575 38.101 cv
90.541 38.102 li
90.54 38.102 li
cp
94.598 38.363 mo
94.598 32.048 li
88.814 32.048 li
88.814 38.363 li
94.598 38.363 li
cp
88.584 38.858 mo
88.52 38.858 88.463 38.832 88.421 38.791 cv
88.405 38.767 li
88.389 38.756 li
88.347 38.714 88.322 38.657 88.322 38.593 cv
88.322 38.561 88.328 38.531 88.339 38.504 cv
88.354 38.483 li
88.354 31.929 li
88.339 31.908 li
88.328 31.88 88.322 31.85 88.322 31.818 cv
88.322 31.755 88.347 31.697 88.389 31.655 cv
88.405 31.644 li
88.421 31.621 li
88.463 31.579 88.52 31.553 88.584 31.553 cv
88.616 31.553 88.646 31.56 88.673 31.571 cv
88.698 31.588 li
94.714 31.588 li
94.739 31.571 li
94.766 31.56 94.797 31.553 94.829 31.553 cv
94.892 31.553 94.95 31.579 94.991 31.621 cv
95.007 31.644 li
95.023 31.655 li
95.065 31.697 95.091 31.755 95.091 31.818 cv
95.091 31.85 95.084 31.88 95.073 31.908 cv
95.059 31.928 li
95.059 38.483 li
95.073 38.504 li
95.084 38.531 95.091 38.561 95.091 38.593 cv
95.091 38.657 95.065 38.714 95.023 38.756 cv
95.007 38.767 li
94.991 38.791 li
94.95 38.832 94.892 38.858 94.829 38.858 cv
94.797 38.858 94.766 38.852 94.739 38.841 cv
94.714 38.823 li
88.698 38.823 li
88.673 38.841 li
88.646 38.852 88.616 38.858 88.584 38.858 cv
cp
87.442 39.343 mo
87.442 38.302 li
87.374 38.335 li
87.324 38.372 87.283 38.417 87.251 38.468 cv
87.183 38.572 87.147 38.703 87.149 38.837 cv
87.149 38.971 87.187 39.097 87.253 39.193 cv
87.285 39.24 87.324 39.281 87.371 39.313 cv
87.442 39.343 li
cp
95.51 39.352 mo
95.51 31.059 li
87.903 31.059 li
87.903 39.352 li
95.51 39.352 li
cp
95.97 39.352 mo
96.041 39.313 li
96.088 39.281 96.127 39.24 96.159 39.193 cv
96.225 39.097 96.263 38.971 96.264 38.837 cv
96.265 38.703 96.23 38.572 96.162 38.468 cv
96.129 38.417 96.088 38.372 96.038 38.335 cv
95.97 38.293 li
95.97 39.352 li
cp
95.053 40.17 mo
95.217 40.169 95.377 40.092 95.47 39.931 cv
95.512 39.812 li
94.565 39.812 li
94.613 39.929 li
94.719 40.097 94.89 40.172 95.053 40.17 cv
cp
93.543 40.17 mo
93.667 40.169 93.786 40.13 93.878 40.059 cv
93.923 40.025 93.963 39.982 93.996 39.929 cv
94.041 39.812 li
93.015 39.812 li
93.066 39.927 li
93.18 40.097 93.365 40.172 93.543 40.17 cv
cp
91.781 40.17 mo
91.905 40.169 92.024 40.13 92.116 40.059 cv
92.161 40.025 92.202 39.982 92.235 39.929 cv
92.279 39.812 li
91.253 39.812 li
91.304 39.927 li
91.419 40.097 91.603 40.172 91.781 40.17 cv
cp
90.073 40.17 mo
90.197 40.169 90.316 40.13 90.408 40.059 cv
90.453 40.025 90.494 39.982 90.526 39.929 cv
90.571 39.812 li
89.545 39.812 li
89.596 39.927 li
89.71 40.097 89.895 40.172 90.073 40.17 cv
cp
88.441 40.17 mo
88.565 40.169 88.683 40.13 88.776 40.059 cv
88.821 40.025 88.861 39.982 88.894 39.929 cv
88.938 39.812 li
87.913 39.812 li
87.963 39.927 li
88.078 40.097 88.263 40.172 88.441 40.17 cv
cp
88.445 40.631 mo
88.004 40.635 87.561 40.363 87.429 39.84 cv
87.429 39.829 li
87.264 39.777 li
87.099 39.706 86.968 39.592 86.874 39.454 cv
86.749 39.273 86.69 39.055 86.688 38.841 cv
86.686 38.627 86.742 38.406 86.864 38.218 cv
86.91 38.147 86.965 38.081 87.029 38.023 cv
87.03 38.022 li
86.976 37.974 li
86.937 37.932 86.901 37.887 86.87 37.838 cv
86.748 37.651 86.69 37.424 86.688 37.202 cv
86.686 36.981 86.741 36.752 86.861 36.557 cv
86.937 36.433 87.038 36.324 87.165 36.241 cv
87.185 36.229 li
87.179 36.226 li
87.051 36.151 86.948 36.047 86.87 35.927 cv
86.748 35.739 86.69 35.513 86.688 35.291 cv
86.686 35.069 86.741 34.84 86.861 34.645 cv
86.921 34.546 86.998 34.457 87.092 34.382 cv
87.145 34.347 li
87.105 34.324 li
87.011 34.256 86.933 34.17 86.87 34.074 cv
86.748 33.886 86.69 33.659 86.688 33.438 cv
86.686 33.216 86.741 32.987 86.861 32.792 cv
86.906 32.718 86.961 32.649 87.025 32.587 cv
87.084 32.536 li
87.037 32.498 li
86.973 32.441 86.917 32.375 86.87 32.303 cv
86.748 32.114 86.69 31.888 86.688 31.667 cv
86.686 31.445 86.741 31.216 86.861 31.021 cv
86.982 30.823 87.169 30.661 87.421 30.586 cv
87.43 30.586 li
87.429 30.571 li
87.561 30.047 88.004 29.776 88.445 29.78 cv
88.66 29.783 88.877 29.849 89.055 29.986 cv
89.123 30.037 89.183 30.098 89.236 30.168 cv
89.246 30.183 li
89.267 30.155 li
89.47 29.905 89.775 29.778 90.078 29.78 cv
90.293 29.783 90.51 29.849 90.688 29.986 cv
90.755 30.037 90.816 30.098 90.868 30.168 cv
90.916 30.237 li
90.922 30.226 li
91.123 29.929 91.455 29.777 91.786 29.78 cv
92.001 29.783 92.218 29.849 92.396 29.986 cv
92.486 30.054 92.564 30.14 92.626 30.24 cv
92.649 30.282 li
92.684 30.226 li
92.885 29.929 93.217 29.777 93.548 29.78 cv
93.763 29.783 93.979 29.849 94.157 29.986 cv
94.202 30.02 94.244 30.058 94.283 30.101 cv
94.303 30.128 li
94.335 30.091 li
94.527 29.883 94.792 29.778 95.058 29.78 cv
95.428 29.784 95.792 30.001 95.94 30.403 cv
95.99 30.586 li
95.991 30.586 li
96.244 30.661 96.431 30.823 96.552 31.021 cv
96.672 31.216 96.726 31.445 96.725 31.667 cv
96.723 31.888 96.664 32.114 96.542 32.303 cv
96.496 32.375 96.44 32.441 96.375 32.498 cv
96.328 32.536 li
96.448 32.652 li
96.487 32.695 96.521 32.742 96.552 32.792 cv
96.672 32.987 96.726 33.216 96.725 33.438 cv
96.723 33.659 96.664 33.886 96.542 34.074 cv
96.48 34.17 96.401 34.256 96.307 34.324 cv
96.272 34.347 li
96.32 34.382 li
96.414 34.457 96.491 34.546 96.552 34.645 cv
96.672 34.84 96.726 35.069 96.725 35.291 cv
96.723 35.513 96.664 35.739 96.542 35.927 cv
96.48 36.023 96.401 36.109 96.307 36.177 cv
96.223 36.226 li
96.248 36.241 li
96.375 36.324 96.476 36.433 96.552 36.557 cv
96.672 36.752 96.726 36.981 96.725 37.202 cv
96.723 37.424 96.664 37.651 96.542 37.838 cv
96.511 37.887 96.476 37.932 96.437 37.974 cv
96.385 38.025 li
96.444 38.084 li
96.483 38.126 96.518 38.171 96.549 38.218 cv
96.67 38.406 96.726 38.627 96.725 38.841 cv
96.723 39.055 96.663 39.273 96.539 39.454 cv
96.428 39.615 96.269 39.743 96.064 39.808 cv
95.989 39.828 li
95.94 40.008 li
95.792 40.41 95.429 40.627 95.058 40.631 cv
94.792 40.633 94.527 40.528 94.335 40.32 cv
94.305 40.281 li
94.283 40.31 li
94.244 40.353 94.202 40.391 94.157 40.425 cv
93.979 40.561 93.763 40.628 93.548 40.631 cv
93.216 40.633 92.885 40.482 92.684 40.185 cv
92.65 40.129 li
92.626 40.171 li
92.564 40.271 92.486 40.356 92.396 40.425 cv
92.218 40.561 92.001 40.628 91.786 40.631 cv
91.455 40.633 91.123 40.482 90.922 40.185 cv
90.916 40.174 li
90.868 40.243 li
90.816 40.313 90.755 40.374 90.688 40.425 cv
90.51 40.561 90.293 40.628 90.078 40.631 cv
89.801 40.633 89.525 40.528 89.324 40.321 cv
89.248 40.226 li
89.236 40.243 li
89.183 40.313 89.123 40.374 89.055 40.425 cv
88.877 40.561 88.66 40.628 88.445 40.631 cv
cp
f
95.305 15.209 mo
95.814 14.796 li
95.752 14.823 li
95.652 14.878 95.554 14.927 95.459 14.971 cv
95.305 15.037 li
95.305 15.209 li
cp
94.498 15.863 mo
94.845 15.582 li
94.845 15.581 li
94.845 15.194 li
94.676 15.235 li
94.498 15.261 li
94.498 15.863 li
cp
93.669 16.553 mo
94.038 16.241 li
94.038 15.267 li
94.016 15.266 li
93.948 15.259 93.883 15.248 93.818 15.234 cv
93.669 15.187 li
93.669 16.553 li
cp
92.928 17.188 mo
93.08 17.051 li
93.213 16.938 li
93.209 16.917 li
93.209 14.994 li
93.113 14.945 li
92.928 14.819 li
92.928 17.188 li
cp
92.164 17.878 mo
92.467 17.604 li
92.467 14.477 li
92.469 14.469 li
92.164 14.217 li
92.164 17.878 li
cp
91.4 18.619 mo
91.541 18.474 li
91.703 18.317 li
91.703 13.86 li
91.682 13.845 li
91.4 13.674 li
91.4 18.619 li
cp
90.571 19.514 mo
90.614 19.463 li
90.94 19.103 li
90.94 13.488 li
90.732 13.429 li
90.571 13.411 li
90.571 19.514 li
cp
90.023 20.184 mo
90.111 20.072 li
90.111 13.397 li
89.917 13.406 li
89.8 13.424 li
89.703 14.354 li
89.548 16.364 89.677 18.221 89.974 19.929 cv
90.023 20.184 li
cp
89.208 20.981 mo
89.389 20.979 89.55 20.947 89.67 20.892 cv
89.689 20.881 li
89.616 20.525 li
89.146 18.129 88.988 15.434 89.467 12.431 cv
89.545 11.98 li
89.522 11.973 li
89.119 11.86 88.713 11.872 88.298 11.982 cv
88.287 11.985 li
88.385 12.442 li
89.064 15.658 89.533 18.788 88.627 20.876 cv
88.621 20.89 li
88.7 20.916 li
88.815 20.949 88.953 20.973 89.097 20.979 cv
89.134 20.981 89.171 20.982 89.208 20.981 cv
cp
91.92 21.214 mo
91.952 21.209 li
92.002 21.198 li
91.938 21.186 li
91.938 21.188 li
91.92 21.214 li
cp
88.276 21.227 mo
88.204 21.181 li
88.112 21.197 li
88.163 21.209 li
88.276 21.227 li
cp
90.058 21.351 mo
90.649 21.351 91.189 21.318 91.605 21.264 cv
91.606 21.264 li
91.588 21.251 li
91.532 21.204 91.499 21.13 91.508 21.051 cv
91.637 19.864 92.365 18.822 93.298 17.84 cv
94.224 16.864 95.411 15.891 96.466 14.894 cv
96.469 14.891 96.475 14.886 96.478 14.883 cv
96.843 14.583 96.783 14.309 96.658 14.182 cv
96.516 14.037 96.153 13.935 95.654 14.264 cv
94.943 14.728 93.97 15.109 93.408 14.385 cv
92.545 13.215 91.57 12.354 90.091 12.334 cv
89.951 12.337 li
89.922 12.503 li
89.857 12.949 li
89.873 12.947 li
91.308 12.781 92.09 13.555 92.787 14.134 cv
93.5 14.726 94.149 15.173 95.532 14.419 cv
95.765 14.292 96.041 14.241 96.241 14.319 cv
96.429 14.392 96.537 14.59 96.438 14.805 cv
96.411 14.864 96.371 14.919 96.321 14.971 cv
96.157 15.109 li
94.018 16.836 91.881 18.527 90.401 20.447 cv
90.143 20.795 li
90.171 20.936 li
90.189 21.017 90.161 21.102 90.099 21.157 cv
90.04 21.21 89.975 21.253 89.904 21.29 cv
89.759 21.347 li
90.058 21.351 li
cp
92.334 21.831 mo
92.335 21.83 92.335 21.83 92.334 21.831 cv
92.334 21.831 li
cp
90.058 22.09 mo
90.649 22.09 91.189 22.057 91.605 22.004 cv
91.813 21.977 91.986 21.945 92.117 21.911 cv
92.194 21.891 92.246 21.873 92.28 21.859 cv
92.291 21.854 li
92.285 21.6 li
92.233 21.617 li
92.077 21.657 91.883 21.692 91.664 21.721 cv
91.224 21.778 90.665 21.811 90.058 21.811 cv
89.451 21.811 88.89 21.778 88.451 21.721 cv
88.232 21.692 88.038 21.657 87.882 21.617 cv
87.825 21.599 li
87.823 21.853 li
87.834 21.859 li
87.868 21.872 87.921 21.891 87.998 21.911 cv
88.129 21.945 88.302 21.977 88.51 22.004 cv
88.926 22.057 89.466 22.09 90.058 22.09 cv
cp
90.058 22.551 mo
89.451 22.551 88.89 22.517 88.451 22.46 cv
88.232 22.432 88.038 22.397 87.883 22.356 cv
87.738 22.319 87.591 22.269 87.494 22.191 cv
87.44 22.148 87.362 22.066 87.362 21.937 cv
87.368 21.249 li
87.369 21.243 li
87.362 21.198 li
87.362 21.135 87.382 21.081 87.408 21.039 cv
87.434 20.998 87.465 20.967 87.494 20.945 cv
87.578 20.877 87.698 20.831 87.813 20.798 cv
87.875 20.78 87.944 20.763 88.019 20.747 cv
88.188 20.716 li
88.288 20.487 li
89.058 18.436 88.538 15.298 87.792 11.874 cv
87.767 11.759 87.833 11.644 87.944 11.607 cv
88.579 11.394 89.232 11.356 89.889 11.61 cv
89.992 11.651 90.053 11.758 90.032 11.868 cv
90.031 11.875 li
90.105 11.873 li
91.79 11.899 92.883 12.897 93.775 14.107 cv
94.06 14.474 94.668 14.357 95.402 13.878 cv
96.678 13.037 97.729 14.177 96.95 15.065 cv
96.782 15.228 li
95.688 16.263 94.551 17.189 93.631 18.158 cv
92.831 19 92.241 19.832 92.032 20.718 cv
92.028 20.735 li
92.096 20.747 li
92.17 20.763 92.24 20.78 92.302 20.798 cv
92.418 20.832 92.536 20.877 92.621 20.945 cv
92.65 20.967 92.681 20.998 92.707 21.039 cv
92.733 21.081 92.753 21.135 92.753 21.198 cv
92.753 21.229 92.748 21.258 92.74 21.285 cv
92.739 21.287 li
92.753 21.935 li
92.753 22.066 92.674 22.149 92.621 22.191 cv
92.524 22.269 92.376 22.319 92.233 22.356 cv
92.077 22.397 91.883 22.432 91.664 22.46 cv
91.224 22.517 90.665 22.551 90.058 22.551 cv
cp
f
55.78 12.09 mo
55.78 11.669 li
51.93 11.669 li
51.93 12.09 li
55.78 12.09 li
cp
56.132 14.595 mo
55.994 14.514 li
55.332 14.078 55.006 13.487 55.066 12.755 cv
55.099 12.551 li
52.548 12.551 li
52.551 12.572 li
52.683 13.38 52.369 14.029 51.667 14.5 cv
51.507 14.595 li
56.132 14.595 li
cp
57.229 15.306 mo
57.269 15.28 li
58.011 14.758 57.958 14.12 57.65 13.748 cv
57.313 13.342 56.605 13.174 55.953 13.861 cv
55.935 13.874 li
56.069 14.001 li
56.234 14.135 56.441 14.258 56.691 14.37 cv
56.728 14.387 56.761 14.413 56.784 14.446 cv
56.93 14.651 57.049 14.859 57.142 15.07 cv
57.229 15.306 li
cp
50.398 15.343 mo
50.499 15.07 li
50.591 14.859 50.71 14.651 50.856 14.446 cv
50.88 14.413 50.912 14.387 50.949 14.37 cv
51.199 14.258 51.406 14.135 51.571 14.001 cv
51.675 13.902 li
51.618 13.861 li
50.964 13.173 50.257 13.342 49.921 13.748 cv
49.614 14.117 49.562 14.759 50.301 15.28 cv
50.398 15.343 li
cp
56.862 15.698 mo
56.843 15.606 li
56.797 15.435 56.732 15.266 56.645 15.098 cv
56.62 15.055 li
51.02 15.055 li
50.995 15.098 li
50.909 15.266 50.843 15.435 50.797 15.606 cv
50.779 15.698 li
56.858 15.698 li
56.862 15.698 li
cp
52.185 18.204 mo
52.119 18.205 52.053 18.178 52.007 18.124 cv
51.851 17.942 51.69 17.741 51.57 17.508 cv
51.448 17.271 51.368 17.001 51.372 16.682 cv
51.374 16.555 51.478 16.453 51.605 16.454 cv
51.732 16.455 51.834 16.56 51.832 16.687 cv
51.83 16.922 51.887 17.118 51.979 17.297 cv
52.073 17.48 52.205 17.647 52.356 17.823 cv
52.439 17.92 52.428 18.066 52.331 18.148 cv
52.289 18.184 52.237 18.203 52.185 18.204 cv
cp
55.321 21.409 mo
55.257 21.327 li
54.855 20.787 54.718 20.233 54.936 19.569 cv
54.948 19.532 54.97 19.499 54.999 19.473 cv
55.982 18.563 56.581 17.713 56.812 16.926 cv
56.865 16.745 56.899 16.566 56.913 16.389 cv
56.919 16.146 li
56.858 16.158 li
50.754 16.158 li
50.722 16.151 li
50.728 16.389 li
50.742 16.566 50.776 16.745 50.829 16.926 cv
51.06 17.713 51.659 18.563 52.642 19.473 cv
52.67 19.499 52.692 19.532 52.704 19.569 cv
52.907 20.183 52.805 20.701 52.472 21.201 cv
52.318 21.409 li
55.321 21.409 li
cp
56.249 22.275 mo
56.249 21.869 li
51.461 21.869 li
51.461 22.275 li
56.249 22.275 li
cp
51.396 22.735 mo
51.305 22.735 51.215 22.709 51.142 22.654 cv
51.068 22.599 51.001 22.505 51.001 22.383 cv
51.001 21.761 li
51.001 21.639 51.069 21.545 51.142 21.49 cv
51.215 21.436 51.305 21.409 51.396 21.409 cv
51.714 21.409 li
51.733 21.38 li
52.263 20.83 52.443 20.377 52.3 19.825 cv
52.282 19.766 li
52.144 19.635 li
51.235 18.76 50.635 17.9 50.387 17.055 cv
50.287 16.712 50.246 16.374 50.264 16.043 cv
50.292 15.802 li
50.225 15.778 li
49.103 15.112 49.041 14.088 49.567 13.454 cv
50.085 12.829 51.113 12.661 51.952 13.544 cv
51.958 13.555 li
52.05 13.356 li
52.129 13.128 52.143 12.868 52.084 12.571 cv
52.079 12.551 li
51.835 12.551 li
51.636 12.551 51.47 12.395 51.47 12.196 cv
51.47 11.563 li
51.47 11.364 51.637 11.208 51.835 11.208 cv
55.876 11.208 li
56.071 11.208 56.241 11.361 56.241 11.563 cv
56.241 12.196 li
56.241 12.4 56.07 12.551 55.876 12.551 cv
55.565 12.551 li
55.524 12.801 li
55.508 13.023 55.536 13.222 55.607 13.401 cv
55.658 13.506 li
55.778 13.391 li
56.583 12.684 57.517 12.868 58.004 13.454 cv
58.499 14.05 58.476 14.985 57.544 15.649 cv
57.346 15.778 li
57.377 16.043 li
57.395 16.374 57.354 16.712 57.254 17.055 cv
57.006 17.9 56.405 18.76 55.497 19.635 cv
55.358 19.766 li
55.341 19.825 li
55.198 20.375 55.379 20.831 55.907 21.38 cv
55.93 21.409 li
56.316 21.409 li
56.405 21.409 56.496 21.436 56.569 21.49 cv
56.643 21.545 56.71 21.639 56.71 21.761 cv
56.71 22.383 li
56.71 22.506 56.642 22.6 56.569 22.654 cv
56.496 22.709 56.405 22.735 56.316 22.735 cv
51.396 22.735 li
cp
f
73.824 30.85 mo
73.699 30.848 73.601 30.744 73.603 30.619 cv
73.619 29.92 li
73.621 29.796 73.726 29.696 73.85 29.7 cv
73.975 29.702 74.074 29.806 74.071 29.931 cv
74.055 30.63 li
74.052 30.754 73.949 30.853 73.824 30.85 cv
cp
71.57 31.331 mo
71.505 31.329 71.441 31.3 71.397 31.246 cv
70.97 30.714 li
70.891 30.616 70.907 30.474 71.004 30.396 cv
71.101 30.317 71.244 30.333 71.322 30.43 cv
71.749 30.963 li
71.828 31.06 71.812 31.202 71.715 31.28 cv
71.673 31.314 71.621 31.331 71.57 31.331 cv
cp
75.906 31.472 mo
75.856 31.471 75.805 31.454 75.763 31.418 cv
75.669 31.337 75.657 31.194 75.739 31.099 cv
76.19 30.571 li
76.271 30.476 76.413 30.465 76.508 30.546 cv
76.603 30.627 76.614 30.77 76.533 30.865 cv
76.082 31.393 li
76.037 31.446 75.972 31.473 75.906 31.472 cv
cp
68.481 32.753 mo
68.356 32.753 68.255 32.652 68.255 32.527 cv
68.255 32.402 68.356 32.302 68.481 32.302 cv
69.729 32.302 li
69.853 32.302 69.954 32.402 69.954 32.527 cv
69.954 32.652 69.853 32.753 69.729 32.753 cv
68.481 32.753 li
cp
72.874 32.9 mo
72.75 32.9 72.649 32.799 72.649 32.674 cv
72.649 32.549 72.75 32.448 72.874 32.448 cv
74.664 32.448 li
74.788 32.448 74.89 32.549 74.89 32.674 cv
74.89 32.799 74.788 32.9 74.664 32.9 cv
72.874 32.9 li
cp
77.161 34.504 mo
77.248 34.504 77.32 34.432 77.32 34.344 cv
77.32 34.257 77.248 34.184 77.161 34.184 cv
77.073 34.184 77.001 34.257 77.001 34.344 cv
77.001 34.432 77.073 34.504 77.161 34.504 cv
cp
77.161 34.955 mo
76.823 34.955 76.549 34.682 76.549 34.344 cv
76.549 34.007 76.823 33.732 77.161 33.732 cv
77.498 33.732 77.772 34.007 77.772 34.344 cv
77.772 34.681 77.498 34.955 77.161 34.955 cv
cp
72.435 36.291 mo
72.42 36.29 72.405 36.287 72.39 36.282 cv
72.269 36.245 72.2 36.116 72.237 35.994 cv
72.32 35.724 72.446 35.48 72.642 35.301 cv
72.843 35.117 73.099 35.018 73.41 35.015 cv
73.536 35.013 73.641 35.115 73.642 35.242 cv
73.644 35.369 73.542 35.473 73.415 35.475 cv
73.208 35.477 73.062 35.54 72.953 35.64 cv
72.839 35.745 72.746 35.906 72.677 36.129 cv
72.645 36.236 72.542 36.302 72.435 36.291 cv
cp
73.784 38.381 mo
74.878 38.381 75.766 37.493 75.766 36.399 cv
75.766 35.305 74.878 34.417 73.784 34.417 cv
72.69 34.417 71.802 35.305 71.802 36.399 cv
71.802 37.493 72.69 38.381 73.784 38.381 cv
cp
73.784 38.833 mo
72.44 38.833 71.35 37.743 71.35 36.399 cv
71.35 35.056 72.44 33.965 73.784 33.965 cv
75.128 33.965 76.218 35.056 76.218 36.399 cv
76.218 37.743 75.128 38.833 73.784 38.833 cv
cp
77.4 39.385 mo
77.58 39.353 li
77.986 39.252 78.132 39.008 78.092 38.587 cv
78.091 38.58 78.091 38.572 78.091 38.565 cv
78.091 34.586 li
78.068 33.975 77.869 33.635 77.474 33.508 cv
77.303 33.469 li
76.004 33.469 li
75.911 33.469 75.827 33.412 75.793 33.326 cv
75.3 32.075 li
72.25 32.075 li
71.544 33.421 li
71.504 33.496 71.427 33.543 71.343 33.543 cv
70.579 33.543 li
70.579 39.385 li
77.4 39.385 li
cp
70.126 39.385 mo
70.126 33.543 li
69.716 33.543 li
69.716 39.385 li
70.126 39.385 li
cp
69.264 39.385 mo
69.264 33.543 li
68.627 33.543 li
68.483 33.567 li
68.197 33.632 68.028 33.777 67.972 34.047 cv
67.954 34.188 li
67.954 38.584 li
67.954 39.198 68.295 39.394 68.605 39.385 cv
69.264 39.385 li
cp
68.612 39.837 mo
68.036 39.853 67.502 39.435 67.502 38.584 cv
67.502 34.179 li
67.502 34.176 67.502 34.168 67.503 34.165 cv
67.544 33.484 67.984 33.165 68.581 33.092 cv
68.591 33.091 68.6 33.09 68.609 33.09 cv
71.207 33.09 li
71.912 31.743 li
71.952 31.669 72.029 31.622 72.113 31.622 cv
75.454 31.622 li
75.546 31.622 75.63 31.679 75.664 31.766 cv
76.157 33.017 li
77.326 33.017 li
77.336 33.017 77.347 33.018 77.358 33.02 cv
78.156 33.137 78.512 33.737 78.543 34.578 cv
78.542 38.565 li
78.547 38.809 li
78.51 39.397 78.123 39.751 77.445 39.835 cv
77.436 39.836 77.427 39.837 77.417 39.837 cv
68.612 39.837 li
cp
f
37.688 32.171 mo
37.804 32.171 37.914 32.135 37.999 32.072 cv
38.04 32.041 38.077 32.003 38.107 31.956 cv
38.133 31.888 li
37.216 31.888 li
37.247 31.956 li
37.353 32.107 37.525 32.173 37.688 32.171 cv
cp
36.178 32.171 mo
36.306 32.171 36.427 32.133 36.52 32.068 cv
36.565 32.037 36.604 31.998 36.635 31.951 cv
36.661 31.888 li
35.666 31.888 li
35.695 31.949 li
35.731 31.998 35.775 32.039 35.824 32.071 cv
35.924 32.138 36.05 32.173 36.178 32.171 cv
cp
34.416 32.171 mo
34.544 32.171 34.665 32.133 34.758 32.068 cv
34.803 32.037 34.842 31.998 34.873 31.951 cv
34.903 31.877 li
33.899 31.877 li
33.933 31.949 li
33.97 31.998 34.013 32.039 34.062 32.071 cv
34.163 32.138 34.288 32.173 34.416 32.171 cv
cp
32.708 32.171 mo
32.836 32.171 32.957 32.133 33.05 32.068 cv
33.095 32.037 33.134 31.998 33.165 31.951 cv
33.191 31.888 li
32.196 31.888 li
32.225 31.949 li
32.261 31.998 32.305 32.039 32.354 32.071 cv
32.454 32.138 32.58 32.173 32.708 32.171 cv
cp
31.075 32.171 mo
31.204 32.171 31.324 32.133 31.417 32.068 cv
31.462 32.037 31.501 31.998 31.533 31.951 cv
31.559 31.888 li
30.564 31.888 li
30.592 31.949 li
30.629 31.998 30.673 32.039 30.722 32.071 cv
30.822 32.138 30.948 32.173 31.075 32.171 cv
cp
31.779 35.431 mo
31.95 35.267 li
32.593 34.577 33.081 33.695 33.209 32.535 cv
33.211 32.506 li
33.175 32.527 li
33.127 32.55 33.077 32.569 33.026 32.585 cv
32.736 32.629 li
32.64 33.284 li
32.511 33.938 32.293 34.523 32.009 35.049 cv
31.779 35.431 li
cp
36.885 35.432 mo
36.811 35.316 li
36.353 34.56 36.036 33.675 35.934 32.631 cv
35.937 32.599 li
35.865 32.59 li
35.761 32.561 35.661 32.516 35.569 32.455 cv
35.453 32.362 li
35.463 32.534 li
35.59 33.694 36.078 34.576 36.721 35.266 cv
36.885 35.432 li
cp
31.085 35.628 mo
31.164 35.524 li
31.753 34.723 32.165 33.755 32.281 32.564 cv
32.285 32.549 li
32.243 32.534 li
32.193 32.512 32.145 32.485 32.1 32.455 cv
32.03 32.408 31.965 32.353 31.908 32.288 cv
31.881 32.254 li
31.865 32.275 li
31.811 32.341 31.75 32.397 31.682 32.445 cv
31.567 32.512 li
31.578 32.56 li
31.599 33.67 31.423 34.579 31.163 35.393 cv
31.085 35.628 li
cp
37.587 35.632 mo
37.51 35.401 li
37.25 34.591 37.074 33.687 37.095 32.583 cv
37.095 32.551 37.102 32.521 37.114 32.494 cv
37.132 32.47 li
37.101 32.451 li
37.056 32.42 37.014 32.385 36.974 32.345 cv
36.939 32.303 li
36.911 32.338 li
36.872 32.377 36.83 32.413 36.785 32.445 cv
36.696 32.507 36.598 32.553 36.496 32.585 cv
36.393 32.6 li
36.449 33.021 li
36.613 34.009 36.993 34.833 37.508 35.53 cv
37.587 35.632 li
cp
30.465 35.961 mo
30.565 35.714 li
30.857 34.923 31.08 34.072 31.114 33.028 cv
31.117 32.626 li
31.079 32.632 li
30.868 32.634 30.651 32.577 30.467 32.455 cv
30.465 32.453 li
30.465 35.961 li
cp
38.208 35.975 mo
38.208 32.482 li
38.14 32.524 li
38 32.595 37.845 32.631 37.692 32.632 cv
37.555 32.613 li
37.558 33.049 li
37.593 34.086 37.814 34.933 38.107 35.719 cv
38.208 35.975 li
cp
35.938 36.763 mo
35.856 36.763 35.778 36.718 35.737 36.641 cv
35.048 35.341 li
34.988 35.229 35.031 35.089 35.143 35.03 cv
35.256 34.97 35.395 35.013 35.455 35.125 cv
36.144 36.425 li
36.203 36.538 36.16 36.677 36.048 36.737 cv
36.013 36.755 35.975 36.764 35.938 36.763 cv
cp
32.686 36.763 mo
32.649 36.764 32.611 36.755 32.576 36.737 cv
32.464 36.677 32.421 36.538 32.481 36.425 cv
33.169 35.125 li
33.229 35.013 33.368 34.97 33.481 35.03 cv
33.593 35.089 33.636 35.229 33.576 35.341 cv
32.887 36.641 li
32.846 36.718 32.768 36.763 32.686 36.763 cv
cp
34.348 37.091 mo
34.221 37.091 34.118 36.987 34.119 36.86 cv
34.12 35.389 li
34.12 35.262 34.223 35.159 34.35 35.159 cv
34.477 35.159 34.58 35.263 34.58 35.39 cv
34.579 36.861 li
34.579 36.988 34.476 37.091 34.348 37.091 cv
cp
36.959 38.758 mo
36.994 38.747 li
37.046 38.737 37.101 38.731 37.157 38.731 cv
37.306 38.746 li
37.306 38.743 li
37.334 38.468 37.39 38.231 37.464 38.02 cv
37.571 37.757 li
37.371 37.976 li
37.2 38.202 37.058 38.459 36.959 38.756 cv
36.959 38.758 li
cp
31.71 38.765 mo
31.652 38.591 li
31.529 38.289 31.36 38.031 31.162 37.806 cv
31.084 37.726 li
31.144 37.851 li
31.241 38.08 31.317 38.341 31.356 38.652 cv
31.365 38.742 li
31.409 38.735 li
31.436 38.732 31.464 38.731 31.492 38.731 cv
31.547 38.731 31.601 38.737 31.654 38.747 cv
31.71 38.765 li
cp
38.208 39.485 mo
38.208 37.565 li
38.097 37.744 li
37.952 37.995 37.837 38.277 37.782 38.645 cv
37.752 38.998 li
37.824 39.086 li
37.882 39.172 37.924 39.27 37.946 39.374 cv
37.957 39.485 li
38.208 39.485 li
cp
30.694 39.485 mo
30.722 39.297 li
30.745 39.221 30.78 39.151 30.823 39.086 cv
30.921 38.968 li
30.916 38.876 li
30.887 38.472 30.791 38.165 30.659 37.899 cv
30.465 37.569 li
30.465 39.485 li
30.694 39.485 li
cp
37.157 39.882 mo
37.347 39.882 37.502 39.727 37.502 39.537 cv
37.502 39.346 37.347 39.191 37.157 39.191 cv
36.966 39.191 36.811 39.346 36.811 39.537 cv
36.811 39.727 36.966 39.882 37.157 39.882 cv
cp
35.244 39.882 mo
35.434 39.882 35.589 39.727 35.589 39.537 cv
35.589 39.346 35.434 39.191 35.244 39.191 cv
35.053 39.191 34.899 39.346 34.899 39.537 cv
34.899 39.727 35.053 39.882 35.244 39.882 cv
cp
33.379 39.882 mo
33.57 39.882 33.725 39.727 33.725 39.537 cv
33.725 39.346 33.57 39.191 33.379 39.191 cv
33.189 39.191 33.034 39.346 33.034 39.537 cv
33.034 39.727 33.189 39.882 33.379 39.882 cv
cp
31.492 39.882 mo
31.682 39.882 31.837 39.727 31.837 39.537 cv
31.837 39.346 31.682 39.191 31.492 39.191 cv
31.301 39.191 31.146 39.346 31.146 39.537 cv
31.146 39.727 31.301 39.882 31.492 39.882 cv
cp
36.239 40.702 mo
36.24 40.7 li
36.247 40.686 36.256 40.673 36.266 40.661 cv
36.406 40.494 36.554 40.36 36.711 40.268 cv
36.769 40.243 li
36.615 40.133 li
36.567 40.09 36.524 40.041 36.488 39.987 cv
36.439 39.895 li
36.412 39.878 li
36.371 39.835 36.345 39.777 36.346 39.713 cv
36.356 39.586 li
36.351 39.537 li
36.351 39.481 36.356 39.427 36.367 39.374 cv
36.373 39.354 li
36.385 39.197 li
36.55 38.056 37.203 37.346 37.904 36.848 cv
37.938 36.825 li
37.654 36.642 li
36.42 35.815 35.239 34.587 35.01 32.626 cv
34.997 32.46 li
34.883 32.527 li
34.738 32.596 34.578 32.631 34.42 32.632 cv
34.209 32.634 33.992 32.577 33.808 32.455 cv
33.684 32.357 li
33.662 32.627 li
33.433 34.589 32.251 35.817 31.018 36.642 cv
30.734 36.825 li
30.769 36.848 li
31.57 37.419 32.308 38.265 32.326 39.713 cv
32.327 39.777 32.302 39.835 32.26 39.878 cv
32.195 39.922 li
32.159 39.987 li
32.123 40.041 32.081 40.09 32.033 40.133 cv
31.899 40.228 li
32 40.273 li
32.156 40.365 32.303 40.496 32.442 40.659 cv
32.45 40.67 li
32.455 40.661 li
32.595 40.494 32.743 40.36 32.9 40.268 cv
32.981 40.233 li
32.929 40.205 li
32.714 40.06 32.574 39.815 32.574 39.537 cv
32.574 39.092 32.935 38.731 33.379 38.731 cv
33.824 38.731 34.185 39.092 34.185 39.537 cv
34.185 39.815 34.044 40.06 33.83 40.205 cv
33.794 40.224 li
33.903 40.273 li
34.04 40.353 34.169 40.464 34.293 40.6 cv
34.333 40.646 li
34.373 40.601 li
34.496 40.462 34.627 40.349 34.764 40.268 cv
34.846 40.233 li
34.793 40.205 li
34.579 40.06 34.438 39.815 34.438 39.537 cv
34.438 39.092 34.799 38.731 35.244 38.731 cv
35.689 38.731 36.049 39.092 36.049 39.537 cv
36.049 39.815 35.908 40.06 35.694 40.205 cv
35.658 40.224 li
35.768 40.273 li
35.924 40.365 36.071 40.496 36.21 40.659 cv
36.22 40.671 36.229 40.684 36.236 40.697 cv
36.239 40.702 li
cp
30.726 41.039 mo
30.675 41.039 30.623 41.021 30.581 40.985 cv
30.483 40.903 30.471 40.758 30.552 40.661 cv
30.692 40.494 30.839 40.36 30.997 40.268 cv
31.085 40.23 li
30.95 40.133 li
30.902 40.09 30.859 40.041 30.823 39.987 cv
30.801 39.946 li
30.234 39.946 li
30.108 39.946 30.004 39.842 30.004 39.715 cv
30.004 31.658 li
30.004 31.563 30.062 31.481 30.145 31.446 cv
30.166 31.441 li
30.176 31.435 li
30.203 31.424 30.234 31.417 30.266 31.417 cv
38.416 31.417 li
38.448 31.417 38.478 31.424 38.505 31.435 cv
38.519 31.444 li
38.528 31.446 li
38.61 31.481 38.669 31.563 38.669 31.658 cv
38.669 39.715 li
38.669 39.842 38.565 39.946 38.438 39.946 cv
37.847 39.946 li
37.824 39.987 li
37.788 40.041 37.746 40.09 37.698 40.133 cv
37.583 40.215 li
37.714 40.273 li
37.87 40.365 38.017 40.496 38.156 40.659 cv
38.239 40.756 38.228 40.901 38.132 40.983 cv
38.035 41.066 37.89 41.055 37.807 40.959 cv
37.69 40.822 37.58 40.728 37.48 40.669 cv
37.38 40.61 37.292 40.586 37.21 40.585 cv
37.129 40.585 37.042 40.608 36.944 40.665 cv
36.844 40.724 36.736 40.818 36.619 40.957 cv
36.573 41.012 36.507 41.04 36.441 41.039 cv
36.389 41.039 36.337 41.021 36.295 40.985 cv
36.282 40.975 36.271 40.964 36.262 40.952 cv
36.239 40.916 li
36.217 40.95 li
36.208 40.962 36.197 40.973 36.185 40.983 cv
36.089 41.066 35.944 41.055 35.861 40.959 cv
35.744 40.822 35.634 40.728 35.534 40.669 cv
35.434 40.61 35.345 40.586 35.264 40.585 cv
35.183 40.585 35.095 40.608 34.998 40.665 cv
34.898 40.724 34.789 40.818 34.673 40.957 cv
34.626 41.012 34.561 41.04 34.494 41.039 cv
34.443 41.039 34.391 41.021 34.348 40.985 cv
34.333 40.97 li
34.321 40.983 li
34.225 41.066 34.079 41.055 33.996 40.959 cv
33.879 40.822 33.77 40.728 33.669 40.669 cv
33.57 40.61 33.481 40.586 33.4 40.585 cv
33.319 40.585 33.231 40.608 33.133 40.665 cv
33.034 40.724 32.925 40.818 32.808 40.957 cv
32.762 41.012 32.696 41.04 32.63 41.039 cv
32.578 41.039 32.526 41.021 32.484 40.985 cv
32.472 40.975 32.461 40.964 32.451 40.952 cv
32.45 40.95 li
32.44 40.962 32.429 40.973 32.418 40.983 cv
32.321 41.066 32.176 41.055 32.093 40.959 cv
31.976 40.822 31.866 40.728 31.766 40.669 cv
31.666 40.61 31.578 40.586 31.496 40.585 cv
31.415 40.585 31.328 40.608 31.23 40.665 cv
31.13 40.724 31.022 40.818 30.905 40.957 cv
30.859 41.012 30.793 41.04 30.726 41.039 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (ADMIN) ()
%%Title: (culture and creative fine art icons.eps)
%%CreationDate: 1/30/2017 4:55 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&CKk"'Z7()ach#A1YTY/$K!TQcEX.d9M%`G$rGIPpLPq"?T'?7Drq9E9Od;<,PKZ5fSC>(tdtt,k<%:J9;Q1q,/mhp&T,hd0
%NcnLDs1ZmDWhlM-$"[:Dl$r]mo&WB:(W2H91`^3cV!H[k@p7]n<lXd3@k.e0<l]j!_r9#-`ah1KSt'oC#NNqJNE5fJr__uqIlDi@
%\)%Q)%`\N`XW6s<q_?FfRecM^F>/(rSfIH">IIHR;LQC*Y>/Q08-")`hL/NgN2Y"[l"OZYdY?hL?T_RBMi:d91]QFQE-HDE3pE8s
%`^cX:+R/Hc-.8:#j$%mI`,;qMr%fEZ[T8/FrNh,T.^N-QMEalQ>!QQ%[=/OO'?k#t5m%'cr.cER1Eud#'(Go^g%f"E>IIL(;`Pd9
%X&+PH"L`&Z'0f.8+O1]%R!E3T>4CYCnG&Z+3lK<B<RlqoV2g$A^JiS5".3mr#T:B/=k.PXmDSEM6?/a2GDEqmLB"j4H8Ou,%k$.h
%bELE"d3#X"C^#2eN.,bi0V#d:)P+n!P)'Lqr_LSh_h2('3r=P^55&Ye3W,@F]^/F;LSmut`s68(r&7fn9&H52*VT?E%mehN(UAKP
%4F0#:NJoL#.Z/-)b'%=n-h`P#=s;&$Zri9$`G-3;QcK4;TTEi^ODdP_>G$jt7n5M(@S7"T=Y_'o7bb=Y3na)r(KR9jMuQ-?O*Q^B
%5<U#.-0BpZdX>;TGh%)N#pnIng?st3TaOTq>`$=G']o=%]ZXYt!5Cr8B?+6l7!s8<NYt;V5kpuOGXgTgQ]6X(q!m<RI!3/GZnq^E
%5N\<Aa'6I4lf$cD4GfW?h-/_4(4h1j4:]-Wb=R0pBgaqYl1@Kd$U5dOlT#ikk\JD#@/BV!o#J!QeO3,^YkO3-)]js!$c8.r="%r+
%oT/j4(4O=-H_]KXQ[WbKRNs-uT"b.LRSd+GA$[9m9J]-;#768`^J\$LFEENGiqekfIuPiQcs[.aB;bmPPKr[T_k0f]g`N*tp82OZ
%p:j:DUOTik<W;K$q]rWPJTV>fWtXo&C>S>"*/o%grStT=TX?O845"D_*01UcoaALsP0._<$$-#Ccb_B,*3C;[IEn2%$)S)hb)Pui
%KhKV"/h/<!r1?q\C7+nQUF;db1'iAsB(KC...Fpteh7?ik3n(0j+Gb$@A[@?2WCqY%1\,^^Rq#+In;/-%Zn5Zg8Ofr[hGP:UK74U
%>mb].cKH[F#d)@XdHRkVS)_Cr0J$FtHi;tJ[STT,=d([Lif$p`=A):OS]_(_"'ajYpOcnE-EfWo)ZT+/U"54Ee-EGN4tX.E5O0C$
%>M!>Qbu(j4L,i,]>)0jbC[Q$]0JDEmd?(<B+R<,GXB51lP0nH5ds37@k%nt&+[\$4hYn#3j7qqE`;Q__Wn,YMLJLocqk*Cg,`?5M
%7oj<W\bXR$[&unoi<NC62FUKBT=<*8rug#+6`S/Gf!"[.D)5Z0]_qq9DVCK7(rZGTC2S'[s&g`B,1/m#S?F[oq(KmDW9>H88Kd]@
%&j?qt`r9*Ib]L.A=8Smm+teAUSe*#'!0.914T3CjN-P6,pFKLZJ+EDIC]<4H#=gMb;B/i'dFR"80[>d30_+^Edf7'Sk.dm[,2HXF
%FKdnG*cW[_]"SrL.Y!2f:4EK`J=l#fN_[=det8JfN.Z1-Q>j4c9`&&oi%-71%jujin0j<5:<2.[1r94^9m&9V)ZE>Z*K17#_sLfG
%VNg`,?_W-V,P4*S?`@S#RCLgnL:-i2MO)Ba4,)[D^JVq1)s,\?@as9r)#ht)pm%HMIkD$,\Pfs-gTRX]8Gh!MGc9dJ/ulpHIf]6:
%IoJgSSFjYSJiPZJ_dAb[ru9u&]mP;]If<Y@q./YqIf]BE+/$_O%Ru)cNuAf9eet0(rPc!jn:Op5%7e$W^GH(7d_CJ3VY^+\f'ct@
%mF/aUWZJ)99@PT]q>@=;^].3VIfG>UMDqnk<iLTKRMPaX<%9AhQ1=W>p":7U7O+Zegc;3JN*iUAq+Q8UHNFrDk4iaJ(ug#+?c/Om
%oA!])O2KpjIlgh;rsd2*s(u@[\(P'X9/9SE7T>X@H[/>A<r1GeSW%!HZaBt+#Il:<WK#EU1WR[S!B)U>`r4#&COeLY18`BVSK"FY
%NO%s3;.mK8rkU#)\?\\S*;?qOV\:-F:\L]AjiR$PeOOZuOeG?PlfGP*o%E9;oqHqV3eX'3+4kuA-na8pB;_k;Ea;J=%B\[inSlo;
%)',:hT^QbjO$JlW8cS#8\0&>/n9ZE;g5a;T(f&32q*t;4QJS/@ZOg8LPkjphU,C%VLn?$mO6@A8rDSGd*e[O"jeU#QfBj[Yej%i(
%Zr,42)jB7&E:VbfolBir;qtgFDiG5rVeP.[s6t-?4ZYZ@e[sM,M@kCrZ==JjEEg(E*'4diT=,+$KeQMi6E&/XiQ5Dl*]go0Q]pL=
%C1LI34$ATJoTMsKDMRi]p%h1jB<X8+0g<ll3+$eXr*LuQ-u-<gqV`7C>[JBKqsD"[_,c&KZ9&pGa-:KLUM*u'+")M:)MmuXrA^fP
%qS/$L9X1r<-)YSLqU:drra>cmGk5`aB9_QN/6>9G[I(JU*?Oj&5<%Y\6r3^W6_]pYWc%MSfg]fMnb+t?.T3o?)?*Nb08>7WU[@`L
%K--u%IfrEf<&pRr.X%HC0Z04nd!k`hI9N]0+!_'FTTQZ&'3/fq$ZK'G#I$^HE]P*,B5=4;8a=baPV,LAMkp<HdnqVFkC0-c01&0P
%8f-Ldo%J`&K7bG^Y@AU2"OLj\AZf&W%5&te17!C,dgiL^r^$QtE7*;ko*c*ua&/U^X5i)7U[5j[Tq>jU:5WQZgMh0A3tV)%2E(G?
%4P:cn?SH'!Y!3kt2SUWA*QQ'Mn^2&h4LdrXa054J[t`Wonu!1N0-Z`c26O&f1f[jYDV`mqCQ%]Y\+*KHC"YJtljfpmb&l@9Lga'Y
%8ZKld2UfbZ8tZ#,l,iqgGUrLAr_so9dp]$G%h?n<2!5K@AQRIDB*;0#$VprP'sQZkGe=3lVCcK:?_/NR/(t=pRM_Iq"UkbU+j2Q+
%C-/CgKG<$``4`6B>WF>h%EZe93rRN2R2ulu[-Q2H/H2`hc%\\IQ`LPsWlkM07:SU]b)CXrA+Mou/P(:eF,A>P3Z?Tp[5C"^d69`3
%SR-+J!6H>4iI'XCgSObqFFV_KPirpqN%%Nrg!>EOT8gIbdHP']eClo]JnC-#rUK=7IO@la_sR!>:5;l?58[\NjC]jXW7=rL9K_&o
%/`a-#ffqJu8E4[)7H5GrdL_nA[(\/#mH!o4ZV@g2'si4tQnBZIFN"UN#AK7.&*%Ehi98e'38XW`<SDi!;dRtMa2\igpS3b*M7D>O
%2?_Kk(\U<l=us7-(*3Ef#oaAhd(-Z5A%E8B;=#8jHR)JUkT?]c*@Cs6Gk3`.PCa/q?,ukWbp\!=`hJ:.Tt9(6qRs9tM71mo:Ljq*
%+#T;3q(`0'c1gD#)K#3N@W>57%"FjdD`Z]7+i%WuY5HDc]KJ@pm2fPDS6S%=DR#,_LGUaIG\;-f1CJeHk7c9A5FqD8rGfQo#EoXV
%bF^$tN/qGWT7S<G8+hD.H#hSij75E,4PB.]-R1TZJ&-_R3os,,K_EEL5Gj`*e&cPYqh`UqJp0:@Q9\30p0'oXVo_[<rI\OUp="]0
%rM6;<KB%U#mm#0!P\>#Xnj?Q?M,*(4^9j=-UmA:'%f45\clASF7hrh=C5?Z5+6mB-Fopj&ION"!N-'7u0Rf*A9)Rr;ZlVPQG5ff7
%e>VfO!h%J*5FAa+Q=qri+9*l$R,F`Q2?,5`Uc>mXdrN8,[+1e=r29^eQ:E[Wr'K\tZ<fag>Y[/k@*KCUr'K\;P@$jcEcTPeg,V4]
%C`iRCqba*Jaj0\FLT1m5SXaQY0rZejXcllChhDA#i$g#+)M,m(UJ=&<*"@,hi5PJ2.PU7b)11of)1mN]l8e\I[0$I%qRM1ola`DP
%A.S+\%"Hc1OD9"I:5#C`?elb>d[Nkk0%0^u5416j*6?u*aX60ZHh9a5P]ZYo28DWeH$V%>4W!d.SWMVt5=lb@]H<II^8(\<L%.S\
%a2`fSBcKfdntYWn'\d7b0Qpo_PI"a5[t!eaeRT`"5?[,DdJ/R/1>/7hr5/)Xa`bsi#!\8%9#QYR/6s'5L2$NT7sQ3;#K_G+eefBm
%-J/0rc=X!IB"/SBf_s94AUg6-I'^QWEM<&pr3J9:@5J$Y;t6RlM2>V_2EL\s80TANh[L'Fs.Qi$V];>s%3(d$fd4"qd[*_&Ep[d[
%+8j.Bhnt)+iFHSg;`6N;aFEc"dbb6BZ.2(mk$<Q\mL)iD]MAZ31E[KOBUm8r/;lUrs)DJ3m8lnQD6Wj4+f(b=+r>V0QhQ]RUn6j-
%p5$GaG:op?e(al49sf`4f\O(<Rr2>'F`mVfqJp^NSA<U"1`.#JPcF_7VqbW;2Y#7oNQH,nC<ek_"lVKG\0=\.qr`>e>g:MQO4%%F
%jN1OB,qmR7Ap8+:S(6Ht%P5EIG.W2&/8RFTq9j_9kDi`Z^A]P9I*fVj\\5;Zo5qF=DE_jF-Z?$YS::+ihMq2TVd]5Ul,Q$dqRa)I
%#BLE&a++$W8%ZJ(Fg^&>H=`u0Sprj9aa2FJ^]$b%^K=06hO?W7'Cj,>$%O[qh5B(]puCr:pt(IS\8lN_O>r]`K*:>nlVHCSif>Tk
%&A8$cYkApLRg?/FJ+G:Cl]h2+qnW^A#7)sZkNY&+R%FE=\!I!4\"3;0iAQ3>@keLtFI'+!i$tOkH1CCpr\G:=?$ce/mrq8L0<YJ6
%XI@\bMkuX4@nGV1#MnA"4+OL7>e9t.cM)VZd>rb\ZQf.P-4!Ld6KHC[_`GVdm`q`bJ(XMhGjkX_bA-1UXjsc>Np>H6W`H8UD(NI"
%IWG8#rKXE=[eK]tqcfD)Hs#48o'#Z0P;DkL>7K=#Y3BC+/2#8WpZ1V.H7DuLICN.&I4\e'n]0GTV9(l9+-1U4bGBFOjo+o$b4WHc
%4,^(6@WqMO3uY^"eIHf^ec#5q/A>GZ`7C?IJ[Sn_Jk3s(nW.0[Y<;V#nb])GGif3PdJB4)AaMq2YX>*eH+nRUX,kRfio/%lpFhh>
%Cu:df\UT$.,=h?rh=$sP=7>M5^-=Q*HhH@?8,IF?s2Oc?Hf*_?<XO\`af^9/!Tg$^[cdA!0-?3ucQ:kfYdSH:PJQSQkk:bjMt`k;
%`4bV`#B''\n%gf\/tEINpuD5Mj!X654/Wb4X`X41`q&9"HUlo>mP\<<EJGY)FB4/EGMW5l3tGB[h0AX1s8%qM7I:RLLf[OQ4MA:K
%nnA"$<d!eGq8p8%S_0Rl(0?g=o+.m;gM9k7\Wqeo#AWA9>i'MhqT4b$Sda2gidUY*"(gWjj&gJC]Y&O@hHO6q06\HiMojE,^$_/f
%A\Z`_=l!6WW)cuk5.rc.Z.u+(TJ6DnSm;n#mFaJpZtHfhI;?;nhrlK$PA\!\p[K\O3l;uHE:q[RHf<Z4n*R/7_Gq:nlJ7h\8+6@'
%J7]nIO+$\VIC"%"Gjf0Of>FL4&G#O"HY2]pNV;_HeS"8BEcJ..fu6fNGC(@5S@>]WW#iD1miHji0APG)\$&!+fkE*'T35l8Hi<b_
%Hg0ShDsbj$dR*j-mc\i+3o"u:(+4"P<jS]jg?S$iD4A(?O5'B^m,tej?RBW>n#:&W#Pq<p`iJgrp<CDR\uC+)mYu#>\at'ZIJ<F%
%h=eN,Z.NBnEHS\Fr@n,FI=H-TWVp5bqn;]ubJt^ZC[9$Im3bP>bO&X9nsB'V]8I'aNB+W%I_N3PC2^7<ea6GggK3doBA[=TDo^Jt
%\)2\G]a)N(I/D'o5<hC-f`(`q>\e8kI^.S_IX?IA]sE-bfA;FO8:,ihHIP-kna:aN]\[qdr]YSu]mY3$5+62hp!75^O&qpubcT+7
%c-5XiI5S@`]j&`4SQu.T;a'O*S5J;1@4Z$1I(Son`]q'j5BHG9dDqY:=8KC<mS2PdTBYdWfUR6Vq2(\Gqm:N#e,/oRI:dp)WLeBT
%nGHt^e`lCd1[h>7ki;6MbflEup6V2L_cZQVbr%L;H5-`+c5qJ(3Ss7@:sA0h=*Ab!F)ku<:>als>o7FlR9eORO(O)lk@`&0>+G8@
%rKGo=?Z5AVhL"e[rTrgUa6U'm2QI(h]f5htB/`"<f<[-Fh-QOu2nO$?p/<rBRI+qb-aU_Hc,84Qo#\@Cbj<`8mb[<Ph"'m0RJ"0R
%Q`aTZmTs)pr,D+&Fn<_a9;_[Qn5B&Vjnkl9:QF1r\uXi5V+59Gl-e&"2s/PHCF?SE^$4<sGj48]f,L(Q2eG9Zg3NO*n'_3ePI!p&
%V[kkUgGdGra'p[I]m\JD]QeV]j(7b^IrsA8/h^PFoka'AjcsRnoCBf4kBiPf5.S@GH.-p(?%+_RqY'LCKDk8*\%dphj_nM?DHoB^
%)'$r0\,1L>b5V,+\^'!hnXObY2s5'pL_"S$7a(D.R(8"GoolqaDtf=T?Huig4nnsO_l^Iu2:?QX6h=aSB_>)4mVHUrc'>i'2bR5<
%L=b<hdB>cWY2"DRoAc+$-Y%R9D1-L&b/VI`GH\Xsbo^<gI(&eAb)UnZGic0=p>sH]rk5q:%BnQth4F*%KX^P2fGjFk^\Q@Sq[[SY
%SUVQ#jS[2rc+3Y2+8^]dmDm8\q1FsTcC_7%R9@&*1)qiMmk/K/\6eXL_VNNcSV;jV=&0Si3r@Y>D]a2\/:8JIT.Grh]S'`0^)qT@
%p%%DB`N,Q?&$o@)Vq(6;mlo1s=!+D7_lM,H`r2t,`l$,([gr6VYO7H8ICOSarpjK;@:AoZU@dJ!M`2a&Cb;f=X`bJP?!BHoI.R!t
%A?e@?Ed@30;r:_?STt6u'X#]1R9d?M+07W;G&(giiS+6o#GZ)#K9Ou(mlkTeCP/hUrjBYGrARA*7kaV'Q7h&t>]MchQC!o0I=JTq
%jBuW5o\+[l94'otH+LB?H*Oi#[emf(/?XAFg9G^'#G$3ga&#Imam8a]S_(PZQTG'mY9%fr*ZlD-T6[MU?!hpJ@dCV_Si,-3B9,5`
%?b^T\Y.oJZq"+/,Nop34NR(hZr;?,f9"g\LYO7kYKBi!k`bb<oGP+\<oj!pM-l+?dYKcfN0g\!,\1VZ;0'nG&Ie?[Q)ETCV7!C2B
%*c8QUQbSTIV7_4f;;N2J5EJ[PTARc"=$$rSp2JL&n%IC)C128V86NXq<HZR<=),XT4BA)kV0hK3DqF<C2sV$@6=2tE0'_3#gmiik
%DK/.\]mApB&)UYRd3n5-M-8WKH>:;92e*nP]9gdClg"pjYd@W&n(4^'HhH[H?0fJ]8+sdAohG>S`T@uKFYJ;Q^P@#Smcm;Z?!,a.
%!&NEJcVNE/f6?;igRaA-\s$uuCn@fEn[BQ&3qc@\/)%bQF7YeA4h:;=bc]ie5n9N'KU'+"a5Qjm]j'I]n5:8%rmnIr=%D_Nhmi2a
%VB+4=h1mrG%JPm$N*b@INQ'\co]0D-;g0<I\@K1sjlGRIePElJgM\-?\Tuo4hV>-nB?dQ*h/B&m)gd4F>CHNkiR[aopKqhlh0mng
%IHTnh_X2"7]ts(hY:i&LIJh`r44bN;RG>?d](P=5ZR8i+mX0<['L^m)n`Y5cma>!Ws6cFjP>?DSO*_giq[]j3hOPY\_nGC%&$Okp
%G3[5`c2#QMHeX>Qa33krTD"UOs2/OGrq<t[jYseiG*]mKl0k`Z\[DHS,s4CR>^:?p9iaH]4If\;SdZBE1#:-]X/`c_H[!&jVl,Tf
%4'N5&Y?lO%[_:tWT:N&I?LMu:5J>`S?9S;aFS#M)\N?S`/,nhNrDt)qbP+M.&)TO[o&e]KK:CKe_LlL=rDsN<ek]'_[Vm_PIV>&F
%kD*g\c_-Y\T.UYG55`.)0R6WO-f%:n)jC4jDti\WH$"<(@!D"lb9qMbQ5:=NXhFQbkcT=A%k!DScK)=PGD<G^O#LG6I<rR#H?eVp
%r;)24-b%u_If1NE_*V+mUXS)4T=jLGrZ^<%Df>6io$uURlOVmE/r95eVftT\h5;o5NTAQ,.lZ5/(>\E8ZXnL`_m;:6p=Zdi>9?qu
%4&6sR>[RG7an60#B@k_Lhqu2S+nti>)f'X^So&j8rI"ISrFtH]\UQ<)H+k?^0?7Onmk!1H(\?6;WY]m02tu=>^OGpriNlUH2m3bT
%?>Vm=raK[7oD6>obP'0#`L$Sch-2NkDTo<!gcaKHH?FB"HM5n3LF5#e^#-Ksr70lic2H8Vo54$ol/%u/YBT-sIs\N+Z3ep#hCS-`
%]R'2+?_2O!fsu2(XaTj+gY;D?q3u;HpR_rP/UkCohQ;6Q[Irt:#O1-TqkK_V2thQAhnQgIA,Q>qr^-(+fK$M=iJH:er*fKoet%j0
%[g2;]h92Sf+$XW`htbe$e<u66I(K.?`n%%hcSp3C`\.kXBAL&'T@_idG<V)CeQ6*=Y?p&bZ8OAkQbhFi`NKYqmHeW_8F1j)r8DbE
%^U1HBZ%)N)lSne:pGOr,B58I4[r/q4f[tM`rH_shEcp]e^cso/*K(eOSqmo0nWUB[[_9-HD>X.%RVX([rie*+O"3$A\G^kfGgO/"
%@RiTX51j"foCd!5J*3EW<DosdY&DU6g"ek1\+eDDURQTLf+26W*UHQK,Q2W@k32WA)]qO>c[&udI^9uG[;VNV(D"8$n#kL'%s&!1
%qla(fh>YO*j8Qlsqp55W]/)0(S9]I+kO@?1c,7HFo"j@]/+_`BdJYTTj3ce2FaJM\F\]u<+/q3Z]raB*Nb,U^Hb?WZjm2G]Z2HWt
%oA+o0A%o]\ld&8YW\^1#l[4"Aq/Y"K4B]2,'E5a.[;SGK/e<!VZrZ^51G,PZ:.K%P:4(B>c08_SRn)W^!6]/IrSN?*cON]?`s9ND
%F!l7Y+,;94m8%"*LH%H[!qTfM+c6=DMU4jG["S''Bab+n!c2f@TDt;!e1IrPl5ei84u.6-Fe;`NX)X7tWP?C$e:\Qi>'cHpEri%C
%+A;dT.sUqE?t/d6+V9/Uq(!$dVP8c5$T8.s9;l0ViYZ-TidBoD7CJaOX1#'W+($_37,_')IjJhJ0n$#>2Euq[V;Y9lO8__&PLKNl
%[.`HEiRrL#;E4.?>D]')^Np*D$-aN,W'/(0YR1GfFfZ9H`89r"Y:RVjlI>i"LH*sA6F;t3*>@2k&2>YJ`i)o@AI&QF*=29C3pTsT
%9V2rBY?OHh!:d*Fq$99$g[WQ76k9kQaIM+0.dq.^2$g#f@e(Fim*rRsIAF#%fKE;#l?h\5\IK48fKqX5j'5IG)GFts)!'/4[6jGa
%W3fVHASb6.LsRcPLlel!0a&Fi>U0;mMVQ!`5oi"fH`hg&C"EZSG]Y9?V-W.c1'ZLi$SL$SkdW4XPXsAJN/$u5;h8JhNg9eTLS2![
%8aSOK5WDLWfJB*AMi^s_K@E\#AOMTt:rk[fPVPPc[IFA\"HB`Z$rs*2<W#oP"fWbVPX2j=WXp;T&VPWH8<OiY7eDdlBl0Ccf&"s<
%@d=."KXG(>^nk%nd2r!JjUA&,N0-C\#m#'U6GZRd2<.;pTVJ>7GlgQ6+_)^0Pt=(Q&2XD"YU6hWNtEQp,EO].2_pVqI%sn4#AuSe
%rSh<1Fgq,s&i)?T<1,$sa\9ViQ9#p4Q!i"Z7LW<RQl8h77.6YmOsK&j"!,2J!Aum=0pY5(f>L5-C4Lk#7A*O`4AHS&"/UR!gXN(6
%<=9't,]_K2N$4=i/B5s?<c:RXSbL?-,r-Z2WZnusdZ]c,l7nJl;-D5H^]aC9W]Z(QG;V5lF:Iu/PGlC3W>R-G(-n#t.<W`o@&hSP
%?S/!07TW"t7E2i3S]1"d5)Ua?0Z6s#M?YJFRD)OHSE_)M1:/%BN57E&_;R2i_&._-Lbbl$845cH9V*pn8t4k7'g^qL/!D?B'SJoG
%6Q#)nVf\IUlF;FPL/N:7;;k2;=ddl0S&"I&l>aRo%ZZ:Tb+U%FlQn<[;^n'VW1h-rNBn=YDW[Rjk8J^2#$KO0K,1R..=t`<VIrM_
%$S3uoTq%U^7Im0MkskW]cD_t;foZ(kA5)F3Qs#gi<,n3R4$(NsCLnq$EI=-S5p!hIT*\Hi1M>[,,]XbnV.BdM;eJO*CYAc3cW.1%
%cZPLO:GJ9eO'G3b-73I9n6"jCr\J]"EUJWfj4mRdak_d6$AaTj0Yib4\X'eN@T6F?;86^-gBo_Qj-_X$)^>WB'qisKm,s20-KG2E
%/(EhfIE/c>G6VQ7N_W`U.hfT)V=HACq5Ns0[l&.*]B:ZrkinhicmH%F_]>-PWPQM@NIf2"F`j]M-I6g0?!Z&BFV\Ib=#.Gjj8o\t
%r**]eIoB\jeS`lUWinj]Xi_e]Ltn+::8\QJfuAi.)"7'PN_gieSqmV0.oK^SVD4fD(@Fa<Q[r+>7T`rWBOFil,FUU\:=lW$bESji
%AL<R$Oc-0S`'TIR740ncR6&j#d+eK3(se/_I>HqkLl3c;<h!-P)n7K@Ro4+pB<(OQ=+A+F[ZPQd'Y=Alc9XriN.HZl@j7kfS-'pR
%#YJ3T7F9MX-t7j^"M+]_'ENlaN$,3j$;c)>5RWO782+TcENj'OVB_mHqC;1>?t;+4%!NtI!?`U8\^Dq;KrtMO^okkJ-tCse7RU8X
%US=k$QmbBWr4n,IFbgS;^BduCW")52.B7GG(93/k0f$6M!Xop@J;L[o2Pa_//ueo)Kbc%s"K]Vc!6IJYSVU/",0%Zc:k6Qt<fu5E
%1cnR]TcKk)9Nh]VShNho@H-jd&e.N>VT1PFJ=7D"a$g[N(Zu&<W*DW$.`0.#^gm`ZL=fRi2lJKDesI>d2Qi+WE<;N[Y.1Lo^5TtP
%`#_B>!pZ`'%&Dq321/2iR04)]S.r$$"BNH/lPu4=@)%'E^_gm/_?cQ___O]=/3=I%iaM=H:hc%<Dh+fEX::>+`W75O/\![*,eM'h
%kh"L-?mPUAaFX"U)Hmmh<3T?'#@9DG#PCEgp]?@J)RD`_MucP%H:GCK=EBob^;</P'T#+%l@KVB&Sm"L53'S9GoL-S^_90s9E79!
%bZg9VWYUI)oosQ31k=ED\Z<AW76-V%+@?9+*;r`2_#],(id!@o.o9W,8s5c"<[<Wg,ZHgta8f4BXb3"WYRfghA+9f$P[Y3E>a0/<
%4_%=&EMWro@tis#*Z)geT@+\Hi5c"X+2EoHUbN8V/?W'YKSd5k@<@;liOB;0):=mfW4MY`;/fKSj!j:2+e\@I783gR#q^e`/M>d`
%Zh;*KW>hrEC+\[/a[r:9N!u"+aI!*c*^CIKSO>XJ*)LZTU,deoN^6X3_K'sC7HCn7?aOUU*q>dT>c;`!H4p-C:t8)a[N>*T7'"[L
%2H2UmScn'Y>U(.7^prkmW#)2>(TFDA[&/oUJkRtVZSY#dPFJ>?;_77>e:;805[+QGNaO@\#5]8)0*%bT6C2I[Y>%Q.V]BQ&XHhee
%!1]qe3hkbqi:K."q7)lMOKgXsJaSSl[JZ<Vfnf0t_UOjFZ:pjFJRQprlt<E&bP+jGG]#/@UStJY-Se:9d%*c;3(T\lk!rp-AXNF`
%IXp[*`V!1%SX[4-jH>^BXt@/&BJQc1<jJ/Z#j"2!pk->b,mWD[*8<fF`AIpo/?:Hi!=TH\K]<+6@-nELH0F'P<5kfgN;tKFk#\&U
%93?J+Z4JMN6'$Yl7)>fLWhbbVlpN=j1aCal2/a)g.?!<($IVaPO'p8mR4=kU9b]5pC6ZV.VQb.BK1H7k:^&"YR;bR!6BmU,J;#+7
%"+*HB],Kf_"pZHJH3GduNCoYXMtCEr<>?p8@=jFl,R%;Snkh\L=j\>m^#sP/$R6#FAj@5IXk:Oo!TNq_Eu6)6BK$(Y&rf.G0U<,Q
%*s\_p(lQ9d:-f1U)IRsHAp"qj[R4"*(SJDm)Ust?4?#7dpUFh-"L_GW8g62<Gj\R;^c&<W92l[f^rqW?MUZ:%1K#d3*.lTJ/?5,B
%iG""A3OT>hZP9tO_gpYrKVDo(CSIbgJ1B=-eeSE*K+iLi+mu<Pi]W:iOB55C2//#6>+sSe-rXp85:bKdW^;kEgf1ch72^I8BlPlS
%bnV*u3bC?fU-b^*30A$L>_%Eb^%8U/$*[1)8)ds..YUd[%_tN3;CJ$A;@*r`;^F,t,\Q,<C+_o>,rB>4&n$?[&h:3M1CD7Ge0L`.
%(SWm!ml[^O!a1SD&f=W3M[LK-/jtsN1hkK'%>K)%"@e[;*:5(YJ1=3*d],qGQ5X%eOQoZ9*`TYDj<giUP>h/"B.PSi+a?]s5C(G#
%)]+J;$K0(T;BGa?!/(.L4@VpjD<t]dic^O,g=QsHdWj3[?ud'fi!`!TG-hBNAT>2AWo.o%#kG&^Cr*D(A@R!#16%D;QPZmX%.p<_
%I@)>i6M\4!.p0#rWo!Q1Iq(uN`ETPfCs>4<,i4-,M3BY+Zs^F7&D">pBW^FA9u9;l&8BU!JTqkG=JSili#%#D)dmX6XV+lnYq:'R
%BElR=)4-th`W0ZiK^8p1D?QNkoT#>u,3)cW71bamn<$B82YiY)n-XX)+r/*s"&m=Q:3!+K_8q@m-?0AE5YKR5`cuUnoEn9^eWG@a
%d>a4fT"r*O1-!)1+k5CZnNl6[#pSA.@DWQX]`nZf:g?1G@Q5::\Ujs9^H!3@fVX>d+U1_'0IDD*q+S!m\]PeRX.1ocFbG^SWt[i)
%ZWg_sM".d5!/jX@&]ch)Lg8mW+Y.(6%lJ<Ujk:;;S'o$u_iR9Z<!8[ucj_*Ed80qL,,kV-_3LSQEKD1(T$pot[IKDGNUD63Hj2%5
%':^%+>>FQNT"m&>_?+cd7l<nioXLR)#X^tcM;b]Y]IZQr3V7$ZkZR^K02'faJ2*"uo-q227hC_9<J%#9/!?Z@>[t7_+\t:)0WsA.
%&n%HTHU3[Q#f9_u!`\4caV^)9?E\n\*t8k4#XTU8#^RLVC+\ADU<uAM910%QZ5*hbdoPBR%0:>7!Yj]AaV["=jd8BOQjOA[T\gRN
%*G[[cC>H7*KUsg?,'_.!=$C,%rD"RO*8]leToUl[GY?%TdsKe<<0"bEo#8A'jMX:e0c&jah:M]?E=4CV@.@b@m7*e-'/6e!jcGn_
%8I0i:+cpim_J6'6B^=B)HR",G,&s,T!>L\%Vr0`JW&a>U$BXj=P!i[aYt9!Bju&;*LaC=SA0uP%D6t5"O[cG^qAu1egs,th1YQjo
%kGD*?@h9>c09k9\_Z2#7eqW6f?k4\25^bDE&8e-M63V),YK"B=Lq0KN_77S9$)Hr[>WC=A*-Vm)YJEUk@@2V1S[`Gh?b"M"nk&5-
%F+$B"g]aC6Ad.F%(n;m!G&BK.;G\g$96>ZI6j8`tNO"g'huMBanPN:&+HQGZM;oQ\IXs0k-V^>uEEK+/#bj<m%oCg6<Dj6i4+UT+
%*3E=\'q^/Z1!!dta8@m]=0ubjT;"ZK$1$RPK.CX[,ePVC\j$iT>+Vi?]=,;8(JQss?nmoQ@$I]QHO\QsQnZ`LeRYlEIo(59*1p`W
%eWS0EWE$rg,8q5WX/Q)a:'XN#j3a4LCLFNhBo!&7:8?9ZR_RR(pqR6/0g/D7Cg6uFB5X=J(8-oF[R#jF]:T62fhM[\;Q3%c]B@nA
%=D<<^J.neF4)!49K^lRu9/SUYWRD^,eN6:!**-INZJe>I2D?H)=s-KY,u2qe($L_fJ@^UG6Z)Xt"^teML#W6?lRL1`E3,Di-]k.I
%3aF+P\=!`XQ,Wp^2B(O>?gG?-E/7>)!FTDC0LbDN_T8[VnVeplh4XhHBEE03K*/Cs9Uu/!A%p6[6)%/1*=,T+kt'KI7Mdu1:Z-c)
%^D_YN<2kT1GnN;?$H*!?:r%NVe>2mCW!tXDEfJ2S!6a!*Mjf&R8>j#+U2Epc%5-H!?jumIM$P.BW^3CCT;57"9?4M?G3A@.DPHT)
%14"Z"#dP"5d;TRL1JLTI##g(1#!&]i,JTYZb,<M-)OA:<D@i!gVQgFsSY34mE-[_a>,#d@Cp6`J&.deh/^OXK`8I2e'54a<Epai>
%j:eC_b<,/tB!/uH+PD'4_Vg[Y+\H]RM2VHOKd)DY1RZ'_JeLW%nqs`j!!&Lf(a/lW:BXTAnE@&Ofe]#[B+-N1fb8^2r"%(e+3:A$
%BE3gjaTu!])MoT,QH<OjQ8JlZR$_)#kX;+l#iqu0]/kM^@j*jZ%4:oX_[N@-RD"c3?K?Y1=.CS-_$*VV_LU`b\JA_--8;i>NU`HR
%a?];B*7$l"K=&#9ZB5,^Br1/"R&$FqJ7g-?-haG4+.O9NnAVG=[jm^UNm'rACspjAfi\V+aKD2k;4h#hFr#UmhNjd.e]=8rRQ=kt
%n[@AW@!nuD"<JUDjFr3/(gl7\QrJM8f$0R9-=DFih8uB/$)DJ3\k[cKFHs0K?nDQhK+1Xi(Xfdiq#;<%`27ls`Yc@\B"Wfi#WR4i
%jp6pZ3;VQ'>iNWBOn1fq,+C?pFfiH'Kj%Fn>587)QGVQ[2@+n-$GOB'>*1V8Ms3C7%[A9RKV_$m.bYh,"rrQk+'k^S\tW,3Ld=B3
%#_68Wdofhj36l'69FK-8%>$&@N'J(s`UjSkfc%FAq6cC"UC5#e8ejU3@06^-2o*d#'Z=sVO:ZC#+sQ5+<F#?6!oZ+`X=mFMRQ(:k
%/:<3dJ$AHn#L51$pgMGl?`ho$4BI(OclGJkUl;R'1;&Ik\;3C!#7uqjo$kK`UoDI/RkR"D3$g@Mo-$4E,5*g?[IdHs-%H%VgGI`$
%@g_.7cu>(@0ZI>6#ag[g\Vp-2M&SRn#lo8dSq82s=2K^;7r"J6Y[K$!jO&f)gC\6hX_9c9ArS[pESto9TPBAjYG`[G1a)l&miKON
%9FMi1N?BRTH&g#2Hc6ug%LZ$#r;]8o^Va$$'J56:EQA,$]`Q%#JOsVCpaTQ+6]B.H:)F"GGW\7i6&9cm5hkR#%]>+KY8<6YBPNVl
%*f\n#^-*!.XqhIB62OE-OIe1`.G21'(es2`#di6ei5J,=[1qEV6B"SpNT)M/1'UNC!Lm1e7E<X["C5UingN?/!"=isFGOGC36Fif
%e?*@cO9\:OXiF!^@_AD9c:F6AKC&YV)49m>GnsUE&>VRS@GFhRV,NN!OZ&&oTRN)-4ON["Qol^86*Kj!=p6g?iF61nN5PsHJ8OS3
%%O!W"M?6P4VMb#k<K4*QQlf@HJFmC*.Z9TB?iml?'c`0R<#0fT44r+*cPRj5Ugdc9\]^M+Uad;+J71%R8h\Q.!AN_gU$JtpaosIj
%<hk6."))C_R/hOJ0SsG$E7BVEHD#&6!"&cX=cOlKpZ)=,qiJ<X`3iFKIKYIM_#PW,^S9,2(dnWj6i]A:@h3j-\A&,5&+A?uF_,Q<
%fKIjQe/(sg_>S:?dejq:P'`T%*%Zc*/;S9[7(>GlAV.W$\^\Q@7BTV.E*'!6BT3F*&^;0[(^!AqFLYbq<<i<FS(r-S;K?dk-Tfh.
%e.;>DB3Qb3<)GYREkJ"R(n%rjNJ>6>Dpb)LXYQP&"V!*7:kTR/Y5q#RHn^Q*SO]L^R)MolUDB$"f)l'o4&,=OAjt9ipKYm_GA'#s
%#$(r/!_m=e'mRTp3>Kf!$8.#6@>?)Oj&$6[#a5T(@d];5@C7`P:eATMDNCS%'Q.e4_R,C\efIeBWMm'I*EJ(8n-Mu/.jgq!d:o3_
%&6N;#(Gqfc7@HW,MH4CY=fcN8>fF$gP)=t:if8`AV:J0@$PH2T'cuS`MC50t#^N/`DPeF0_!&S.TTY%me@!CNL`"^.cHCm?1s_Wt
%j&m,4g.'Lc#KfgB&F]T4ne7A:4EA7<dVs2\F`0OJ"j<()Tb#!b'R*(dKG?:Cd:OS1*"><q^ejo[N[gJhdHT_kVIW,3=?G!6D,S:e
%.cT*p3mE!e44<X*;`9t*Bi.M;C=tk2A(b5k8]t+jU/1=_4'\)3[\N'%'f9/4-/g,,7O<&.b>)S'En^RBPB\$AY=0Z!\O6nESHf=,
%9JL:T!IPe_cmllp&_B1t:3dU2atV7_iu)gf@7F/IY!W:+'W<B*"t^(+Je+Q-18d4\Lf),.JfN5%WY),6giT4a*?E"m[T3s-Ti@LX
%]!M'gkD6f.j$cedElN0B0r:1V^a+8h'IR:U-#i$&#35if#G3_%,06%JB_d=hZP;0pg;pk\]lcEfNQZA(U(XBDFVTs0SD<%SO((2l
%U/F\n.&mYk8cg>q,_gnT\%o3`o/91;j;AmH<T?u<6+k9n%RQUdQueO[d)ZC:&JRI&;$/TJTSp?N;RJX`02f2#MLrq"o";o?X6"'=
%Yc%]\M(UM:s2`,*+[dNSOfD))&.d>M=<]q+-saqB%bBG5Ch>Do-ss"8'1K"E<QNut@slhb1EqFpI"J5rC-JOt@Qjr*k`S_5LQ%YI
%BY(Ej!dmVO!Dr87ZgqM,E1o:OZ"trcZq=$3!:lNnNQc%!V/DmG\DIpkYRN$:T,N]r`$]C/(2R_HY$Wk_cbMCbR8hBWa,<N*.QSuI
%fPGTHiotDL(0@"I[p).rJ5$?0^toJqO`mDOJ^kU!Q$C1L`#71V&oZQea?'08PB^8(X'S0U+UDU^#NM)<W*3lflc?$DRh06XMEJet
%b[p5_hlK-G>D@93i,XIjJh!1!:cU"/ii/Y#%[MB-"($%[*8+5G0o5@"Ec#JU=^6,nLd2e^m<cD[#)2&&E!jSd[I]\'863<!SL3O5
%1aJ'%ATdRJK;E!38ehgbM1)1FbpRMq#ic6!RHiij@YOEX6I!Se6L9PbWUcKS;A5_R+39=iY,]S;j,%oJg;f(??)H9Bj^IIkUFq/8
%j?PAVj=J]A1;X>M&G/5QJOpk63pJ[pEWu\eJn1WV[!RO[4KWn"+U<s*W*qeiY/6_O3Y;WDdWuZE%_g=&;k.JV'gnu8ePUR,&%dQk
%3'\if4qF[p6)SFJ&Lgp8gXsY(Q&N$r#[1D!$-qKr?<(tX?(o:h<.TbXTrqnV/Ob/@S@[)];gdcB+_-as+]7,raIU0=5J2@NLiAWs
%Y42o)<.M@01:X:J(*p_M;YnP5@4JR,NeuWMhp)+lKkH%j;20^<$,1;t#h%-Z$AGl(,KRAOlnl<[_,gdt"XCM__-%J3QkH+/lU$DL
%5rM'<nhh7A3\?7&#,26gI/fQgE4n*UM]`GM<$$\JRO,uG)Al-HMc?qh0q9aOc\34]`GKu7K'c(d>#JlV:CCt5Q2%EL#!1%mO>%;#
%^l%,j,Rh.ZYJ=813"eMjiMbP97)oa3'H3^nX1aH+$k2A+aYKVN869Cf,=KP='![&u;`X,QL`(A,(sg$ua;D2?dO#ARoe:7s7?rI?
%pq6GLLfhZ408/7m6_,9/Tr+[-RDaeVG'#_H6aS\)0$<^m"Co4jJ4*lH!m$?>[&q.qR0cebAq9u,D^#J"A$99kQFn8q.2Lto&R\I:
%/odjNEYrWBUe1_+)_3cQK3`:mCcB@11Lmr,PXX"1;'O*;_BjB9l\Hq&Deh?!98Pt#V.S2<J"*Ad\=eiE]XUXk7poTDAfRTiP[))(
%olWtQk_a*WBOo42?o0Yc;k*p%e-0RUMSEa=R9fr?&1("5Lbd!0-/Cs"j?o\GELPCEoeNd[A1>o_CR.;gP=cJ1<R(Z:)C5bJ2HlZA
%>;Xae-Ee^6\qR!2;R]=/\mBA2ROZJZ0aNTUZ*OE4\*4n>2V`$q5gL@90d'&u]+YD:-RXKW\LlAE"bD,GnU`i/:h<<20k_pi#")m2
%=u@R.*XT[LoL]7jRtu&q;J?P_)g/%o8KHbD%aZB@*fk-Q5VJl*KE=c%NQ@(#d6@sH1jl/*Wu@HhStNCP$,^%UUqmXUR@Yrq.$4=4
%fZ[<uJUsY3-HK1Z,nek$DM5*uETpE2$n)L!1Bn!+j>(J+)^Z`nW$iMac'!o\-$*e2?!s`p;mm'mDGdkWC.DPCX?g`jN61Hb@$#"i
%DSK/E<+9a3WAZ0&``fYfN?cVn&<)02%U=0V&2hD$L_9;&WY)JoOba#T21.,n'Q)[sW)=cBA>#$XKRoea4<VIk<e*;i&uH^>"U=`r
%"M$9MC)i5,WOh[\9"(D1M^jJc`[<EF[Kb&f-s,jW*L9-ZK+g$1N6.m2qD&j118--HV+,R.RluL43(+0(GWNbP_&GB1+9^:aAO%IS
%m'n[Fa%\,kMBFT2"O?*/qAK^N(Wje(hB<'o6juN0_f.2fC_d;A!e\2kfi*eGK;#RRSY@YhYZ+&C'R:(p78`+dJr8_R8*>dRfN*]"
%iq=(:'Fc:_86miJ&`$E:Yo')7%Ll79/kOG@pa]XbJ@<lo60K#`,?,@o%-CiO:LPZg>bD'4(r4X%G^?6F!@\'SnVjk6.<8+9P6HZ!
%"-=23krSkI#L9)k5dnOn&(lgU-:f6^6*mpSJo+808k>''%=1AEWDDFb.'hmDdi:0"7pQRYYNf!+%3c'I*=;oA17Yj4jOXG^i9[$:
%>eu3F5aCH1",!pZ=^tnO#+^E(aT/nU&;*+e.[d,X8uRZs"->4YUJ6kJ$s-0P*XqVXOW:n]S,ghV6&kZ?1F^t4j)BQsl2oC5'[KR]
%U#>H;155cS#snkM`!`@H,0"Re_4YlJ=N6P\LGTE=67<m$,dVb);1#*)QJ8I=GGtRe!efl5aTesXkP76u*aJe-'1rpgX4:un^tk,H
%!))1DAF:(0QiN'o9Rr@[kB!F89$krQ?_6aSMJc[,X<<EUeL+)k!-F]QT:5Ve3H2,Z%&[g0>,-h^0c3cs7?)iJ:R_!f@]?07/^bnL
%[mcbZ;\ktB'>YUJ[`FY[DMnRK4=c:%8(C1p5.="Vm_sjOkG<^@ji..0o>.<j82uC`>eP3#VWP?]4CMu&4Ir$1e:a]tS/6+J0q9hT
%>fL<"'mScF!+?8L'_,k&2^M_'5M)"oJrFrH-(LW+_Qtm.-+q<]7%3AjTP4ZkZd`bu@.uU@(p6^cOML:+)`.`3DO;^7N(LlZm8?=,
%/.%GBV1pS(VFf@<MRftH.Tt>DX(5Ar/4m@>?k&QZW7S.L@$"m,E)UmWJ[ndX>2TI5LBWub%=t_Mc6VoB0pJ__N_WO2CZ64q8L8pP
%LWG.GW+==+q#]cS'"aq>On7Z[k:nuO_r''m*7@\'K6Lp;)[4pb+X82,"!.?=U6u`U<[`J.[<.LPEt'gbSiQi^J4Tm7V1W<+[l2U)
%!hBnOOMK5*&ZIlX(`a\Va",?TiL0pZ1a^"7Uj-iGQ_:$lQn^32_Z>h:i].>l'7s#lck5FZ!Va2,njELZHGBNQ?mASX0<`im"H07!
%?QAc#j*V9Eoek-;Ngg9]847^$TVQX^!![u3=?dggoUHm3"#6ZS@pmWJc>f'c910J2c%2"4THQ#A6k^(a-p2?A'J+.>;?TP-i'sff
%lY8`F5qBnZFplYoD!m6:GZ,>LE4"ZbU3(oZWK=ps8f=)p.=mLb,4"S%XQe=R%A*gl7VN:["geD45L@)cV!]'e'i]RhKc5LsJm4)W
%on9]/Y0n4"0UC2+eLZ5EUEV*_]/oNS@GhIG'8-6E\CF6Ah&&ebi_/Eq5#@1U5Y4$7%XJ[pc#@K2KWSf,7EV>S`I1HHWrOGffq!X+
%\<X'U[.=WKrc"'\JrPILi<>o8J^YN2m@>r\+]sK%q[6eHceP8s/tKL-M'.^<P=TXFUdSojJ8S9Q<[?nPDP\O&UF<2S->JKoN5G0[
%).b;DUF9Wr'I$i,J3?n0J\PD%/-EaE&66d0cep8l-\5J8!*^qk@W+kdNMKShKV;:$/aWSX]#<,)5!>c#'(M7ub^&*!Pt4jfMU!O^
%7[=spOiW5'MKIqo$FD6;bibihfcmMG<lY<b@NFcMC*ph'<C**a)fZA=pOL,5:-9a$/CN525]AbAaAWG'7[d7$M2IIA8ci]XAuG_>
%!,Y%I7E$"Z=c;<1'XJQFVb"-p^lY78f"sBejeP>=/G#Y@CYjBc$FIcX9Nn"hS"rX!UGC/Z<Xkot.q.^7bN!?GR'ar(<6eZ)#,a%Z
%QD\GT_tV^1<ldeq@+ks`^sfY*kg4T<D$:9&b0q+aBP#Z*KpjLTEoKEN;9iC)J-4a:PcUZ@G&.G3Lf%XR8%=N'QVq3Q.6'MJL>Ga)
%[m&0l+de@D`bQt0:ICdu2P`M2^cErm`<T@1ScVlj-j$#Yc>!A[^*jR3:JW;p&N%J7?nDCA86IF!Le20.NX1B0,HN+4((dr9G7(NY
%C(11\2?6iJ@(;tBO!'9%Z[sSkdLQM9e,pmo6ZS&0/i57b2\[*n=[T)YP=-@I^0-7SH50O65V)VO$NMPnhp;\^GI:$KI$H)h7SU,s
%MUAHg[TFHn$KG`0'=DPk%dJa@r^)0D%M@aL&`nfL_E<u=nVs66nW^9?Oq$_535uGuVFrI4Opht63OQ'C*-G5!9ngD81B:?cg&_?b
%'<jT=f,.:f*DhJ5T"IU.nG!V9C8KM#5Rd^VD5I'2O3=Ybk@+.eFJt7E_^gL2)Z`LL*?##/JY]W'.=5%OXRQu&FI&F7OE:s`Z,`%l
%o1oRt@t%;rCJ8IJ\6^P(>;:lY7q6$9]!-o`D%Q?6lj?&Ar)-<^\m:Nr;532*4'HfP<J#fFaeDI<dZbuBYVZf#iPKl?;AfWlGIU[a
%i<1ON;K4H+0(Xd/LT1Ld-VkV;H6J$(PCnhQN6;SS_\N?V0X?qjUhn39/Q(:.=L>7n.\Z.!6tU`6ONAltH!c@/cJ1O)K!<VGmB\?@
%Rl."$k&/^?;Xoi9GmekNWg'uC)_kLP679l":!KOYCbV,5KrrAICb7.Y:eB:@Kp>3G(<qJ8e3\ppN[68RA@EguJ_h&7OqoH&GM2-o
%q5:N#OB9)\RYG(0Y[n-:39s/"q2@U67PflD`C;dq*1m(<9kK1_Cj_m&@s^P9+u<a]n0O75[lk<j1EAiCP)!RRqQ0L7A!55]!Z,Gq
%?Bf/];ZR`7M$'?\@Y4`3JL[=/d\]'2cQO>u>*m]Y9I9SUQ4lGe9rOp:Hu7pY#4Cp`p3gC5,\]`>.=$AspKlNu+E6>faj?&:@&G\(
%3Os*&YJT?8o*Abr6)cR.[+<8Rm+B7Z<@n+-Y"Sk23j)LkOrqJ!:-f,M?s2nr*d#uk&emSsME1?c;[k&;E2u"gWGG"3>>W<8go$Cn
%)k$SoZne4[:P'bRXjeURJq=UN@O3_(=qWpDb-I=):k#Pj[$!aY-`NDF\Rh1I%Z4.92hh\(AX?8iQVAf"MRbHF825nD>-40SERN$i
%RaF0o*\dr,-OQ:H@2!\AAR4.Hc%q6/LCG]pHJB&^otWjofu:lS#:nm$TgNV_[.%nZqUh*dVd)Z[WO6n4HqG*3+,!e_^]5R$0?Xq1
%.,jG7"E;=X$tBRTMegA.#Z/X@#/^`)4:3BGdC(coE3[5h!QJ$N)M+S]6TgNHKZX3,?3d9g'KUVc)$a'tCQ^fA!ejl-##^llGT[0K
%JsHX>T[<ST5RM`sXW0m9h3s'6A^RM!8:b\JeH6+MX9VXrHP's7"hGs\atmsTB9@s@7i+Oe3GOFSLY%L%o;n^McN=EFk(Y!O;KJU!
%O9s?j3ma=V07\S-eE8NU8MMdFOpPlh/egB03'5)V3TO2^-[MjfAe_)E9"YaLFic,,9Z\0pTs3]WTjSZk5-p0KUa?\I29f=\Y);"U
%K&5:9M8ne=6/Ns`@po]q^uV^m(k\/4Ecr*rJ1)GBMW3X2<5]8K9TWN#S3;G"K/[5+!Qq"e/,?AqJXhD(<m[del^^kNG`lR)SV3m)
%=ftW?>"sT.03s]F2aA849VMjq";N4.KP":5APOd7CGDcs:-hb]I0#tl+_*p[!*Eq>WR6=@+AHL"4kWXY:1rVgKh,&@$L[#;<`VL!
%"mRDFG90i;(/(E<^*XjH!Xq"&\6+@B]BnI/5ir4*X:X`@;X?8!BXPWH1RoSiW_(&Q`KGf"9Zb\[X@VFr4WOCh/3&qiEXir0lrH*-
%2:ikM*[#Aa=-fgQ*%jX@6n=QCn=_&I;"FGBC^V(MH@Z1?^k"a]T"h:!SgDVo],6>/qo6"?]!e(3g)=7?323e'."ZLV,KO\?Q_SpS
%dZ,#pB#ZDQ?HmA,(U?0`"'!e;#R6^o*@^8MG!$(Na?>T3#bAPu.\b)"8$sXah]it;mX.u<]L0TMNs!;Qh#F<,PB\P-W?DX7Reg1$
%6Ub$H,si@J)JZjF!AXja('9.paAP:-/`hLZ3XZ"/m^"/MCe@Pi'T8D[`!:TV=;[q4^&.Q[!lg#ci0lOAJIq`m.Qo^](ru5",kSYN
%l-5l[#^F.YLDV_f&4:Aj6PL>c*6P[Z`'lc$W[LLo:o)]rnT9E8nWj<28eV3`m"uCF.AET5SM#^h8%X#-_c)Rl,n;K@OV@c2mfFZ"
%1S)[,A9a@`\`;F]hE^_S*X0<2+WM)O@O9Gq54IB+\8R'3qm\lo"A1>[0&]2*(_1QO!!>Ci9FqbgPs95>*%ANdg82<o'fQ2J#6Kj[
%Fs?rI4K$>?MU`QTRSObRklSVpCR54gBLHKljssU=!]h:Wb-\Qq^sd'QhAP[OPFgdP85?4jT.%!$?8#^q`(/pU/!Xq$,ZblB;2(*:
%@???S0T#f2J^H^BlJC&[Ao;aSSLH1L;c<C4.CB:l.#M5bmhIM\?3I"C&W<9k@N8e0KRrf4c>(_rP\Cf`V;Su`"rL`oo]?=k[)6#d
%54k3KemKs^@p1lC1R`"C[&lAh2l\`!l_td;p(U^]dICbk:f,^m]op=Qf,3R%AS(9Cm9F':XO`XOL?B.rh'g"Sb;>&`!HO#SVNnJ#
%UR?:2iF^oU_K@M^;-!<D@<*aD'<23aS8@gQ>c+P`g#D<qRCl74ZiQXgA.7#Ai_r6unJim3kS4Yq=(!M(n&"Xj]YJD3:LNp%%B$38
%]5+QHD8P@;3P<sLJC6?VmEjHaAChOP1ssq9jN*;A%B[i7@<0&;?ib;)"U8'YZ3.uJrJKd6AfV8e'I<b*cGTOl.YT+dKBM_:JkmQA
%E>u37WRCBm=W(<=ShWWY`i/C&S0@5<4tdl'%+m0(&fq?tl7t_>XJ\&DV4dk>R0L:f29hRM6W"sF(gI4Y`1(l>LrVT5"n=i9F@"'C
%)nh(o-Yu)]8Z.n!V)fTfR5d>-`(sP`;LqSD2__bb?B^hP_o1lO+V@M;9FBY`SO1\-WAX&iR9k2-*]Lt+&I-D_&ao0E#!/)3^]n(0
%aa,*5>:Z3YX;+6$aocJb.5grJlNA'B,3Ka>"EmL%@CU:#?#s&P:((-bAluQq<i!dT!FsejU(]tUpBP+POe3.2:pAoO'h+Qpfgt,W
%:V_l5RgR[GY:cN:C$N\9@8HF8fhc4ccI*#%^]_WD^_h0>!QG-LF=2>DJZNP8j)^/fBO344"F*?<k6'U6UD=;+cfRjQ(;83_Q93&H
%Nr+ehP=*<V/PE:PHBFr0iG2;Ah_W1%0l[!,etM7Z.W-e-1Q\FM:2ou`RMWhbi59"JFb*1]NE%u5TKM^oTu4p[!AGAiRquO@7FIa0
%7FiML'3F\'-YX+HIg!lsP+@/m$Qg0`#m2\p^sEHPMS?tk0*I,O`GOo1,Ri>5b&Ys]2[*R$W=_NPk_(B&WsoW\U]YBWHrGrqZ=/Gq
%#f0;/"b)S.Tkt)Y!M2V"<s6\<@LRu,o<:G#=E>?QftB9]6ZtK/DJO9XFW3B;OE/cdA?@Ap&k70T"6k)jmRP-EY6>[JoTU&k;*>nT
%VPg+=I3YXMat.,M04,G_pAVc6de%F8jFEh^T$t]Q.l.CL2M2k6S1T)H[$F`>C$/,+?Re'XM'ib0pc'@K'?#SO&FgSfY5gjJBVe9Q
%&o^[J[*fBL3[F[IB3*u''$TP`6R73)L5[;?Or+7ZU,*>bmg3YG1h]EY!nb/?o]QRd3%E&>VGLG3UX"Gg8rAl8%07Tk<jDE^'(KA_
%B-[#rel.,C+ilV%n@_4$AFpI3+=3Xhg/+$\!Bl.u'2OX[_P.YnH:s1V._@/n8f$'q_i4Y1W[:3`<BeF\o8#H8Ee^M/BW4NM3IMgc
%"U;ONT6)p#UHpL'0!Cp8>;1MO01=0\;G^(G$PXh5(-#)[<EU4`HNDRiV5&;_KtbI&j@#Q8_O%\C,[3J:oCR<ZPVtQs;??QE4Rab_
%SL==q$u\@O0#qCmR5/8o0%oaqVECsL?1PQN;^8P]8o$U?.epgg:$6d0Ie\W5"st?c'%tb_l*-$[1niL=Tgc@A8U1`g?QoW,A?RFV
%Oias6DoT%\(S!:/c2]Pihf$KTGIdo[&L:&P#RX6JJageCbPi]ODuck?=Z>hV/!r)>?5oL:;]Il\kS55`I)=Ag?XSEM7$-`Q"Z"Rj
%f*Y7(8!U)Mdi3Ck#T884'e1Z#^^*7`2!,5Z&@<qAMV]ZYd5"(8E&+#VU8cSWHCGsX_X#C(i<_3U\/t:1>R%1?/h\&i@]<EOLh3<H
%Wl'NFfKIgf=_pW(.<I"qNCY3Q"$Hq3XlPGD_9f1PqE87PBBSU^*_"95"$_p&11]uh3+?Oc]JZ(4-Oc?5E\hW.jp0/_U:Bo9\!u`e
%?rb3s1R&e.OB4c6IEc`eeMRCd\e6TsdPH<N?PU-2MnW8'@"HTWY0NchjdHM,+SU#qjM&nFT;H%ma42X82Ef==Ck6Z@%G.TjlNr(Q
%i3Ch^^*2!&h&S@B:j3b>7i8!i?NWj@[4l.n`U_3_'3LH"/C.9Xjj(N(]FPoJ>B$CeW_1R/MPFeC]/'"8%Y>=!?kp`!Xn^^VR$)<E
%im'mF#*(DJiB74[\\1<o$*AP:8!u.qrE)/hXNArXpf._&EHQiu/<#*qfWC"Va('>BF&O>h0KI!?7Ig/;8-;q5peI1_HL0Eb>Tm'(
%.7>[+;4VH_DH[Tt%ZC\Z5gk.,lA=EF!)P@?`[@>ei>?pS(djdMG-1j>&LVkHj[a^N?0+YRiB[cZg>bJDM*"eC\tiNI<Z!A?\IkKK
%#IM#%7WoCX?s"diZTq=ZnKE6XAbG3Li4P`3Ndt!+7d)7uCJY(B&kk/R2[p>24plEX'-6]_#:\_H<%EQb/-(.O[77t/b!f@`VCZD%
%oYInA_AN"8<3FLjq0W5WXMIkDN?NaKDWWg=QYaGpX4M.<=lSD&ZHe+p[?>4%Aq6F82$0CtXg>n,DF%J3fr-]8auXU0<$`knK;lX)
%6i<b8b\JD0fk-c]F0<f>7RP!O?rF*@5.sf\Yg6QR>%(BbS/8BfB%dNU<EB$8?fmd)Vtr*P)GGk8(hP,FQoRku%OB(nQ-146gf_F>
%,<B[u>*1PL6Q-e02jIri7^/%L+n+Aa?M&s1;/<+`5k@Q'rNt7U./F9W"([%AbXI?'L*em^L."S`,AM^UAH^%$DKt*q9j2aAA6cu%
%=);_'^+cK"V'h!\.<3=Tif]c^h+DeeW2ZI[7<;82p.udd%tM&I--&MMTb+44*,]A<.!-=_YNW)n9b/$"emZ.dK5FUHrnhh\rJZ+E
%63u*-&9%q]?:'2>/gLjUpe%ou(_d_CM?:]3Ym!83&Fe?`LgktV0`t]@Z/gTB3)J*i@m\=g[kRm%-ec?h#'i%#p.u"uf%5/V(1;n.
%K'3o>:l%A\b8:C^,_faLR:Jb,a+.i6).?1s#n>S_%2?,m1&<``iTH-$;K-:TJ_.LNKkCl=U]U$9@?_E6PJ3,d$$.3la[JdAT0^7;
%-RanLO=G3A(1=1&W^o\)@=W-_:DFFu,'rbX1KFNdP'RNlK.sh&+P`"L#[<<IBiQKr3TMO%*=F:5@8Gik%D[5)-4)u2UUpYPVo>N8
%P1N8WDPA0b$4ffa$G-eCp!@2P#Wr%RF2t(AXbLY47!T7k(c'_4+:,q^1C6J\JpC=r#]noT\.+9KLS:F"eV)nK9XFs*%,i/c&@+`"
%Tc@sJ9VK7o!&1SJNPdH6;)"`1d2D(I_o)G3l4M0p+ql&)c9uI#;./LEJoHhdUU<M+iSHs:_FJk&b/H,p7$ou(EIB<s;+\=.I[OjY
%=+'!fUI5Hu%4I0#DTNT`6G]]R;^b/32+L#b7685M`_&dejr5n&;Uj>W%8'>T0]E)MSAc:9\CeUU85cVKR&EL5TQc1VEb/7hoH<sl
%<FT2i@&P#W8LU@>;Se!?QqGsY.biE!"en!QWKC?Ii@u2Yg$@sDi2AG[SOuG5.Vss@']Ba<nQK!,ga+OJ)HEV9-)gT=RB+3J>q%fg
%_T\TaeLrD`pBBmeQ)H+VARm-XRZN+P,DPk.hDPF;;d?%Ral"Kc#.D\`)cdlCYKm;CdF;^JEK#%=#c1fZbAqQ"32lq_k?+^ZNEDCt
%F>.6/Kb]%c+Z*I;">8mlVU/k@&I(LJ1]p(<U2I#?L_VV:*!ld'JSGO2<1m5-JKXO$&%<.J7i85j*1"LV-%\"EbH+RZ()()Q;ZR/I
%cdf@qheT=uH`2^YnhQs?L,[p"L=;4fS97q#L%O"?18.6Ydk4s3pX*jr`20e*QQMdZfR<g9:V**(&-S6'$"YiJAG$I[RK2A?'OW[i
%&VX*94GFm8Jh+a;^f&,&K-=i2dbGGR0h+MK65k'O&S6#Q_bhI8bR's3;&Vi*luC:$ojI"a0Ff6nDrkqfi"\prdSgeEGa]ia.'Xg(
%(ip25!DSQpg]`^0aakP,U4GXQ<N$F&#Ao6Hk@jq7Veuq!6nCD0bSIW-19-_&$5<e3MOt=O"3\eV#ht^a)9%f.PIeg]:s!7B"dl/3
%7[90ZN?VM9U01O_);,qaQl6j]_N2Q'o#YmA!/3TSBO[AK'Mn+J\`%'c.I)]4PMs@An^n6WBo7itW>?ffYt<EPTpoEARjM"Kn-?a*
%R_e7H)PS3C^Ih)-TX#&5Y*l*q4t*!DIKg7[3&%2u-;C%_bZ1]2*hI3C$WW8HJlHKrOM_SYSP;F5?u,#/5VBk)'Orh$,^Anj:fTuM
%[($7+!-pa_oOp@UkYAE(U6F-qBHE=MU^M436*)fFGOTY\0oB-J0JmKrcBNq+[c#Z=&XJ0LI];n4KVJoAe+CqlesK/+H64h/XWm!d
%4!<Ht3l$V4OLQj)[*/]`(3paP\?+US&uaBM-TAK730oV%'EQ*D4JCVA'Sh*hm4Ei'dZF5B3l&7+LFgQ-V0+\j"D+9/RG^GTPQ_1!
%i3ZgSo_]?kDL!3m$8Z,4_1h9metb\s.*9#WE2FhTj<j1e[pbFY8OkNq+1J<r%/=iTP[(MeP,qa0L?8/=El6%[j`]_oG.M,Pej-QM
%.:-h*=H1&d\m[Un7+nf5U,1nce_EQl@5[Hh:Glt8k8G*P=@L,RgMGNJJ\"e'2`?MNZ&6^`5hTsDHa^@W4Y?gU]h[(URT)ZF.uFN8
%L3Ds-E,7B:p,c@t^DKZMX]&u9Wq+gg9WN%u?3AIB#XrEW8q_#aZAHapg.R[G<DJ8<\hR*tE(.;e?Yi0^BR-FZB[s17%/X8\NaU-F
%MBlGGi#$qm(Tr?G<Pbqol&lYiG*0)'4qJFN"aRQd\2&>9,nr4'YDEm`$5/e3d2(idZlr;Q<qcd&?M@GJqQ>1ZLWc+$2#A:/EhT-@
%B`C;``Cn%AgXBUD(oA:[QK2qe6'W7<KIM5\7L<ES5Z=k-W=$nO]Dtr#pE[IOpSFl)SXpUi7Am$eBUt'o5YO&=5jO$n$C"]:b=h9q
%!`#;X;:l#b-:Ufd.Cpf`@4o"9b(2ETlA*#ok'kIRldY+BhJK>4GgQ[7fehOlUXIoRLoN'mR?Xn!N`%H1T)EYcI*tgpXe_[D5h4p7
%P^7gThs[2gkPEr2]iT!MXW+D<LQh8]nJAa_MH#nn7.hiQO.VkoWg7<upuh&5!6'Gss7m2[RU9aAI8`<?eQVu+]FdT^,u]Si"+G<e
%U6u<`VU2WV;YY48k=85(8g8eGU%BCL>+C^%K]jh=1=QiH)La;0dbD"'$4Of@i:SFFmIITb.=oA>m#Y$laL%DABi1bKiJAD9@1&_7
%+Q^U1",;V0HHC*4R/@Gqj@6BO`2]ZLPd%G`T217@+6]/hckch-l,@kLOJfDtE2]e2)LDlZNR;D&R2LZ/6%QmI.RW[O_ODiP0EDUT
%!tItO0F7iZ+W(In[$EJSdgS(^Jr@7Wd$[><k_*o6^i_@,TjUkjYL)=!DtkT0cQq169!tOo$QOr1`_C(K<D'IDX">Yu6Lhs"hBf$u
%H3jWlK]3W\Or[2WQBjOMFFZmhNg-`7,Y.+9jdAf0ZoZ+rP0q)+eK`pRNO@j?3pf<:L;2d=#hi1oV3OK2*<IjkArcr,Tn*m[/ahkD
%*i>V7)kIM30StNo&SW#hJ8IRt"b!;XrTHsGE7s13)B#a:8Z)s35et_JXtlurP#lpNm@3NX!f4<qdG9jk8/*m(,en5rq$eg`Rue29
%<`AYC4[rSpeKF9dP2P9Xd%sc_`"T^]1d5K2I`I>O4'Ldp5oq;t>:q'VU1Pa390?o_C%)QA9qch5,`X_%7<`kL3\r($$."n+1pp4d
%<P%S?:LQZ<n]MZiV+S6_;m/s%jnZ"dD,S"@*%)^F_Xg*W?<AI9J0&FH,k3u#5+[=RlN>o5\5c.@37(s%=Rb[Z[WI<pdJ[ca%@bjH
%kVbkj2A1"G,guAMr&)j(.WRs6\JD.[J^"b[T#STYq(5N4kB*e!k6GGBZ),UhLZ1"`eId)`'q[r!$p)Hjr,)tXqJ#a#%@NfiJq;2/
%#&U*r`A30nUjM;>%6\c_m7[m=/s*UP.e1G68<6^s/O0U&Q%Y6%OmlRdRVjV9.O[>ZD=C[j"L1:NhZ5PW&MS%!)EP/90sm*AoFAIs
%0KF"Q]G,/s3b4$H5AnIN5!YdCX>+Au@h`e+ie&D?N][;tDE`@o(;Q$g5KChL<cdm'\l[@S+\RS%0g2fB-bK086:![lY`nNiK36L5
%#@%.XEuCMG*>\a1j1,2j"J(<?n&\cp#"f"<5;)-"oDl-T]\*pE;sS7XK>/Ig2V8F]ku$KJO%iq9^ngp>g6'aNU+9[4!tCg0Rfbo&
%^KkK>U9.N=8;.,"p\LOdRXu*E$&^?sqNL,6-3>#''JNNr^p$B$l"aZNY`Ag#M/Vmh`rVCQ8!XB*RDoAYBDWNT[MBibE`MD#@V'jm
%?1[;N*.rhtjF4omPqcqRO5^q/@6d)R-40#NWGH=4_!Ch(F,.-d#l*t4H7(,fOWk)'^tR8d`Y!l;iB;W[f.c-J<q]jMG>T=-MP0@r
%EX4r(0la!=8FK.GJ`XlcfV?;:os1b9>Y]9l!Y&3$Q,""`9iQ[[&r9q4C#35p1;"I(ctjk!i5^R[`t1Mm[g(HG:1LTHEDIiC5@>_X
%YQ>4t:'0TbTM3\\ZUP;3]`Oi`9Yp:!=,"R[T&N[QdO$+WD@G$8"@:oj>;'At1SSR2.j:?b7FO.+h!man/.Pi],'DV$i6rOqE+Hl5
%q[e9s"BS^>AY4(G1-h.A'N:5l-BV(u@b@]s&S3@7'qV9fL,@Rg4D3nh(A`,%&T4j51;nQ0YUKjA1u<93mns`g,l(F`^p$rIYsK"t
%lk!>46/Fd:.654FV\Yt+KL\sr0t\H9W)(ib'!*VQ.iF4\k5e.gg"&mRN)u@mAk&ZHK7<=^ZcVAMplQR*[mJ3-8g?H#18o'@3^M5l
%QR,?sD]_!0Wc?Z(9j@EUmV1X1=s8]DcpLWEr[?5<a&#a>lnCPNBU'3.2coq:*CTN#OLJKRBQ!>TWnje"%'6HqY#3.g0@Ie1(Mg6f
%"$2H$RB9519CpkqGEHhoW7Po@=7A,PTa&>c`OKt@Qi[JF_tBd;$L%GCjebS[;"-Q9@%>-!V0GE;c.6,T(Of]88)BoG+F,^/.pd#&
%1`ZdLK,/VCEOMVp!Y^<`$R&&"Qr*BY`mg3=jE=6TY_!D$8<N'k6QsI#!^HT2Ff%_5^cdEnQ-?;N1`,]!OHVbl>=[/=-W.'\ZL[oW
%).*XRN(VjD==;FujrnX[QQEVrZ]O]Z<-`X7Z1Sr=08lgMY[3dYE!%N+<-a3L$k/8R@i]pBe+TjRRD#sj$POg8:'bWdnW$/d8\.n,
%(tP7@"t;e&"Mk*m_@ksrBuEW71h.FI;DH2'=q(Yj!_*nj"DefnH$i)=1qDO7XJ!j@4O$$S9,!iVkO^$Z^iTV\PS5HK9bWFC8M+[L
%:=M-Slnmrtm<ROMP$5'QoGjKndHM6F\CW49:89X.;cLClWG(Rrf^5b^;RC-o:=J`KE5"=&.6<[j78f=4ApJO?7k#uRUht?D&<7-n
%\W1)C!3D>N`FNn)npYNj+gX8+8mC<^_0.&lo44BLXuJ[o7Yf_=MQG5Q'REP+H[["4<]mRAW*]S#ahYfJXMH-g["!VZ'sH!BYT,<a
%!nhTNM9p@#+K_:f)0\uS-'RDf\R__"i4Z[oo,<LQT0[#k)g/GmPmNDO"JF]57DWW&'\diM1N2uT5RStm%shnSl1oiBmCUE)kKQ=^
%X&*-)=!i2!!_Z":nIO:a'-pGDGPqY^hK!r!5YDJ5:%uf`9>DC1=/V7S_6\9=dB(fS]tuR^5a)0k1J_idi?V>d9Sn<'kmirSa'La=
%bi9@mo>?\)d?/fM@!:4&"j9^0Olsfk?0Ca@/B*320Vt)24SVnqFEnG;dYSl5'?G.!\P3.YAt#(`'pX?M$[RAb\Q1'/=Kl5!(3INc
%7_X3TYalh5f=9iDf+i!h@@mR&4m[$M)8d,UANuF>__dD9.sS=ak99%&E&8KA<Ka,DP=qG\L#lC+;9N,]Ka:ibft<Fs&MS$aiMa&(
%hAB%FiW<<T42B!M:GI2$/!o#qQ;9Q`X@Fh6#a-B?*5Ci6VkQ^bTj*_&(]-U;)X8I`IWu'e!Z(BDN4Go_>%esYT$sID%F5BF;20e$
%6Y"7dnt,(pQc=G]/'T>o"1sG%XasKYU%h;6^0GFC()M8*Aa5[M*f<[+]S_5"@3RdD#D$?C6'hYb^2ZH:n>6kNfl\NBJ5p2_n7k?7
%,rXW^42ir</5E0rH(uf[VAnFfq?1STPT%2NNG]=FbnQ<YkCmGf3d.aYCOOOLA`*Sl1alJ(BX0iRq^tH?J^)7(/k\8#Vtgl+eC.p8
%]dM3[Bthu,:&EAEZ"W?o,hR"YS'foAj2a]/W@5[NY`"7-*CLL8a&3I9-1Y6;=\p13G`i;5+*^foDJ2,/,goGFjg4!`Un*`*(Qm^(
%I^D!W6Wm:u+ai.t1Co([\#5q>(J><,LI!m(nGghjQQ4\`lVLd350*d/k@%ZNl\-O/-i^Y]B)n?&qX)(&<<5%BadF9+K1Mp]*2t[8
%%bY:d2I+cWi)FQVG*Dc"TBH,0qD@o`XpLV30c&r!YYs6r+l=S`!nB;^AKG?I4IQB%+^5j<8<!rgB<8!iAK1qJ$8]CoIlZ5Jo@s0#
%p.:hW"UhMe>dgBNl(a&[kgj[e6!2FWr@DQfMB%(Q\bd*M_;j;A-683K\JcE-PTJ5T)=&!W]CbD@rH>d,Y/*Gh@F[c1r>Zu*Xs<M;
%+b26AoRu0XT75MBq):[5@Vnb(O)K^6_=D9FmUK*T5dc!q^m+XLRU7ceFhNG%6MG"a,p,mgK,D^aMD5sV$eP96%FI2C_]''4MBV`g
%?OR55VY".5r9-Lm>*#+JVJtCrZFA:WO,sQU^psSqWI?oC3&,ujI7b*\dY^b5Ru.9/:6"#1IT6.ScRHM4euQKF%f(0)+BiCUSi.^3
%]_d$;:#YOrV<88IrS#sc\>uFU0othk,r!WMI=B?97f&Zc.4d-lieE,t3@UL2AZDlokugtB!K'leTbNi2(rip2TOo_L>*N]9g#.gH
%)].RBejqQhd/[BqJ]L2b.t2i/DS`RM$O>.HPW4oa*#jXWF`kaYClp#GTes!aqkH.YAF,F'Qp=\j&638h)!r3QP'j)bZR)OQ\ns3p
%EdVE*R&(IMlpq>@RhRq\$GmS'^-hME5q<'_?UAP;XB<-^_5Y]i2?_k?dN5G`0dfsM\[[o<kGZk0mR5#B>`(BaoH9Vq!PoFg]7B,u
%VDmHJL^\IEcKDZ4o.?#%<6uHAjW7dD]ld2#]T+ubJWh3$;n&9]n@3[#!M+Z-D#;oDB9,1+(QS))mW^`%pnbB^AD!e3_>\^336_bU
%MtQ4'_l2=$W7b]I.0N*ahMto-;9]DZYT-/HI);F3;ZW)*85M(pN,s'K8o9tnUINqVZ$ab1\_F*$?Fs#oS0Om:*Lnjk2Q4`c*C7,W
%%3%*`.-B+P-!]3mZ;^,r6)LfhH"D&-Vl?b,X2jo9]QX]HW^ZKkY"E.XPT9#\cQILGWcnm6ZCi/)TRAg&qE_A0FrphAj/pXWdkU,I
%/C=cm3NkIUkei1cR\NEe9rOcSCXk%pe8k\hS8ZUao4&24?kMN^S;IMO1BkX5U1?Yubq5J:3DQ!QBuqQ7jMMV?7L`_Z)h1$)AN>Fu
%GQj$p1#T]'I'Nr:1S<lqmYh0fSA:7qbk/H+o7(/[\*VH]d?RIo3&X2EblFhgT_i#eTbJg&7eU4!<j>R4DAFI1BL4dVdHL]:*am0D
%NmtdKT5TIY?P0e':2U&:Y!=cC%eT1bQW#q52G(-]9Bdhn$<BX0,n;Rp5SqTP\WC+uZs<=&lsjld1AFN4,t-lRLAf0_1/=Bk"L&<R
%F;BU2*(oM/"b8RS.4<%($+d*)5R#11rL6g3MV+dp(_e.p0ZI`Sg`&1&i6H!2*tb_#>hbTDi+>T]T3t[(_QA&CUd*?&KX:b;E/,TB
%r4@ig3mHllV'7D8[;)8p-f""[:n*e_4L$\2D#ME.7+rm(,Lh*An'BP^p%1q[9"@8YL_GM/m0j^LDJs(FPpZYM^XKsJX>gSrm>S8?
%dB/l%8Vc&mFM3?dWA)93+#MQ.VK@E\R85YNF)%b\DEMDbOITd,$.:`14_$o[c^m8TMW"'hB$ol@Y>gLP9jk2UpT^*Ymk4Fg`thtk
%.]6hSDHA3[&_maaVMJb>R<8[4<892E,6BbHiFnP$EE:T5_EF=amL!43j[B)Fe\XGOMP(p*Ha)/$GWk"aU^0hJ1WV=Pa4^Eer[^aR
%)V\lSH5PnN(==K:N?F+AbF6O?>=Us1oGb'gKu_Z>+uJOuKSuW"X.6SFnnui2_eIKC*a9Aj:DqTe3[Os</.2`Z:D?DOQfY4$:O[MC
%d2ap@m@XI^6gYPh0XDgW>`Caa%P=-t&'LVGmBF/CJte-Dds7,kb.b3ZlHUc#V)qI`RqcB'=u4.`p,V<Mc:k<4eMFEo,8Ib?k"lJ,
%Pe@%G)Z[u+Lmc55Pd:o+p6S66e1<c60R^*Ck9q^(K(]o6CrV=G?X29Rnf]q"+6(bc7_'E3Cr\6Wo*Huc1"OZ/IGSCAoG,:*."We'
%ddBpLU7NAD_O2D:<D6KU)aYR'hH5f0UhU@J,=d0`!3$mubU)8!Q4$_i--uY[#G;gq19D:FEEB^"j6&JLJi?e8)%%](GZUT2*;9a!
%rM1*O`=tS9]G$TDVZ>Pc9.;Kp\O3`V4Zhln*NbjC(-&Z2N`JmrjqBDUUfD(S&o)umrFSbEMDVYLlc=s&<aKI9q"`@@[7`D)brg>W
%($iE>q=L6T4>i*`[*k(pBNrMs5;11tTk6L)QIQ8%Z_*'<l-)E!h_7pNDLKPTfM;-M#\pZ86E'"PI.A'6:Pr)Z.jZ6*#6g4pQk@f-
%jf(@1jTZk]>KFtUe'lY5GYRc^O(NjF`i9ehOm8T9>)>P5@=.tF5`Q;X;aUdj:":VF)V,l/lPsC'PP_+6Qq3:4oB%:AibOZYETubk
%Gt$CAJn8Y?MT2>7>/S_\3W]"KO&Uni(Or9']om`h24CgV.ZDTQQnoU/8D#/Qdg9RJc@k%X3i9LW"DO<RFR[UfOtN3Ph[nuCp50.3
%`=P"<imoo2[p__K'gnU)L%I'Y$EOY8J,SdbQ@m@`$Pop])o7[CgDFJqq7!I#!mhIr7BuhYbPK(07Sm."b%fN^Y9W.Ul?$J3r*.a5
%BhAa9/gr$d1hA.UZ7]C40oec=5QH7J/4K@nI8q5l0kfgl2\&Z;Od+go^d>Z9)@e-cS7R`hB3-]g'Y7%-qK?1+#+Q._)L'29OcGo1
%3nGF(Buqfe-)Btkl)M5il%#seqrA5XEf.(AP4_WU7'a0\GP<=gSogW>P.\P=[pgT&^$F*?!^PqGR+N-ucWg?7,?Hs'(0X0mG18:?
%Vb6!gN>i#j5ipQ2dbE=XC-N@uQTTik%-_BOo2V>RT*>^'4Zc&0O6kh"Uq#C?0qNgbFa?aGkltGbgga%48X?iSWr?Z][htXIhm)*V
%H.&J-;h0V[2X/f88!80$98^&&Wse(&HV`$>&8bNVgpo[+14@51dN5-\E1&[:rS62+B<41'(-U'RB\LCnDY%j@pN="molMk7I*p7]
%qYKZ\TccHYn^XinRYkVUq_9INY3cbJ):P*p*TB8hO4`cJb#8U;GuWLIGBk>ljZ*hF$]&(RqNPJd@7HOH+E#/?!:*pj.cpr,jDa"F
%E[@*iriJ@#ODUjg/".-XW9c502('38/@T`bY&sT![]C\Ro9CJ\^cm?EhT@BCB]!9i52?38\h8#biqYp7<,\T[2OgNOQ,+p/^`U-9
%A..'0?n<r<NC1Pb>G@>k6Pt]S-Cr;If#,'fCYBEt;02#9Uo*?$7EcOU/`-;h5Sja)>+H%Qhe*YKWj+*ph&XJ&/j`'%c]+FeTdeG2
%b-5?c8;"44+G_3nZT:>W^sc!Bd-.\-8)Jj^Bf12BncL3D[Ec/*iH`%3<Y)"!*j$o(WuB%8]'WI%88,VLTj<Yn:EZ4.U.N7/VS:JS
%X_LeBLMFd^V^:Q&jt*-LrmZhXp*fF[MV]=tk(\3sJ#1>T@7;>B^9aP/Zj5&+ZVn/(/GBg[b)KFKNpUg%SXM]$meOI!'<5"mNbYNi
%33JrkF/A$],7hu!JZJ%FASXJY*s'rfEjd<X=g+_C5*<uE;gA:!_^[GGb+p]TOu;6[h5@/1o#@P"e<4RF3SY&(MTTs<=n6sEXf"rJ
%V.pLh-K2)er(ELa;Bo.dTD/Gg1HNG=<sP:iKW,1f6.[)6!`Imi_km%d/3Gm;dOI)u*g42dg.#rGV\R`F1mL"_194S>`\F/dES>,n
%eoZI&6m#t<%VHbD5.\)Tj>1XP9iturc)Km44IulT`ls+b6W)Y&>jN4irOa[b;nH5)@J/=9e/Ia'FQ*BML%31#$/6@G\scp3p/\!H
%M-[!$Io?.-k&dKQgtOr]+\iI[(Gf5=haaGk#uH"o?o30Rd(L4J6gWV][1#t_mdRe1/fGE!dE.".I)u&Gj][2nShn`:>4r7_BhW?c
%LG=p77,K4Dr4+)h@EN9kkCp5_%N4$-;a7F2Cu\4p,f;O'ZX,@h:)M9E")7P;Er&!i,];FBVbm88\='_-ND_*b_p)-">*9_[a3jqZ
%Bi*"ZcZ!G4LW7FB/`E1Vmm8`h*Jqr^(tR-L]j%-Lo3C3Un&g+Ca")^clc^_VfMPQm2r5g&/O@k'UP."0aIJU\5f+(VUjO^?od`e=
%58s:!&dIM&Dt(ska_l:M]QJs'L@7_,'Za<LG*4hE8;?0LU`?2#;Y6A*RSo\e(R8&`ZU.Tno^L#&T%Ibd_eJ8gB/F`UMC?S>!Rd-:
%N;2)Jei/5\U=6\9NocH)+SnF>$AL!'KpH*\PG[W$ad#"76Z,pe[uf)h;j-Fh'45KSW*aW=ORROQI&JY2]eP-tjL40Jl%FS`4R(CY
%gdqo\fXcRV'jV5C=)m3R[cN@(7!Eg;ft?2s%@l\NXFBg7g@@q*E[%N8Y#UY;&/H^@iH]&+qX#PV]u`]/^ST]AU)ME<%dp4k$t3^J
%+jPlWrpR+$:@'Te!"nSZM@6*cE:bX`>lk'.UKTi'=B\gHXOuai.l&)"#Ra!pk#-*_4RchaJ%^5*Q8^)1IeH^CeJsjmL"PY3$'J6%
%dk+htUpYaK%`4^7CS#Ko&>W&OQ_#QrlRJJ&!l5Y>>Z%(?8ILlVN-:?g=i,03cG9%i,%9Ubc"b6MD8@Q/,Jd)`4'a.MQ;IYR(A9Nj
%C:#YoqU$D2?#Y-R:82H:(M";+E#(Z3I66^T3J1C5_lF<.`-&,UKW?tN<Uu+&cL`Pe(p-ge%sbNj1YYf:J>C8_aC=KZ3P)*Niff:E
%1KpB<C/g\9[l"!OkZ%/iTtI"]=?\s<qK4pD>at%_eij'-M?@&h;)cn[^!TV5de`"$gt(C#"o:a2TD.^E$I&)7iK<5%.)-p[>4;Rc
%8S$m7<.LPJlBV\#U>_]s8pu-\%T)OQ]&[@]4f.I8lls'm;<.j;W&X`J<T$E/fsKiEDgOOd*d]B!0>SNr1N_a<".ZG=?MASd/%sg3
%4`pQ,fYT8o^.t_ThBaC<C?+pAh$!m;*T^7(#tJ,""OA*0eu;r]*88KPe+NLd2L"%dl.O>A@BEC)B%V?799\mQUuHT\:>$(S'0aA?
%Q^2O=G032(<F)k64#Lm+%_4_733^_co?]K>H#`F6rKiZJX`<"cEu_R2fn=uD2UUYDL$7_W?ZP=i>P\;aOMP]lQF=tK,kFaB$#u)j
%H9/n>_Eh[8pL_F?PZ.-n.X9_djFWkh<A>SfZ9l$.jrp#h&>Eo>fg.hqq&EIWp0S;_d:O4&A5YJVhh/Hn1DSF!d!6#`IHGM]J!>!]
%Vroskq@i@dI=F9p$af\ZdCZRX\eh_rYN.&i#Rk"ppU0#d5DC'-3F=(mj3uSM20:<s?s#u&[Gmt&F^Z50o>S*,Y*-(DVRjmnI=Cj+
%-lsf"m^'%UWDP1#Dlj*H`uC5GZUJ</9b.qlE=rLc#mXa[]&_&;m]j=el4(':muSiEr:6[^3hb9e;H]Qq[.Uq.ddN?hEtu*#LmfSZ
%$WDPJCLjQu/i;H)X4)ei'?"[a.,B<@1SPeQL:>fa*q6koM+g9jAlf7ONeA*DZW&+ST;A0UoHCc:DQsDb3Ql*,ZF]8<.lV0oT`8oS
%g:p6A!"0o\R0JTc)DS7?@OrZ'F.>Y[Qn:B)B3^FV*b[l1f@po)18DJoJK$_]fEjL:ba^Ja<ofb;RZc7V-n7d$g3,Ok==n3$_6=-)
%rp06dCXc)ekjUhI@8(thk5g\DnMHn-!N,tK3m&,NiuY9N_JYeuc5&"2VCu<i+)RV/8$.'C?:RdI]+n91Z9n1d?V`'!;W@d,p8l0K
%"5%(K9?XSuAC%jV&[!hpd]%2o_SrH;o\e,/"rERPJ7t+"R_*)F965VR3P.Ta<Ub&gr;:c`#e_`fPLgd8NrV;8F`Y\YKZ;\&%[K]i
%c7M&<<S=)1m4SR9iP!@<\)R,li.(lk;ktt%^fXD>e<gh`K?l1iGnEtI9O8TN]1bd`?;fit:*>_OG/L=iJ&m+-*g>K8'SSq6q)6%7
%g.i/ONqL>#Wocu=d-P09/X$i5k>6W_:9[B\+lfV7I:%"B)W0H+1(m[aPDt#bh`qJK=`!]5V!M_j'nef_VQlD:UH?A*UJ!el<p`;:
%rOfE]Ff$).#N^3WH&Vo?(L*hLLN19R]`5r#G<=TsWWVI[VN-D+$=2!0Yml2^d7Y"okQJY.&WMA%)AsB'0eC:%lL3tiESK4`^?Mnn
%[]KU1%cjoen@Na4k-/`<l:dT`^H[K=)5eqg]E/-oR[no8q&g/!CF0rs%"W04*Xg/MA3UK8!XJM;m"a'AE@ud&oRj4XNZT63is'4q
%=,!4fbH?X^!P/_aG#$O']+[k`6Na7>H0EbX3+!F\:-1_mS)'\^NagKf3"grAFhE:1ScQRrGoES]g!AC`!j?]kC)Ol"S76Ciq+q]<
%@iPs[HgMu2gZp"?lDdj'g^7@e)-04IfH[oJ=k/W2o\%\&PW4isS4jPFacZ%fr%f@]C'Lml\]c1"5:Kh^s)@iC:AM%<8C#RM]hXnX
%7+ioRX$eb$o1sg76LT*3)s0s$!,'5+a%LC1,P6&t/T6n%R89Z2"';%2pN:3hfHg<BnPZE:)W>>>FQYq2-@5o#VBr./;h'oDKn8G[
%J4>^bE:7%F[.@o-:0A.hpMqT0hc/nb^aU`d928rn&@Hc):dWG]Vu7fRO$aLoiRY](LnicN`OV\U.!+S0YnT!2HX)^SaX/+]``-UV
%2INM3r0AkGSS%>;g@lp!='V$)pR>KGc%g#4>mcN7%ps-Gh=h#kI<N8oWguk"Pg4YfbW<npQTQ+C8?+%G,+%ko$cS-rmm_K<qG_0i
%6"[b-9!I`KB/A@O4.dVgi3"'Ck6_18.H6\q?`$`/F<$A(I*7$\OIu5Us.7!]VCM?J9\6U461^0hL8HsGDcXLVRU4KElj-n%;%1!H
%;\Voe\R2;VG/e[88@b]+MGcn*A>dfC_D#,nh64FkcP2f.i^66`NQ:Il+K7qNo$!*8ke3km1<<=h!C9.4%:;n.,kY(&">4me]#a?S
%"K/8D!0,EtaH_bt-8h_j(Zqkf8212-Y/*Ek%M5.r8EneVVb%NUhWT]I(:n(t?HDVCW#0*J!-gi`LP$W!q4Vdj+7eh^Qc#dc^$oUL
%,*mkj0tAj.r1:U,Sc.4,HL:O`TtTs7=\b(&XWWWBRGAopCsnY+P#"<%``0(+a`V>ej#K*UUt8nI\r5Q92.OTM/QVPo3M&ACf9;0"
%luF3o'#I5<cMjCsK^I<MP,&7.lBC@E4s/9J0+l8noNpoo<o+r;g`37Z+KfOkfYT`5OS@PF*(8jd]THTPXbf%Uj]bu<_FdnmMk_RD
%Vp8PMeE4kDc4!H(#9qGWSu7!"W0!&M"%PSSnC=UV:Ud,_>Tng[.blSh-7%Cg%baC3&P$Ed<>$dEDC#3.?ltZE/GLE.@lV"BjMjKZ
%Zuh.tV1hb"c#HoUJ-fAYe[UQIs4gA1'AbYnMF3"Pj<r7M8NdlGXu]U_502,%A]5ZZ5e0$%'H$N.@Pb2WDC6PIR;54Mq3&ulfgk6o
%pcX95qfP<]GHjQ:FMOAfd_HqSP/a2K+Z>F1&AQ8=&_[/,MgJZK<1RsLcFq;DN?*T\N?F$(=qjs\FGMI?I0/YLH>Hbhq1c,Y3W8c>
%pd=@,9p+g7??%DRn@LfdDgLH9njR;Wb78O^"$(Co[hj<K`S`#tM=nH\pTFOgBU#=@7*+]/g*o%.idf8%,!pdBm<g`M\Fi$l+0'CH
%5>J!McHca8lg=5Ko^Vd(hp8;cli+,r61AhA<`_%PE0`rf9$)pm$J[KhaQ:LA;*rd+k*m;,-cATY.j;+[8#Q/-@ZhR2SMZ+O=!'ht
%L(pmTHb;N,B5Oi6nCaEH$24cUD0d/]hJ-_Bm$0Pp.\ldLU!&A'=8TUB$,mD%BaUNMo?e5pO3:T^e'Yc`]<+,O,36'XT2JkJZBRgN
%1M=<BE,`<I=ZbD^TB*Oo"UBpMa6T7u[sUtQh#5CepMB)<klMgb4noNM]4:9`XPCG]?4:hE/HhF9la+#?%M0>0,eX(=LC\Zk[EF,@
%jh+o6ms86*60e:)N6cr<o)3hsaBO*u!*fQ<I]E.D^Dh;Q#N[e"$.-m>1muJa,-U,O3'^)\]\_]4/r.qJ8mq#_5]Ka7?bbYbH%X!A
%gt,]BGQ$'jd4@mIH:Rt2MC4W^3HRGA9bKBC<+-,rm%G3qcF0Jti2&WkD_#GXWt%9qQA3>u<`B!17TW]Up8l5_=<5$@@#1p5F$ndO
%9QPA3,hjGtfHDV:.c6d5*'d%%p#U/R@hJqT`Vmgn9n&Fj;_m4I70Z<9\UVR"9g:+oH0KY7q1Ie/I@_uirfl]VSI_4hqPQPAO-la7
%n=ZiB?a5p5gV?/OFE=+`AO#D->DI@5lcFbJI7bgbI/Wa)Sh)\IUCX\Q)nS0,Uc>tIonA9NORB7/gs.r#eNF7]dn[Z:nFQS2*tRfK
%4PYX2#Hd?"EWcarcE7LBKV3Dn`4p8`H#U"9cc_MLLo5?WIoq"Q#+QbP``D]s5t:[dd7s>Im`N4YDs8Jm=Xe6X^e4FMW%I0m2(FFZ
%dE=hXmb=c6rP3+_=O$'GnVH,@D\5;4,F>7(h',h=T?VV:<f_,%KTubD)V#E>ONsX(*W1Q&h0M'<Elm?aA0lJb?fZJ=:<LlfZ2pKo
%qB8Z1_/TY<F]\$7s.@2P>".#Vc/LiDGUA;rdZ7]t/-P`3MEoFY?ZFi9aud?Z;0n[8`1cX$Je]$B"p0dA525YkZ/DLRXsh&"m(1uf
%bsBqb-Mt:M*@+<gBh$uLd_5*2DS5DelVYAf4:dgVqth/E4,mF:Pk(KoXmM$fIll[WP1a=a7#"N3is/(eppN!@P;/TLU%=c0O?eVI
%I?7[AV8H/NMpI<6B]N)u,n@`dSk*d>e2*Te&Sn7d=PU!u4Cp]jH\,OhWqL_E(pJ?ZA^g'k8\0j]qP,i!-W>`qK=-)G1hZ5B%QR;E
%6#uC7nn-m\A_mVrLd:/Zi;h-&OZHr.D^na@@;WYj:T)*f$+K$e)q4=??_=sWr<5ALIlZ!1<T[t[#W<<8Knk,,4BV*]-@I#\[.-o!
%VT2AeoT;#n@PSR0lS2b1@H%j7]9`L-BNs==ND`f"[6q(n6)NC0nYeoA#&+W*gkPLsE1SE_=n^iDrNWrbDeHGE;CCl!`#&`@AD9h?
%&CfC'CuiCJ$A=4ta)a7R?E\PhR"g*.dR.KtBV-%8galXiN;+HGGhXJ8@gJ^]e.UJ?<uu>j0)_on@E0c\a.a71[UkZR_WlSb:.ePH
%$I*P+!#3B3risUM$fg5Pn,)S1Z=id#_t1GYS$G[S\trE0<XPR"N@9jd]'VaK!n*\c4djd/mkMeVmD*s1i-.\-KAEY8g2O!!B768(
%H+WV"S*X+&iVg9'a^nh)P2+@4"b'\AMu08Sp<Z=T8O#2"#`&b$MfaZMZ:&)-GH"4uln%%M%`@>Pe=gt_W.Q7G4ab_gL[_jj)K<F"
%G+RU2S4&r)/h6NI<lP(*T15p)m+27NL=+K=!0k<\L1./8*`#PLJp:.1)t*%7WXYl("#u`1GIUlPFE_c<U#kk3`m_E9+QI0)hb!s$
%c5SFI0;+g;jn`QucdjeUG8`P!)/m0FA0;UXGupY\:Hr5-@OTYce!2/QdRK9LVaVpN[C@0ZF)#NGBDX5W+3%G#knJc:n+=W'Y-!8E
%[e'J1:>1V%"X8^;lJo:9"_7X/T'dU_;#Il":$pW'mc)k[j@5(\7a+FcS..Ce[po%uEaP["j_usuOQ(C(B(^%h,6..jgKSCD-jWi"
%Y6T?r2^^*5f;!Z\qZ!a?D,X%&Q^hcOH>kS;hFh8#&+]DTi4rV_?>%:InSD@uSo1*@4>:GO5-J>ap)H(i!P]]+He8:Iae"uPs([sB
%abbY5FE573pJQerE]qBlmg7k$aUOTXdjgIuYO6Ja%o@+dh[VD6^RWO*q0(9S?1n4P>X%c/W;7&]5l/:b&)r$q(nG.MYP)Um\fV@q
%Er;g4J*4L4SoTIYc^+:+dBh!A&K4D;Qid"k&,IcC!QqGKp0a!%N('\7`.RGf..C-i#0"A%ft8gp<EYV@`Z?Lk$/EV1Tc'4)Z@\m3
%T:$b4T<DRs#Y2g$FQuE8OmQR[37FWtcZadKGo8k92L(A.J;\+p6s15mHl:^`LE]tPbjoPH;H1@I+*W(LE>g[Dli$$>moo+fe&j'&
%KtqBiTLjEdkZ8lC04-fCdsY-W/3eZsi,0o<4g51\X*U\dCpjB!YMto:C+U&p6XeSB(<`k"#S)sa:%3VPn/0"X+YRMl03,:[E!t4P
%"MugIYH%@]1g0HdQ/g'U<]pc@D]=WFUBqOm<]8.uE][PC37,CT%8f2g_Z'&i9QtI=`))NF\DFCfS:\FEQYtVcI:&+<n!7*U1-bZ7
%q2U(p#c)*<XjP,*.:$n-6Gdm5n\mLS4;t(3Nu=I81JOGe90E\*0hs12m7@D?;nagUBlWNJQ/$uZ,Ur0mPj]>Wh4,*ZDuhLjc:;2I
%+jJ%9a80l*3Hbneo'FT([t_4XHA<EMP2I0R!d>q8(B;QLpE"Y(q%%8e'oOsR<!'IO5KOpbgYGU70pG[R)g,UD]d0tR7O]FDd(l>R
%j:ERU'O#l#;Ak9+;<C.CCqQZ-G,I/Og5'D`jRm5d&/L)9(Pl(/]Fkj46,0j!*gmo3X9DC?R8i<"Gh/(CMu4^!!Bpbo!k>kZ.LCrY
%.Iej>\CMlYLB5!E(r]eFaj<=h7+)6"%YI+g$AYH,ZRo%n]>t^Q_M)E7`@)YAScD>`HT@:--'cpMBt-D48'7ldAGu12#Tmg`%q9=)
%G!&P*)U_*f's@$\k..'t-S5KbZ*qLp4t]?D0jK\%?U.K52?h"2L!&t_86NsY<sOrR:tsMtK\te.d"KLQ/BdAg>NcLl+LC+q(+M9&
%]W00jO&WRk[DY"$3#\Za6I1su:DijXk#0KO`YY]DbEs$`K0+SO#]=%9?/0Z+=Fn$=Gs`]L6IG]K$J7j9Pa4Z-4[BXuNUJ,W6Fns0
%D*$kXe?Dl8D[+XiB\B?![l]6;#O9H[VM8<Z'gc20E>.rI+"_road_iBe9t72-4*QaV&<6(Isad88hE;t,fg`UR1)R?b1XkOi(R&G
%J^Oa=V*"Sfpcqcmjb)8^=cIVoG26+f(ZipjN87`$:Xk_7A^[d/X4\^Db2]r,!AS%P"r/Y\s)V(+Co)bN(U1P<>eqLFnrTaU>r4Fu
%3a,q6p8CLXSO-^&c@Z4\<4:WbGS;)@1_Tj\)Xn_Ce'sQh,`+<Qs"N!Wh?Pu'bMNs_lP!:_?J7_:9(!m:!\g%#pF`@3IQ-@%)"pB=
%%fkJ$Ap@7e#XbY;S#cs%1:\8I">,/F'02F[jqc=$`bKSlJRuEm0BtaZ1u1khZ#,FFh>r35%lnMo`%>YSq>gaaMrouDZu$d>.%Ml@
%=B+cKCG8eho/F"m5g"0*Ds$hVf]Q70^lHY-Lr6kLP.^1U_=E`0.<Ft.\[ILA!FHmgEY75eNZD`%b]F^LH"Jutp;f83Y=Z/i/]tat
%_[l,?*-jZA"tBC9CdCgDr>aFEM%a"Kh4rFZTp\5c*):@`IqYF5-b4mQAIac<qQJ7/*[DQ:aq+'(;'O0SJLuK*>HMO[V9oj+"3dph
%-7)E0g3Ro]aK-!]#HNTZQ+m6D+Ar7jaV$V'YQHcK!<P,`ZC_7peT/No&bM,7$99l`d*:1++J!/.`q;Mne2Sc_fY$CPhfr`TZCYHD
%E7i\Js(8&jQ3#C(FJ1Md7q_3/pAlN(LGi5pZi%uiF9Xn;\Ln/tjZX=Qk9Mm04>=F,RU?K2Q;R'i)QdPqbtqts/5k^AhFb;`*ZXj8
%dDa4)a/0bhJV\276eb0m`cGeiJh#ASD@$20HHKQSP-WFNrQP'2P'H?mk83)Xr$?!$2es%OH#<m@q,6t!3LU$2*s4=//I31I<XMC"
%PZ74%!)>Y*]9moJ_`1)PRd0e+Ft<9h\_>Q']Q,OIcX0;kai=ge*&FutP7jgPaVG2c)0NSf5"^RJWD'5D@s/1'HDRNVgn!OWgm!a1
%j@L=RQ_a8$2Z%)]m3cqaGY`#.d2Bfm8n>Mbm0[CGJM3u"A;/(D`uL@P`;8UH#!?ae%Z?0r0mf1UY:_L&*/BtC=WuP5q$9lEjCcLS
%OY[cS]lP&`YRZG^"?n-oK8Sc:(^.jo]:(<%Q+L9iC,\CCaa!lhW.+V07+m?H`#3s15O8!Dpd62p2a/hN'e0'JHS!9SQ'.4M!4W)9
%n(#BD8E.JPdDsa;AcQ][H(Dt`2\82;@q7UfYTAtG=3>I]kU97/1A_!:q>9"q>?>W^pN:F9+M2le1e*;=eV`H_65NUmdYa=cML]Y?
%<.R)Tefb$_;$5N'\"#VW]kS%2Q6[&O02^3ZN-P"PQT=`jP8s0_T#r-M>nVbeI0FNWki\>J=NVNihK9Fd`doW).aNREhO7.;ic'1Y
%o2)7DNB7ZB\'EX=$a1n,?\^o(j)lp&n,_QR)VD=<lOZlQs*7=t;T1J*3q6c%du0_F&?.sYGj3BK$IV6t@b,cM/[X4dOYEANRP"V(
%2kY0RJF8#k[[!Y)Y=`HY$>).s(1C,LED/J8K&a7lPuER;ECEtfWH8\GYUu0bMrEjW:U#A50+@%NhuN)%31cZdPXl"o7YQdB`n1_U
%TV>uP[47+`+U2-Aj]*KrH3`(p.?n<+5eC!hgl<_\A/[FL$j#;grNU]7KL2sFBD;rsBMNJKkYO[h?L6/g(fMoN!0"YoY`dHRS/LfE
%&=tR,6HOqB0.?+X1,VB@SXP?A1-NG#Z.^Z8)j(DX.'1kPXD9I4(:->pFR=e4$e%Gj!EB5l7Y1ghU+.PDJ[!&>8e+VuY5ZMXo:Di*
%Fh_VED+odaj/hRi*$8N@E\QB`VYc0[DMj2,#Z`^eC5)L@-LiX'=m5r;M1AKC`_#/LE/Lm/)LDi*$,%kV$uGSR%"fuc/X;WeG9'VP
%\qa#`.NJ4VcTC'^.Eb('ML-Jhm%e3X@tmh(?n/5UX!q#VAN0r\d%TrlGT;!Xi8?%CO`."h'qCKiTO[O"WK8%bgIY<T?N#h=X8JP$
%+/iokj;:L_\O3q$".fhh);oUOZ(R"R,M;OmW0L"6!q^8.:TP28M@c*;Rfa\Mr<W*A'S2Vb:s@Fnh$`TmjDDn$@-k=0i/i>uAZ+A=
%<;_lK0e;3S-&s+o32rsPXr04LS00*l@k(n;mZ*[flb$\elbL=48NSJiN_m3k9*"3,`#eXRURs<*:q:,3Mi4/;:*7'2Copti&W$!H
%`au;9+':p<D1k2ED/8n$4t,?3SD!<G[<d!(lZ\Q8Ck?].h%+0.2Jr_Y?m8ra`Hn,LXE&(8L.%+MYAj_WlhQuZajaP/E[G1]I-C>>
%Tg\2eP@0s7^\>ZTD`k<0Hdl7$=6,/C=\]qO?p,Cf?l/!QTf=^e5ZW2ViqX=P3sD]7pNbhn=[s.IPB/IrPW6=dj@q1Vjtj1d,5+:E
%Ujam/@DIJ'enGanC)/s*5!V2`/k+jbJF,B>T`lST=VH(R7$6l%V]g+!o1G;BDrl>Dk(22D,%#ZI5UmF)D%5,YS+%ePe#'fnjAs5d
%!Cr5Z">snUcK`*.q^usA_bd]DD@iol%b=G)nlWJ#K_uGJiGoc/(9]6:b[WdqRgbMr4l6L/AcB>kah-EJE<Y@p;nZiBs25)#d'b>Y
%ot\=a2<p2>2ghKe1Bj].h2L0OpsNCo3i]hQ_G-VHqO-Es0a.qd=f5K"b(Pb.-d)OYe.?cFq]Am6qm+0Q/=<9C(hp^PfKmQG2HBM/
%Sd0MFC.h\2C6Ym7akLa_WDoqqK&sGYd=/C7M$[L\+CY0N+kPp@c%]S9e#AP+3<csSe=dcrD'"gkG71F/3Sac8<`=(d:!]iPUsge"
%rfK.[aRCD`NfN=U%pd,A6ZAJX_jf".GL6o0@gBA/2Y:eVi+kDZm_;rNIV+GSOC1;Me5Pfs(]_h.MCdI=8EL/!45gfm8ZR/h0qEI]
%]C`11Np[f<>,8@rO=]CBah[$0HB>'"b7He4hcAQ>('!m:lfj15UH98p#mO+RU'RWCW:S8AD#LM\Vu=2&PHs0VJb@Ceo7=3fIJo=!
%o+hc5gj;7CHWBu>@)4aE.C@9L"m`LpeA0Fa"dZ(<8O^Ch9`_7##@:@b"f#20>4%u7X'T6+IXh/,i0Z87!2q)\2iEE(YHUST%r*hf
%p,>K)'Spmg)-OeD2*T$<I\%oQEH6MS3B`klajs'(LsOd;Ai5Q0Y(VCbLlf@]LUJ*90:5=._N^-#,<,s?3c?\*[86<:s6-%T*tNHs
%B[?"2N:MUrn&O1cgq38UZet]bYkLc4h&dV/o-tQ<.YkYY^76B\bO1\S`r9Wg83NU&%o="2KjOEpDu&C_$KQF(T(W*sP=fleUt`Kn
%=*:"R#NIL:C>I,.D88o&5$=jDB_]HP\]:O//a3H(34:nRI@q#4;.f@SRhBMA*H'>')huWiJZRL!R:XcSb.G0f4=gEd<<^F^(=[;3
%Tio8Qlmk[!KjM\`DW86A*t$<[^Hr8\7jjdS6N\d6ln%rrYb`uGgR!fGKB(;TmASgPp4$ECl1h)*gS2sg_-opklek(c04.J<,Dogb
%KMFSiMc;pBZL.gY[a4RA-#^PTisN`jVg?\cs*6UHFSAZ(NhL^7i".&%<F]!l8R.bHe9O$A3Xrf081L_CM\d[DD!q2uS7r6imfn%E
%&!"CGDnBmO.f\9XmOr?FZ_SQP#:357Nf4c-npWSYPKFo[?0!C'BNDEu3>'*hnGj:+kO"q:oZQ4VrH;0.?2HkdEHUSJ4sf@dC;l4:
%9(Yr:<rhe_#YeN!Ijldj(3:=%9[?V"N;mE\;ihKP;Uu[=QGSBg8-$_`gn^7+6/WbOYGOUYT9$_<a,<kJ22Qr@MB2agqh'Rrk8sjS
%Rff"6a6Ts14NcPClEDo$A'\OKm;&?OZF@S/Jqb(S(T"f1[Xdh;k<[h6/i_(BV)ZT?!KK\bLr<,/aRp?DIOTN#GgPGt'O]K6YA>A7
%7=gfL,>'*![JINqXEJE8DNqnLnk6eR5C1<M0osV<'F^>'PT+682JlB*GV0loG<$Z$qg*J!P0<;Oil>e_cPVGfH(LG1lCE^Am[[Ll
%"RQ#Q`Oa<bBtfrimOWsd`)i""6Mi&HMFa/cDf8'L,ur!IU[[-?m8`8aE6nR'C%M[UEuH'bBnr>O3SI@W"o1Zn,0[<5*iQJ/h@@\R
%ZOZ0LJ;M0M99UcDDML5D]>nkeIbsK/0"'lno/K#WhnkWQqr$8/eX[`>af4Z&UsD9eHm1ag\1=?D.6sk&;:1[/Ec0k)Ea8C:[Y-Yf
%MRHH)J4;0i(L2b*rr%K0[m'hVo+:N'7q2$?+p7i;L=X<%:8(pLd-?bQ@Tgt_62+>iii,9F&L9D]8e0DrS?I*"AU3)%M!pp%Rp..j
%2#-j3mLLHr<CJR[MIkop>0I\77?J+WFe"i3_nS_8M+)RKK5C.\HZQ3^Oo7<L6auh7@>BtmmJ]<27u?dN+4HC!Z0)CskY>Ohk5tLV
%<qh=Y^7q4A,JZ7HZTP5=GB4OuqWl0=I7<?C'@3A!j?U%'+I]X-*#UnC)9/OFZ0CkS?)0I="r>Krr%&Lp1r^/?-i<CeAD8JT$>9sG
%djGS.-IKY<mJme%B5"fQDVmMgo]uQU!Ja<m;aH9ui!_!(I8'#cIe:0/kpsbY)c`SS4Ob)"NCYH)lmX^%K>TMNnd@f-),5%+(E&<R
%OC!cPNF.]D;[HBO`S6c^G\/bEMF^Vf#@l>K'7Pr[gDZ3$nVPCRR[%-S_E"c(ROLL)kqq/MKVElmPQLDJ.XjIrS-ZaL'Hml7U%';R
%dq`1.oM)K9U9:e:O44=FZaF>=7**GKSdtR.D*\bsTo^.$RXUGk1^GjpS.Q;WM'*Jt:Kut#M/riUV^lMdKtH=Y1L'ETon5jGE(,Ke
%/Nc"*m,l6'M_g-oV"9$AaG\52$OO@5[Z`48V2O#]I%'U9<r']`>mj`1P!*Cu)%7Bt7,4tD-o:"`$Dr=NMPqk2pigl%'U_]qPr[)T
%ED@P]LLH34Fn%>DZg!*2UX'Y!mSHT3XSs5'`fkXoMkC2W:m%E$SkKZ1NW+gG,u&3MG*O]CROulY1PSXL1BgB:N_5\]KYf]0^G8,(
%kegu9L4+?eBbs`db7k0+a+Qqa81k.t3:h",$t;9CVubodQK$W,dTroa>]&/h<TA`\>LO$&)V?(c+%:ao3[lkEpj`(OZD013%Oe6J
%60oK1m`l6?WGO:0a,)k)c;9b/>1uG.4hUQs1C\7S(f<\k-BV'g7uhmRbI8"PiE,U'/uNjp-sZL-b8]kl4:h*pMHK>1`.:OCgNe0t
%;IOQc+XbY`>`1cOk?f8Hg<Z[)!4l)PGPB.`J-+V4+]*8D:lSg:0<+N/ZV+;Pne7scCU$%E,dk\O&H2:7I1EUHC%j!8^uY$=MqhZ4
%]$hXYK'!T6iAcE-@eaQRGp:P^N6#>_8b4BX4"*8ok=O[\VLI-37uD>E"F>GciD0=QP<$AFm(;b56VSfCaaj\:Sn<eL>OE\tdff'q
%^EO,hY5hMc6FqX'U&Z6l+(>+\Ib"ekTADT:O91/LqfIY+qJdM&TPj-bE#pC2J9N2gC=ML#+eQ?H32g:@24X^S#5TFZo^rd>f@^b"
%?mWYJ#qW7u#.U.%\\jKKP_93k%-%@?HEiRlFgV?VcSR,QHZLN:")LpI>//8%\S\86/Wpc:/][Rc5.:5q**pIYR!Z]Si,+IZZ?6tP
%!k_<RfS2;LV;DlgM]Z5,N<uWGh/^sI\_Is<E&3q$qjWa;$[!GS9uVP&Q9RJ.lZ!0nbY!ehd5=7)R3:$"grqf.CiPe.,_j5A1DY\!
%Gh$fm/pcumjMp;/][-<K`h`)9`Eat-FucYKI@F6M`V1%Sqe2M'<C9j,eTo%&6?jnJdcs>U^cfcq!Z<@FK>HmO(T-Lg\T:65\ai%E
%UD$U`Wm<1h*d\5UA:3cbRL[Se]aDV"b-*h>ph\]7fY=b6.FD^E;(mn+$/nfA$!ptP#;(VMmE2!J"R:g@"@XAb5hdIcY\Y7LeH8]%
%Mp@m?GW8Xf]9qB(p1h+(XfR[sb8Da*XG:%+P7e-0Jc(]f#a:8CBW.;B+Y*3Rp/7#4@@SXS;,04Rf*hFO<l/It?<U6[%1WV<6%'eF
%hKd9o@43hHJM5\X.an^OA#LfJ^p&*a0I=gWiDQc\8#ZH$^TH;3X,U!tIoC3R4?&ofQZj_%;FAR/ODo0->*NQ3)T"gR[sd.3OF'O,
%$6k*]=kiN0'gWoJ_[!ImTRKIepe<5\=llXp+bm>td>YccghIY(n+25RDU5tZo#Df0H^tbT\)+delH>2tJlgk'`VZ5tkb'E'OBSAW
%_Q=#6LDo-2kW$'(T/Ab$,`;Z/.EbB5iOZfqhXVgAb$7:e'a<?CC*N80A0\.pH6CZ.b]\&6I/^BQ*bTGaG.l/MJ,XSb!^/W0WWF$2
%h-Pg+;e2aS2lF9/WZ="Uls^ee\pFkZGFNV\C$F^)&jp(Q"N$7)Nm4,F5I&67h!b@:hX#5@M(J#mgFY,UCV$[/T*$r%c7gXC-(P35
%/5XWjLm,i%_3&eP2`X/b%q\n[:jONb+uaR_Aq`6e$-")dM0oNV*osj#!'s63'%8-,P=a8aVmEun$"(>@q4-EPfu';S&:*N`WJ/PV
%q1s(=pJ+>V9N/VYb!40Fj-N4\+5*0WKoX9*YP38'0.6FK3r#IM1SP0S]7ce*@)XJo4uaE(pOtf_P_!CDOi=^_RIR')rMQL-9^gg*
%firONI]csapi,';j>r^'MIta<0h0jaAZJ>PMWF"Yj,mkbSB.>.Pjo?UI@f-G(EDlHR-u?a.V(s#Z4U[p8*]'p2T'OI9-;05ak8I.
%Y;12$8VaY6gX;>`&!O]jXdObch`"PK8-)0JN:63JR7>5`nGimf6&(S\O^ZOo-'rIoL/dW+'0Pn"QY[[N-?Y1;.kHRVr[=mD[cMS"
%OmQL0>3('?0GSciatu,c`+B/^oZh4VI16@PLL^heY[f5DE6$BijMtU"'j2!CIJ%eLSu61]p(>Ej9(m'AOjp2ZVm1J8#`DBH)#Mn^
%f#`Hn]b?p+BKCer=%a(-s$iViC^`mGT!>_*2J8SA'KZNNa8s2O41Yb(-emV5?kVC.+"k8)3]";qbKj.\'3<kHj_BjqS0K2;pSdHh
%R>Tk9>Ps,[f&>8FH_+^#<i5s"c%f=PYAJO<O16*"rPaR_G3\KDV:qn48q1tl08+];+*F!$:;Xghl9GIVE/`Q^WO3"rYG%PO&'-3$
%.OE&S+F+D2/iY:>0f:eEOln?cn<e9h^tp`^H^l'KR&%aV>`#gB3B/OPs68<SoNGbiRs>41-]K-S=#>@A]8Go&nU*Y.ngr1+jb.3'
%V35i]S,G=qg!I<C9-cs\EhmJM14T:;g1bK7+$GVq[5U56Qh:/"d:8KsVm<jlB!9bI?-=FX@Z.H:20hTm(&K&G&`?MG,I?R;T.5pF
%LjN`@pW?9BMg]Y8_F;_j)3H"//*s/:O%Z`VYYm'SD<XHa*F!Tdij$G$kEqW.*ImYncE3BL&uI=?<Lq-Q!bU^!P+2]t;%&ZcXhN,U
%LP%)AXANn010NurCs,9)a6@rL['om_dOK>J?f06YIDdt#R<_8Cet8K&EXbA;*=XJd2<DhLpAK^=*b8t<11/F(]DUM_6Mn`KRjk4I
%gVZ7I7"21Nc6=,;E;6=PkW2,=Vfi+IkkT'#;guDRLH8B]lC#P]V1Q'^U)m#OUfDU+7?Uf1HEu@6k7M:L:t!*p5AK>qQo%6o/146>
%PS5NunbRA"iF$U2`ApZTH?)#$Tf4rDC\AS&GR/&Pge,EC?^iZ3?2;jgWE\'(?K?q%V31#k=;un1K<<BMW2ed]%rLRoSoKCO5csMo
%BC2S:db2p^EHKi2?F2nR8Yu*JFt9a>.^ljD.2uOXgZ0,aJ,XoFlSK=^&]f`jUT0PmVU]qOjQ@*mq)k.E1D$2+TduYr3PO$J<b1!R
%MNQ3,NQ2(Mo9q8eTl"g'@?sD<-rat4_@1$;^#bZr;WQ;b9.(D^bh6].PdeZpLSpm]i7e@^+T]_r3N#70>'E\QFS5.`m^K_qH3[^<
%q;IH1j4BJG?:Tl$84%YHVr(KES/)[d08l9]8X%4JN*qOM?1o8QaZ=e"bY(Q`=M;a?PMM"tUn%]h'j838kje"R!Pe1!QM'Ddb8ISR
%$m/m!+UqZ`b?#nS7*:5Do$d)2]KB2`ddaFl&iV^2SpcF9Hq+n-fK/"Y3Z[G,`-L)BgZ0EjQT$B_0&]^T]sfP!!Re3eq\8:Nad1q-
%nrW5dNFbMPFIIZ7bNh>ihS)L(r4+9Y8H/=aLMH@_P.LJD7@,I'Ubq"3TMVlf?A,29ibR%OCpDMH96Zu1o8tL+q0h^.@HiMFF6Ht'
%eLO#\AgZ0=$[gk.W0BQW8"iOl*:f.?=e<Bhh+[D,i<Y(ubgO"DfNl6hVpUi<+3XiCmIB%V82&6^\8Ik,o%T9O:ciWNj%",p_cfsC
%36,.&IC)'nKk&hnq^Ani4o)&Q8s8N3RW6s6Fui>mOHb14'GPUf:#B)"Wg9!o_87FeXrbY.>7\LC8@kCn.UH/3HZc:-PP%>#<\K;>
%SRj^]Bb+>>fb[i9k<sZS**k;cM"[c/PeFVp,:UDY.EHY(Qcu_A?`g3<VZ+,_Co0rC2P6-\#.N%Ci02AI`B#`=Vo-iImB0i3iYaPq
%$0AV94@O-u/_3K^DJ,1iB>A,Z^q00uDK.57V0Te_R<=9onktGf_XRs\f;tP>WA7@X(O\t=G?/!XWq'cg=AEL&#KMBF;h6D\+3YU#
%%n2FFI[jr4*[E3kU8<,kL1T7"<X.lkV6ae_Z'*#)p,]1;\HnF(2-7hK.)q?hP924$+@VA_>*>"Q=NE&DT8O(iFa-B=1:>,jPK]p\
%s+H'tLtc*4HU3J@h+NAUc1&SAAK@JBM;qk*PB!uc0M"rB0!J19=B3]1(+&1QY^T72[u5an<Ol`?p5Vd`lAg]m:&46__8W/ta7J\'
%Ek?sHGm@Zb]hgu(CSm0'l9LuDjEje3:.bjV,*aPK8h->">F_gh^lX^h;Wn1m@sjN;G'YiYDNP=-HDfsBXO``3K.<p;m$cK7J-Tpn
%@KP.jD&A=R3%X:\(-1UDN6u19<WRT@I4W+NjG_9FQd8QHKjHG^_(_4+Q?J>?.lM`(q;aTKHdf)M3>erlO\!J0;#86]I9>[i]lV\j
%(FRF#;fB9m`0L(BK)9jUd^g51S9mN40hk[L8UZel]4Z$QWE,pu#^X0u*YLAe]$'B(0mkAO!3%IcN7uR&miHM'Yd!MgY>X`,`Wf]s
%AUepT^!&n*h**;9)g\lO>'saLfG>-oI9#C0(:bM=^.1%Z7uoiC&!)+<@8Ogq[/J\AVds5/H:P;T;5Ks],AM8%NLgpYaL?L$Sj_qM
%db?cbp\;Fs^0:nSom!9j+0lK1;jOlQM"?i6m\uE1baCY9Z39rb,+t*[G6bkE'(UEU/jP1eXHK:[+?"pWUH6p])(*Nj]]B2<]LU30
%N4^NDP,"VODLIA?9;PJ2,60qr(=ab.3+7tGI#-%s1(58adNUdVL7\Z'Y94"!E]]?/c,^(FI@cK;Qgiu00NpU1/E[\hk\QY#f;$*p
%s/Y/N'LhedX>Af+cW_lV#"Un3gYlLtFl''WbUd8Bk*81O$!`sTrT@_.Pa_W.LGcO,OPZVeEWta]2cHO.P]]>"S7L-7W1jD<icLZ0
%BB7;W_n[ddM)K']LQqmPfg^a;>+mfJq7NiH3ip.hfr""K:,?N':,^*'AEYLN)Z5Vke+Gi[A8K4j_]OGZ.4uj"V1;%?n9Vk[gECSb
%>=to3"1WWTQ`Gi'6FUZJb+s$e\dTQ*-o*f1EC>p@!ZF3o=YYMD`3<5Hcm@>2'eD[Ub@Hg6NAXfRC(ded^sN^FirXDJNFfSRA/hTI
%Ab?Wr!>+c0rI>i!Fj0l_.Ro&S>YRIMTYMlEq]JA!gl"@_$23dh`HggiNbrm*a*X-N09I>om76.HRPK"A7:-RWJ<1`oP$9,^UIXe9
%*]586cfEj,#c44/-C_/=?(,.rJo5^`]b>F&5LdLb_.upSG@1%>,\Ldh%\mS5?9H9nM]AFU,ihDN@>*fuXqF3haB_5XD7;etBs002
%NkTbZUsl('MfCQa,9]T=dMIa)S!AJZ-=I^PV9>=*4H'-\dAB>]aLsMt*I%-d.c-&ii^M@>+EuG9n@1)<F0"[!I#QDZ9j_&nbRs1d
%N7?QFf,;8_/UJ1M:3#Jj#I(1AK=KrQCE_MpY819BkH8-g6XmZ[4-t&c&aO`1*S]W>][\HJ59N=[I9]f7=g),DbW-7Z$Q/'0kVn[q
%mjH/\`\N6nEH4f+a0"fLG<NC;:#3:<Sj"]_"TR9&lL)j:@%7-J2CHK8Z;/C'K;Cq&Rqm)hnfnWscKBsQQp+U;oY(!%3_Houq%uh8
%_i^X6(RLf]d>e=C[[u\[$o$L!nu^gs"MZE'f(fu\IB4JfOn&A7%b<!RdSK<I7[b/,>oiKnfu/f&4?5=e@5cSF2/qkn6:2CZO@El7
%D7?[D<)c]ZXaW7V\9L'`%IB6.a7I+b<Y6DCi0J<Pci:PI#NpZjL:Wlm4Bn:6-2cp@?:0:sHE;DFS_V*ob9+ugk#Vp<1/cY)rj$86
%g$26&[de<8E2PdYQiA,<VKjtb0p]_lHftlm!'q8S,JKIQm$$B7C5L'@G>uBo3g4U=fl=YFlg!2Dk"f8]<F<8i@kpg^,+M;Pm,3!-
%$<++U_:cteq%p)SGWW=HE-SBpfra@]Y^&[GSU5&@;(8aQZ6FuEYG$N>0]JD4U3^#/H5Z6-+?e*5P[;$[99)YnM(beog!*678aoDI
%Vmgaq>#OlU=X$I]ZZ'=*,Bi3/i4$o]65s,#eDeGIV:X@6Vn4>0MWNk-MPNG<i=a.mT?knLEHFlMR'a&Mhk"uW!K\MK:m3jO]5\[N
%(+ik,M_<ktqE.k"EL'W%mgNKdX"b[fTjhGBS;XJ/b/IQjYH%<&Oc;!(n8Wb!=eC?LO&sSP.l4+n,\^c[TTr(I6Sa3rTq&-#SgMW@
%l*EPZ*Ag>P+Ak\0^W#u5\>boQNbDjFVD**p)U#_'DMa?4D/G3:Z?kdg4KWRl9?&:Pm4?;"-&-<?1IeBK*U:)AYgH/qciG["dE=Ks
%;fs&0V4F)nO8?+?]3U2i,epd^o0S[Wf!W=[ZObs6"Rc@Ho_HP1="WWj$dGnF9q69K?Gt\&kmHbm?hAjd3#oD?ceK7W5`F>tjpEFn
%R"1RjcPXD:drVb4aYGs;g#%DXf72E2r*,K^D)]NJq;/GR33b_MHYX+gK$FK,-*7_RYYpg_-"MGdI4f]G9ZfdTrHtH]kfXk!_gcOg
%O^W`E"<$eGqlUf$P$a?H;&QH)i(_)DSdGDo95[<"6kSW?4YHECnO$KSm<1>_q1:bWiUR:Qc>K12&q87gHT%%kZXdIfEigY.<n\gp
%/`sSrnd].RiU)8unG7b#*/^\KK$0J_ZgF]k\@&\</VP8!GrA+hNQuA52P][CL'n.jU\I7M'7c:!1DGkDYsYMkL@8Z:-\??[r=#&)
%bj/bX6jIt:;k6[;W<<[Lk\(ea5'=4i.Yo9#`h4<1W#5fjK-H8j2g05eOaF:aD%W6daDg04$sG7A-Cmp"]je1bY*dj\nuE20[Hj<7
%IN,tZblHkBiSf`#9;@qT""X&gqAbVjHGHC%>W41,%P6bfqj=pj#`DP'in;>S:(=fpe_XH]3HqpYh0Ec'A=Tu$YBcA#m$Q/QffN&@
%TP6AO2B0K'DW@3"j_*P\JJ6L3)+hUu@Oj'Uhdd$]A7Pd9#E3toW'djh-\/8LrZ+OrhkdDkKi<oApp,*jj%06NQ7"*l+HX5oY0G%3
%3JauRA=#i[&V.7_oMDn#3%eY1pDhhLhu0o-rJ'LB*q-6AY.LXF]j*MR??Y=lA-I^7n%4spV6j+WK/-tMOX1];gM*D'jGU4p%fspc
%C[H;mflID_;OWlYm&;TFn6-&i&ECNkm2lSKAVFL2@$j%a[!Ua*]NO!PfVI'PXga8m^72(*%5:1E8-HW'(>>`_&Ps,^A"7H-e/f#Z
%:0&oiSe$.;#p%7+A9D/*;":fkNd,s+!=G1kSHUoi`7(9Z6go+Ae:M/p*-fk%fo5T5f8Mb#1/I68R4:#GV+_3ccpAiC]>Otn?ZRB+
%irNMuiAcb;mqZEqB?neg2`H'f1&0QS?mY[q!'d37:)&+VUejp#bpA=\m*)5b1hs:LQKd<XV'[L;5;^"DQa;]Di=Zaeh7(H;1%*N,
%><+pQ=]g>8mHm0<U,[.fI?egcSm-'^F>dM)-I0jJG$3?3X;S6i7;).rn=+gTXtZJ_\Ur@K'a/CWB\eUPQO8d_mr2K;KO@N$6Zr4)
%o;NN)5[CI#L]'t-PK^s!>$]6ll`lTF;jSK?(R'pPJ9'I5F:U@iH!UeXU]W3W/*]q=f$mX^G4n92lt$n_i82K.1CL?d^BdR<FL10f
%\k&GgA`e64=h;\=S>u8SPo!$=%c+*??:_DkePqIc!bsY7@07gE]8&Mm>7>39)4Erd'b+k/hN.u_pF3*!m@h8Ln8MdUr?6L:02-)8
%2(kmj,!n8R;oa2*Wb@uePO);d$*b3\KSpH*9XA8u1p%hYm_a^T?do4G4Y6t9_a<CjTu?.;WTK46X$-[t8YHVEb;3=a/EuR@ZZ\>+
%C2XF.U7c9&R0+u=1b&b,]Glu5/Z`9A%NI",SMu:MC._STXsiM`e.!1]ODO6Dg[AjPFcu,6;RmPAm%:H`=5Y,L,J]f`gP&eNH<<_q
%RfD(7=*loI9HE`7>*&*6iF?nP[KITe9S-&n-i0RWItu)3-G5%CgjnY]p:!ET^LE++iB4Q(6BJVPBC=+)ag+[IBIUY2X`$m=Bhc\0
%Q5o+jZNgi[o^-hEO@l#S[34qr"SOFSH?d5#s&h[s]c'h>$-g9.\OR=e%Oi^>]S?.j_Ga.aQPA-U_;94E*>*6fnDHl5Ih1ZhZ@3;h
%SN5@3&I44SJq<L#METYZ>`H,)(<%M;a$%h<s+Q&1*)799=R4ogf;UU`?(qo#oUALD<ZmG*ZUX0p`_aR,29otd\Hc[;G"e6fo(94#
%/0+c3c;706ZRoB5rGP:6)8gJ$FuCV)FZ]_Q'7TT&f)pn<d@""015lJ^O7/s1p'CY;S8B%36el2_*lDrq?j^;Ll+k^'ZS3(m!6cVi
%Cp::9!aoEI"F--%$Y/5AN[P5Q6/+eYPi@35hbVi!!lf\mqu)c`c_hZ.7K@3mDZIOab?,[\jc:JY$=((^&N[fk8HaFVQZX6HQ1lhm
%eaY`H8$O:N[F9>aa;U3DY]+cqa)rHBlIHs6/;^S>a[/5i*I"G$HN\;6Xl4:kJLO">.ZbBnH*"e..?4Rd#ef90dWtKi9P!\gk^L-n
%06]$uoY%:5;KDP=dp2Ti`)39>DFZ1H`\$c;NF/rFRl)3YZXk+C1AZQtP+G%XCoB@7^t`Kk/Du2t"!s[K\-"F9*kQ1_q%_!U%ZH^d
%6bR`UA7#.uK+-uDIW#(,j/rNdaPC?i#hp*!3S@JiAuB2$6dZCjgrWcCC^sb.!ip\?a?p@qGFqX,csL.$I3#;,F]N>aFjtfX?Kt[[
%.4<p7EO?VaB"rV<m.M5:\ne_l=0&hp7^*9]Cu1ED,4D#lG3hq[b?T%3(m&`^f5uF&acMU>7'dt0r4IOnV^$i712^QF<#@Q[C;B[@
%>:(Lo77i4V"KUQCYbI"4n-XgL);QWrT$OGhgd8('(r\dKK=*pmi1+@KNkgX*kDh47KBGWsJN=lsY!=j?69=ErDL'.cNk6;g^A(t'
%#Ih':Er?jQ%\@n:a#I!SqjO%N.-b+B6p5hgV.UX`(e8S*@MpuT0iopQMW,XuNs)!oKJ:F!/<$bCBk%NC0H/64a*+^<Z!YSJ/[mX8
%"EmJS,T33)]`r0#Zr_Vk]^-"":47$SE;n(Tb"Y%%Ea)PPHW[.1RuXCO:*X(Z3<hi0b\iP=_Ip/Q_@-kh0;4DOP[Kn#\[+j(rMu.-
%:5aZjSkh=Z%MfbEkKoDqc6m5B_0%mr@O7?<lf[aX&\.K&(0s,\oAKsTdNKQdB>q:uAZHV+9hjm*&<U]gO'6fJb*+d&[c5IgA9g:F
%7q*X[2&eSk$?^9rXGR+D?aCu^^,Bi(/1E8*QgH1M#p.7`oI]#ILCa;FOIMh;9?=e(.(4QV6$()qdiO7bUMWs`P)6DHgKL(l%ao2Q
%6D@C2a$9q)%&GuTUkRsD4"Pr/e8XiC!q:UKQ,h3"3U)RIiQKM3k2FM54,&#7aDcURToPSHSd'Y)#T`3EZ7jAk_YKtd4[Or,fZ!0'
%8ST\Th$V6q&*k%9#a"&(/bZDS'9T`Un5kPX<KCDpDXnou;h?eg89af*Ar"\_i[V/9gZKA>rOrh"Tij#Mr;gP.q&Rc0n="t^glll+
%5`36&AfM+7!]=qKPiEk?jasqaWBeq#EI=!0Hfm+a8%;F+l/Hl&G]oR>Zd/F:UkaM_!:BZ*OSWA>GJ5mlHFjF@G6QELk'#\.ZS/)d
%rO#aX'_T1On6b`'Qlugiq'LmT,:`4WC13`1EOk=BkL?K[_t$tZpiJS>c4jr`&b6'I)PP<TX",IOnp^(&;]+>;'j.CT$7Y^DcRf;7
%'&D4/l\a/."G\B4)9NUMA?bheKs^!0;Baio(oFM:YXoR4<<;8PJVWf>7e/BD!0[#'(a0VE:`?TfTsGtu;'e@?PPnt4m2.Cq=('-Q
%0]s^+gT>:HTS_3S8Ietl2[p#V8c`7Uf:7*"J;&sa1k5s!_])[aMO99h'T8LM%?M8[a6T>9Dm395qk_%.UH2N7HQd/.@*bt0'59A,
%1I&,$^o^,.*c7BmB[kL7gq_%#DB1N"6?7-W<JGq\eC[)'%f>#5_9T`R*V=Du2HE\HC2G>XFfa/G7Tf:s/8I,B\RiGTiOTbg!LfC[
%>O`\^"jV!r`RlZl&m8+0EH%+*eQhp<<3SqOG?VkrXi1md*j&GnJ_OAerBFMuBF_YVe\QQ9H[M4%R`bAaCBSG'Q/paW%RKS,90""\
%gf(GsS[R\9R67$0*3OA\bYg?E*$D_u4&?K,F6.n!S%GX0Noi))]->k_>c'F:q)"G+gWO:_PG75%\3leT\ZM:$-X`2^mEFAMF:XR)
%;;=:o31U%297N^Z3lN!YbGe!(]i,ej:$pV;YQ2T]X_!O\]H=808`\FS_W1,D[[b>JV`=/2bY(EH-`'i*UkH+@PgGhF&k!sH&1hF+
%S#Xa0gmsA)3eG=9V,T<p[2jjPqEK-sd`'sJEF)s;pOaM\78s"sVR(n]#qm!sR*GmQApf2^)p#BTl\/BQ4/e=f>F)Ua5aGkF19nVo
%$S4Hf]KEH"Rl"ErT+u8Oq`GUK3N,(jhE4PoMG(3u.Ll]K8%fAtpoHG?;TQ*`N/SoTllPQd#"5h724+00A8gpo41a?L>e6t?EO^#$
%lTK^/F)WqZK\+SL2JsRg(4Xg_cEtDL&6UpC&]8+lCH`G^GA9>*o6"e3Q1juUodL""WVTR^cDeB-0<_r_?2p'e*2L(/!R"Gs^jKaT
%=3$I+&_]1WNpRI:Vt(*/jW8f=F]jA\]i/Oj7fTL&S7ff-$hnoMM&nFcajncbG(V@UluUis=WuWQ29P6ORG%FBh_\Dqf+n?,H5Upn
%-q\:mRg;Q'Gg^Vj1[dM,I'o#`Wqc;ffZFP`lHa'DK^O7H6O!PXZX<P<H8Ia-<>:UR\)Mj=ct-<Z5^I`@LV<16p[7LJ\N0bc[HTT@
%XjmaKB^RlkgtZrV\[g%-M@j"Y*bB"lIiNT"$Fr,*UV15$O%dQ^[<&L>`I&FbH&Fe,cGAku50n,Up)NO9mQ(7%glN%Qc*[gsRVNMq
%2"q8!VmV`*h/0:2A8c6$o]j!"q2Hp$0Vs%T1/kQglml-,4'1].XZ^^XBriViBWMBLdo_HUYJsa,4H6c@GT(o49X)MO6).<n:cYlR
%O^\2TY*ObV1omO?`T)8V1-j`Ro^#^<--,"KXObshbg#:Y/!`\H-+';q8udBKeq-+j47C.=Xf\e="8@kNlc.L+bT29C#n6Hbg<^#B
%Y)M)"iYo.5<uT:+>f/T64!%K00@>e^F^J<bc\rg.2e0Nu(o&2-/kQ+cGjNYe@G--pqmT\8SB[KOEcqoEZoA?4l8hQlpnZl[i3S):
%[EjSg)h,E`&`m+IN4+NUlW&A'Boh!6aCCp?s,'_eF=ZIESa*TuG6T+mjFj&",FD3D4OFJ;[cBEb?WD;"jAU1-!Oq>.'4*P_*-&%9
%S9Zih/lC\0Fc%]LB0GfXd:_cY_<N`f.TUiO.lCNS2SJB.am.G_P1QhJKX4bA.oZ?%b#^W+hH<eAYZ,JpodeaR*WcZpa]IRMCYmd3
%dj_<1Ut&Q6-.(N&9AmLkIqoW;2Ce[Th4[aS"tA-AP'Gbe+Y<1Xn51btHccmk=+t$,b'*4X4ZJIUAk(5?]J=[#o'R[R&!-+127$EF
%kUeV&OHN^datY"7YFj'Z9=*]S=!Obbj%gm=Es8*m9(2LhA>:dB2R4bPc"SGf<:;^Pf^dRcb#$;(XP.#UP`*t(@T=oFe&6H?U5<1/
%4.].\innT^VtT;^OcVf2-?`jAh^8''?`Alfl%GXF*6N?qCeuK9b"l&FY=?B&>Ak`JOW\Ndhp%!I:2[2;7QP8.C#mbj'5a7]++6"e
%18a7nEo&gr7aBn_bGU>`%='g%QCf6MT4d2#WOk@6E@O!!C#Z`Zd6n/+]UGcYQ.s7%9WBSOP:k^[8*is>.(uhLXg>%"/2+LFa2"GH
%e#B\#>&Kng[>R'r5.8m\[B%U-?)IOd5*qV$J[O\gZ?XMMeq0W#QAj2]\X@8,)Bmm>WYh%,Ur0"#p)hJ(=YCnS/ISd40\,T08F"@j
%#SkMi7&iGFQCWI5fqGdKB/sFWV'A@2rTo*]knb?iYC=k.?>cIAmI;\$&*m*Jca)O<=]td5Nj$2n<i7f%PUL+62MCpNY"(:SKbsJM
%VSV]N:W^XTFCh28pi^eSWS<%;Dj\H$!o<Db9n$Tda#hbpoM17AAPALc\KGM7f=sK<n3Gnl<]rV"Nh_S*Ls.(1))\=QO/WX@hcdh\
%Wma!61t09YL%YYmS[#WKkVQ;?h&g/<J?B^37s8()BAf!1SsH@IRO!kq0"3<%(Z_oSD<:mM,iWi^][.A4[n6<9o\.XVJ[N'aFG>\5
%Y&5OidmnR7c[I(]0$EZWZIT9s1!u1_J&Hl!mLj]1pqa><;Wm?P5MoF_HK0RZB>A2hVQ]>`XT3qC-Yq?*U07"-MdCL]],t>f!e42Z
%gZ*NA64BR:\n*aV3kuO:VFl,WPAG`rR:a9Zn8u-,VpB$]q@)#/eQ)Ln*G`l1oo!PS'd)s>\N2,c0mla$AT:'N0j&Q]k,Q.DkOO8N
%m9.-/+On-;?IT.`U`LQL>^,JX=Id3"mBM*t+Er6Lb^t"4HI)%MCng2EU%tQ(QWqcWZL/LTiiNHdbk#;J*[PkK5I[6Ime#ZkP:PfG
%2s8aY#,kg#(pO,pSUj'+ZJrjL^Lb+P8+!&#'dOksc&.W)U?Atb!<.T`4Z0Gg%`<%<T[UBso';go<&crAAQTo0A.):m@a\J)Vr%+D
%MIN(J(pI5,cF1b:N.RBJCI`Q.=)tP9df$5XZG+=4i@9_`a"X``._g@Xf\U'2e5p`[%48fFYB6ai@#CiRStm5R74i:ka^BV=7<,fS
%Edr1r>>>FR,n<$>DYo0TZSVkc8O__k*T3d%ngdb5+Zgrbd`S78aL7KIlP%_9j!DN\nN0\7LVYcN%d'I&(fGhER/;M;@'N=gS,?a`
%.Te(Z+E1So2\s"`[`7R,*14iF#W(+bdp'&VB9'(No&c$?9i?-R6(_3P3m<cF4c8K8J\QAXj]$qj&t(=FO6l,2D=);ABfbYn7$a">
%d`L9*,>ZspHL>A;?.c,([J3YWWJbk*lNEU*BZ9g1odZZl9>4>,ZKke.P!-^_I1.X\)o,UL_q2Orf8mGSjQQgt3sg;F[,-[RYDg#Q
%!G:u_,q>*QT<C2Bh`)&dN6"ucNfqL'9&J'&@5^Z)W@R9-mc)14]Z!njr0&11T'WTG[(JuAMbY)\hfZVZTG(Ap[7+e^]KOX+8/a',
%?*]sSU>.T<I:Of-[OX"b66(SepWs-r:W0MuVJ7)X"f\B1%q*W_B6f!PJ]?o^fX=$Emc:#'=`Q/G&09'PbS0[%G*Z_:?$,=nb,KH]
%le8/fT7)T73oFb([)^^50](hrbqof7GI-7Zg@U]-&q*"5J!c,`O_(p]D(_`TK<T1FYX>5`dJp8XK+%;BD\)cY3H^(V^MZg,MQ9mZ
%3rOcB3P!kD6p;Q\.[eVNZ1>RgX[bb=jqJgJpS8BbmnZuh]m[A9]:7Y=B0bJA'KZq_/?0RTMO'bus8'20U0j@p.XV3&:f(4Q^.=gK
%]MED1b.=\uEDo_VrbLClWXZ8r@4eqi\6E-$h2R`73)BS2cJl%XrDN8YS)nY4?lAc:3H$T?ki5M("<3.arU\lEG%enT%+/-C7Bi%g
%;jsuTDJd$8c5?#!0l^)Q)f[^Tn:G3<W:/CM4U6PaY:\3.X$5!5FP5>HgTkp`Y8o`sWlGV+]O'90MY@0TAKpVH>jpgX;e+0'/AsSB
%2G_mXWuU6_ndpa2O+ZM5DcI`[EUR6^#PV3>RU*>A<#8[h-e+olYNIbBr&\P@aLGuoi.b`&kKB#pf4N'?g.''3c2j*p$rkOuP-H't
%g?$D1Hq`[.Ol'P(*@])08:&#7Hp9H0M`V=0ZLX0UPW3!RGV>V3%!FNL^(e:kQ7JXpJToui$;sO>m`jXE]U<rTVmVK:mEF,s(@?.>
%'pE5VR?)LSbLX>8-<@,3cu,R1=CSgtD9:MEfBG>UgSP'qXP53pYLQF.MEb1/Cf6EsF]5)8P@QmAZKitYH[=f:@;j#M$\MR96%Ahp
%KDt&e3Z5g14Bj3'4C2[$^_#tf3dJ6+ZP@B-=6V/,H9,5)RE]`d\OYu&\p9jJMda$fA6m,-^*i6@8*B2Oe]%F:Eq+m.O4M9Km<,cg
%i`CR-m=:g!lQeaDlY'Q,Tm.T[qSMQ3NCq.:)O68VFTjW%4^4\\EOJ><`'Lt`fCD+/h4<_BFa*FjI1JjgXYF;<U4&!!O&h89f=sH[
%rIV^a(G^YNr&&94-SiX]IeX8aLj:3qNU"!^epFl)A2mV#j^Xu_86iouno">/T79**F0GZ>0V3oN76RgkjGduab=^JBjNX!Y6&+,_
%4%%O8N74Cd"]c#!-E5@\pDGIK-1`upg/H%%X>WEKNYlj</ldo#j4)F$]eCuPjl+eA+(M,Wq"ug[J3.+2Hdbje[BpNI\K=Ik;k,g?
%qbb%/gMVPnp1^2OG4`U\ESkZ^ikF6I`>q,?=POmTHIb!r\^&pkd,jq*gLU!U?JFarcS74Fd4J$1?&1/45X/KGo!gF,.3$/-[-pnn
%`<?'q@dRH$cFMQMs-M7W?[C5b4fRZn[cVp7(Zpd(c"]Of]Ol9u&6R0A_D'+oX3:81EP,q,Z#r6B2'Kp+%*nTP]rW+'!UJ1Sh1)6O
%ld&-S2n8eOehY^41M/N/<1gKXHJnBZ=o\4Vni9%^4OI;8BW#;DAL^bjU9fkgB"M&lg^g/WB:c`[B:c/.?Luqm(XkMC25[pqr\_q.
%&XRDf$fc<s4>0)_Ia)rF0RWk:J+O)rqU56qXY:_L?p=r'`QHb?\(>H2%*"4YZdN_(,l=uCfFLsD/4VDAX7\M,L`S:2"AC%5)]7%_
%-)G>cT*a'6h!7GE[K$/@cJtX3^XglT->9Gm,9'p[DBfbMrFhtDURmI@,K4Mpr%)_)X6gIZ2HF-!DB#W#R8+^_1\#3)=RRTNRraYG
%eFL56$F,":deOYS,J2QLZr4GsSrJsb`GMGV/T**#^@5lK(R33ZAcHU+io2mpqD"*!\.PWc4aa^$F5.s?qD"4(idS=6EHnsXaqJr&
%.9D@-1M8[jX-N7`\?1u#_lK'o3&+KA#hFB`jZ)l+1fJ(`cW7d7o<>+<+0F>=+$L]VO1^W+Y<_`N3)u2sDP^S!0]M3W&mIbp;\@IN
%\m&&8MnkV;?/p.b56'Gp1gd;a*7&mcNGtgGN;aMa5$q$k/a`Nt\,"b4*!sKqD6)$X;f49S1"5+.DmXc+nm?5`ZrYSk>g=>+EtG>i
%Xo#3DqC"\sTCa@1Xp>=@?sgs*684bH9/#-P6s09,$K9IlVEMR.SCp*QQl+[h4Og1\Q,$%0O7j:I'`/>j*L>Ru:g1Y]:45KtCJ3T:
%YTJeG>Xc-#YmpPD;-f#3J^SfJVQ%q;+YG-VGV6g8!=V!M&l<a>MlS984=HW7YfgTCl8NK9%2U02MJV7LB'"7OE(_jAm%nh7o*+c+
%N2q8Q+.LpT7hqdHl_M6C)]>FA=fGoX'*M,YT]a^2D6pD/M:i;<d_<`CM52Z-_[$NVs6dq9j'2W=C_o6:M&N2UFmbApi;-\[JJ5k_
%;_jQA#YU`j;e/Sfm5X$J"#&9l%5#4p`:7WP;ag>Po/VeA:<)#)SiNaL(%S4R/l#P%Mg@=B6&DBH@X39Q3tZT#0nnUX/aY:7A15'R
%E&_"`A"J^5^nrb`<I#qf@$8ph;NM^d=Y*TnS[C;5`rB.Y:lN]?MB&uHh%fg[P78P!<?4?CcoKH)1o[KCI<\h3mhSDhV*Zs)k!)u%
%LP?u$1,F",p-,pj60/$WgC;,Oa(Etpp$T(lG/hIk*OVL[21'.nSFP6qRt4SPCH!IB`hralpKpZ'pST&kk,&\AZWMH.Xj8N=qn#qh
%g=!Z_A_gV'P29f2\`>G%#73FX&+:Ngd\C,Qq5cJ$<kU]OoiCa:1#i<h-m<$+dPV1t:[TGN7RunGlH#OR*P'brfoZWl\igo@%+/?:
%g2]tc4`X=p'lf;][DpN;FQ`B1\pZZ=,8q2!n;Pqi_bKq1F!,R=@pZ(r5&lIi^31>5StG<C9KVuaCpJ-2a7'hIGn4eTnFdk$np@H"
%5O.]X-e-HKp?/F:2[CmoZ>mh\jo1k.E;lR".pr=Bo(cXV]21D79l@6(j=\YHG@u,nWVPcB%d2K<6e44YB3?B[BFQARF#dR]-)??D
%)\F:.1/)[ta9&</G&X,R+SUd"0Fr\s?J-]s*/BaQXhU+6iC9D!_o-u?a;#;gB%6^n^qg?=">@kdia*iu8]87*:i,6H9c73>gEc,:
%*b.goeKQA440nX#Z@V-4Ql3Fe\,B!Z5?mRT>R^.(\$d$J'$KY+D"(-HZQ:85"m^Ik)4!3%V]IfT"k7FoMSt0f%7e_<[X<.,nkS>h
%ne'BA0kML,Q-pnjJV9#"fH!;6U1o`?D&n%2O)-O2]U56?-7f:sb;unOOUnEZ#bWu$6$8sD1+/bd7fpdW;FOOi>8dPg[%#Nd4c\ch
%$`!*1gJatlV-)@3C'6Qm;(1H9J6J#W=eO"%,I&]<6D;juYe2$h,eooC7(5P:MIk>a(ro4^[GOXc+LTB_D03nEJ_UVl0#QR:&D2?)
%\EY>X'm53gEkADRN^@%)d\1FbN`(ZJHF/'K(3EQ^6L)L!2,pm1=TQg;JoH(m=1Zen$Es+e=nt8S./pYgHP_8ePqR[@*BoA13&SW1
%*I,gAiQS4?S)9UBs,=+Qf"#E1b^R]k0Cf7hH;ath89F2S4g_jXf:GVe?EBnCG>4H).+!_onX,X<mBXuiJkC(_'mH<eeu9YJHgphb
%@MPg%!^=$Jns0hA=17"aP9S4s^]m-6SY:ilL@pefdB#NZ2`,9cZt)4tj2?7-rU5>>>VE3u4NkZ_=jKtC3mghtonO-[0t,7ZcFk8P
%:U73#jLZ^Qs"!?<HK8L>a(M&6SuV*G:lU*-RQVGrK+HHWX[K(DR)_G`=iZ:mZfj0.p2s[J/CeoL;%2sHe!idjo:u+,A7uQAj6'9%
%\&.ZEq29GgAqRDW:o`8DO.Y\tr*(:@mPed";?k=$\`Pl</X=$VoCD_OK=;cR(lHtf_VeN)1mj:'>b!8p5<),uWb;4]c3O#=RQ_(n
%$J2PiR:??h-O&-d.'WIKHO);;5_Oo(Cr.9a7A*ScPY=AgRm,.//h6`_s46-Y8Xn,ei*(,bUqSIBj)H!*Pj36J25"$1I<hFFR'eLr
%:Am_M#h#W#^INOTnC3JJm'A`MalOe/!p-iQG;n/S.OT-"ZGo[@bK!7?d,!i@.OY>]f>a:;"'jQ[en"P-S0(e>G!j:nD2P_1J`1aA
%i$08eihQQ[P;=H*ngKI*QTu+SlGqQLr:kbIQT@4%:k83`W;,'%IW8t@G)/Q<M:misSAOG$*8cs!V45_d>r/1i+/I@[4?-!?i5(!5
%+:H]($rQ\Fnb]DOgiKJpW;8Rj0(`b6#)W1cK,B#Hc:8l?@@YkY%c^"pmd"pR2'cY&6)AJkECE"9iH0d=5$BFVD4M8CdiGi$\cj7r
%a_ZVhi-pq^Ajba)752u`iuOW5pJ1*<nM!/P8F%f$bBVUrKQ=Sne_(Mqe.#/]\i5JWhrU+JJjVAePtk:@90A57E/7?`9oXaG0EZ6)
%>,3D(7<Q'P45Dh#pHd4V<r2'GV-G$kCg\VnCKX),jUQ;"e?ggB8ACo4QuV?/WL#?O:lTEMqQA(q1c#!f'RJ/S?5ssZe$mq,LqJ1#
%-k[hBAt:^;6cS+Glo0<[.EXCD+IsYAE)`g_Mh@C7(>*Mor4sBC!7T%K+.]&URS'9%354#GWs#6eR,:ta'JMj1MB\N[0;kaI[fX(\
%&S6C*CaCm1ZW:\0NYoH@i2\ql<jAZ41E$7(5VNtf]e,QX1ARE'T+`!I;qQ:s3P]A+X94PuSJAH91PD>G[*imUU;@OIak4"-JD3)Y
%CSV$#RirHk<K-"%rN(*[Q6B!ReI,=PoWWOIUo`U!\f#HfHYt_lrO/)@)>UOE/KkCF1IId]oCHi)Nj"r)%TegkUc6I%\`=Coi"S2S
%4?+0n(-&s8chk\fUIU<Nj.GW%4G`-q!6op6+:kRhT!\>/-DS=/cE+8a$hX+AEN7O?5K_@iB#)co'E<rR4Vl4.2c:KaIa)F8oub3'
%pec)W.;S"W_#Gg-0'dKqkM2$OYeWnk76M+WNb-MD,5E.5f&(![L0p5cr^u`:TFAq[*'FkH3@;Z-^I:=`i(Q;\j;uV[!j6kHM!8XP
%i!=p?3/coYJJLj9`u*D&1^^4[?D(>I<ZD?qZ-grSS=Rr6Km$8T=atP;n3u(p#Hus'qfU9"nEfr/25CWV*6q#QkiOm\oA^QXG!:7i
%VhsI34Vp:`1HR\7.0\mA/_qtU4+NM"O"B+<OI-&]RdoInMGnC<V`X[fDPHgKSM>Bc:j%QZN":h!-nj4K.Naa,G7ab4UiG(1X!bsO
%iEbVJeS*o.2+*3^\]=]Sk[FO44WgZ$&2a=b]"=7KgMS2rO-G.X8VTXfDgMbl+<e,q"6SgI\HF1@TUQ5*hfEP7<FtXJHpL6(Wo!HS
%bHGrsWYS./?e)Vg24S?/Q]>K,8V;!fBWN;A;jl\U4`*#!;Ho@dPThF6T0C\;#s)NnBppmMRL.B]aWLDIA_oCHZHkLTf5dqro^s3)
%f@rar%ga'oQSoJ3GeG_:*/Ko8@>;Ci+Djd%Q7"7k0R/rRQR31QBqZV/FdF;MlV:QhFOZ7;<S?+L:h?`1&hUjOifhhecJMIF6!fgY
%@0i1D)T,7*VGTBR:PHYd*Pg?m#Rbm&+aUQ*V&)9$gH)J=G;R2oeFZDbf+L]a%Wcu1[!BftD&:1(V_ZpYfA*B4TSGAP[diUkStDma
%D(=(>.4)F0MI(B??GEJ%dWT)%8C1H@eJR,U"Pm+a\+l1*"Z\74n_ko8:=#dq81uED1e`LcR<YPed[p[ads<?(o1$?n#-#VnE19JE
%+a]+2"QLEJDq>:@)]DDCn<K*-1d^/L=3f^a#'4RCV*Ah[n6gkF])n"^e7*6R/Fsj/Rq-S9Np4'-S2s+h%=a<$:U.m,4([WbQl;R,
%6QkDE57Jf_6O0t-F[@=*A_r6BV[$LQ-B6r=?JB1OHf?kf&t1efClCU5FsK_u?bo.[`$`@!mAW6;Zemrg,^S&LQ#Jl/+.O(g$,lUg
%3HF,-WoquO5Hm!>T'BqoF$OH\"u0Y0@n$UU,(j]6KWk0@S-9.N[l_XG85=2f<&/$9+6dBG:?rdbS&>4&/(48]0tXq`?J4?'*9?37
%Xbm62J\aH/q2/_P!"9S)%B8O&*1gee+>@&]02;p#VqeF&J\MmT[?P(U^c5tGhS;,Y/0I00b`d9Kr)t7P9CH!6VSHr\jtgL-K=H7X
%0L_ljH6YoNMb;pKXAFU"E`)1i4GLZB'Jd&b!<H!</bJORjdeA%37Q*"A\bT>#h3rne-/,?a^L%%CktFaJKr7fk6ZCg56Tqt?RA+!
%3!a`T\EPm3`lX*=\/`h^RG&JbB%(NN_IIVl.Cgn2l74;[IC\l,31TOeVrB;PO<EhOKF6o&MIsVPkQne6!dsFk]_BZkOF:XZe_KJP
%k^[_Vc^G0(m`D*$cRpM!.ZH]SF)m[-iBT/@HLk\,i$^$I*\TI`Zo_QcMQ@(t1fhm65Qgf'XD#=63bM#M/gltch/.MsSdeYlq8DM=
%#q9+&bmM5f/d3b3aNM]e#E,6D*#&YW]<45nm;7\dBhMjlLpnXY`\I4hj(j\l2kHbb(*CAmpu<3rkM\HS5DU0KoONV:lqe4_K9SES
%9^`3HYW'6/(@"dir<=N;(12_fp\IIq'=LYO"!9(jDc(L%GPs&_]:]12>g9mis)@[hrt%;`3(;&t7h1'C?C:)S#'Ko_'6_.pQlhVO
%jlu+HEt)74YYt!=U6r=%b;spkN#_f)QWD#l/O,b]&7R42"U;g]B2il$bfS'^_qb)"TWN]ULJGRJ7CWmCN"P%O5s(!k/OZ0Wa7[)E
%^"I'Nrg?W?"D0:0Hg-ogD)(bSYu`@Y)^@EfZd^j.Q3.ah&0Z%a"N=dJdi_Z&0^jaZAk^//$5NuN.@&F:O]eeh?-PgeBB&*OQWqb(
%M\3+MmRCm&66nX'`tU<6X0'0Va@W%F*LB2=>2Y%SCLakLpMkKg1peQJM;A:CXXW)5Z%.k3^e\K/#^QM]q40sEeR*J'$c-QS2b:])
%nRmOpnrj3s;QjJ,nI*XJ7L2[h9>MQmp>]7rkKbO0;R!P9[DH%a-.>ahF!B$+DLf(#l[''uQWkPkQ;EqKCk"2ajnOft`9=9J_0HK+
%k.N/:7G)a1fG*<hC_:;P`,\9^:'/'hBi!^A/JMK7&b!Bs=Koa`oojbLIVRT,2r]8mquT<S!])<JErY.]TLiHp%JKWi^4,;+Rj3]"
%BuuRBdtV1oJmg]tZq8Ge&1!LcG9W*)@6UDl3-!&bjWphQ<9_Fq&ns?kYH`usN'$=ZUjgW-C6+]^CV>%WY93W8jtNp.+dn(f8!ql!
%`8Dfe(uL[9(>+j40MP%jXF_/.,=#NHXGP7d_-[kieO$M!M'[b`>EA\+.UQ(5*R\kn`hE/c9/Q*aK[Ouq@O`.i(:<!ePaMCCd.M&q
%9H:0F\kpk*QMT9kd[FGO3%YZ?E.;)tF/#QpS/Uq\^`i!B"0rKg1b!WW&W1IcaN(h2e[/Bn&I'T+^^:T>eiLdc-*L_adj"tkb_+A"
%<LHKW>\Q0.-Em_.H8/@sC6Jr>9q=XL3Hio8jtD'-Aqsnm16-B:>4Qp%_.Y!E-]pqpK8AJ&+kqJHVm[ep+p9)?RD"^S_45re.[$hg
%8erCTR3[=Y<q^m&![sb)>2FmLKAZb$E+Zr8>`#8<:I\_;?L7D)re"-?)O#umj746f.m(?;qWg"WZqAgK`c(c?7UEoVOC^+9],BFa
%/Bl-e7*SbdI#nq&@q=^,AnGjZRJR8'_XFNM#<[0k<i*2<j<&+O&Eh8m^\%J(VZ"B*ZYq%mIMJb2KspAT7OI4umV$Y\SpOX@19#Z;
%C:"<TVWOF*Q(-PgXU#H?^l!H"PIdDH%(9KBJK-k9>D5XQc=8(SEimuc=Mr9jFDhkkAE')R0q*%+j[G.5#t\LWM+;^EME1V>3q!T<
%.QOLadSBl^.#]tSlV+!eS=-.kj:p]Y[P%4m-\Z\&84nPX<_&ca=Z&1Z`7fE5HkX)6@I5eR)D$gjS`A35<iQ@*%,h]Ki#<OIUF0Ue
%jih.e7;;M>o(#IB8mG,3\q;b#C@4Z]2[_7J4Yct)7Z7bV>`2Dqjsk-,bZZ*%%rDRiQ1Ff,[GWOKB/]7<(E.(=BDk!YYPQ$9&%\5^
%148\?&t2IJNU@hE-g*&%i6qHXHUGOJDbH6<IjksG3W2:;%#Zb`q[tSlp$\A0<j!BVR9GBlbFgP6#r5!$Ie#HkqkZDO))4_]'!acU
%P8U9ai,gc#UtC]de?AOY4`c9fgiki&%uLmW]9<0:]FSkuBZUM33("=V\"%Ga<[EgG^LSji:U#smSKli>]m5GHD(A"d,ALb(kD6RC
%4KKOM[ZDfO8$k!ui#'k](^(r.[U9=1&N*IJ+r\ie"73laNA!O\U2:5J0LiG>?K<?b9\D$QUhqRdY7G?:bl#No2(H!Nd5D0d&0q&0
%,XJEfJ=-D.NWWn1U[C6P-M#AXg`2B3Vf8!4EJAMd9B$$p<ZuI6%;^S+_#&f#/[0=MTf08,;;hAdjLp6#J=[b_pFN@Li'bNoJTp52
%PJFdCibj<k-%_;q4*!cF^q5bJL;5leqB9kM2V8*"Yc=;smr0]^JTjFo8D]q#Cs/<n#ekm/;r7<W1@f1h("AB"i*7pQ6IU8FJIR;*
%_@Y4<^%<.;N1R_Fn%idYCcY(iI63J*ZeU1[m+Sp4QaKjf^YL-d,RTN9q_kq<^bm!<1iQ1bi\b[T5R2Yo*m0=!(q9p.W>N.F>dH/(
%Y*`n\.Wk;"\XP'l\-<q"e7&o%E7>M,Df'.!F:N:pGNp>lm"-mG&n\c@f"l/u^'(0/YmK%=?4J""[WihA$I-%(&sRLBc@g=[e6]X?
%`A)`h,GFF2f]dPLo5t[_dLuk6jn^8K!^<+G/+tup1]4Z&gqXs+r;`Wd1V,:nAhjl/3<SP='M(2bR!?&#/iPa"%oL!PJ.ns_6BQ!8
%9YYb8HG\plK3Utd#L+C2=gZi(n]oGN9?C0Og1!8jK;JCbgX`JpIM\sA#m=t;a6"tPdd!<3<uN7%Si5:I_0C(Sp?*V:^;9bkW(Q1`
%Zb9=VKBoefD"F`UoXdArmWKQ,l`,!`drX@_WN2.j,U((Z_.9TP.(Ni-alJP6/dP'/.k0.4aX&5.L36\*kJChr8l'8cSdh)OO1>9\
%nsRrD(@T_paAc[+E>M^Y"&^a]j6/ru/^nkha1&<(#'69S"iO_:*U'H%at>e(jUn_8FD=@m`/hR@RYb&PVTX^r.t_$hRE*%RMXS0.
%oL3C,g\TG6>dca>W@hBqad(/p<`bT)q@Bld/o@gJfqMIj"hCn$OrZkAD\B,=SP9[5Su,AW5RD9'%2_F%I)g&;Jg8YJX/oTSPH*IW
%qY>\$fk;?[%DDG)Y"aFEKu$Za$qS`/&-G4U&CX!1p(Q0Y9GKGPUIq#M2<)tZQ>Va^RtlF@`R.^ug(%(/NHKj`e,fek\I*L!L8gqW
%&&ZmIR<gpSY,$JuAB8I@+NGo^!(hGC6Z3LQ6J,[nYi&.f`Aad]SY;Z_L`MAm/L32:LOl&Mk:kP0<PAp[66o_cLa?://Vp6]b?b`Q
%$1]l-a>Qi@R5'(K1.e;i`IC<;Dc6qAT0YSR)&hWWdkA(!D;T=_`3:,&"@V4+/MUufamZFap'2*3@i';T<Km(4]k"oTUWuohe/p2V
%GK$slPo;uVA<fn1$d0E$N>GVgpU^%#FJXuH#HlLTpa0KT(p^Yj"(/I+9fq+4%f%+#*V+Q=8hK.oB9c44;q)[uOV_&FpBpC"3=Ju:
%d+_EFPHhoNLS%\rNo>\hh:p3bRD'eO8p.'[iAZkIh'iV0p?cD/?T]1R2]Nm\g)IFiL[6@[ci:K2G3M`$G%^<b<E9R@[p7rl[E'l2
%JRqFf5SK@X)Ij)"MT3R]NskR>%Qdrb"s`BU6Ak&eLhoDTXGH0WUG@h==n87ae%rp!U?i,K6P)pM="6N87CS*2Yha4>HGZf#lo7/#
%h$Zu%f,um;1r1!LBU3'!+^PMX3<IWRb\s8`4UCQ/3#=TGDR*^.U/5B\nkGrgP&uKJ.PU<^BpBTPI\,fjb>Uo?j/[3.11W:[I$_`b
%Fm18V);6[O\)!=&(=NK^Y2i+g5'i5s1oCl8'Pt^\j.hl[S:qBjkn:?mVHTh)0ASLTi;K\=1WGF!cRDr?r0+t10cfPthLb^!CZ3O7
%%uPPkM=sn/0ejQiPFUKW+V0.h9k'b5Va`\Hp"fsY4YqQH[SS>Y/'LDZ2MR>M(iGMLVGPDBN.+@t(M1D%Qj&*n[l6)U$3GkfD0M)N
%##J7,d$*kO99D)081UZ[rHf?KpZSU*LJ(C0E+l-D60=RN*&Go3kO4h'[!O,j!f*?_MWQlXk1,:ajJPjh6BVS7Okbn:8`p>cO\V_=
%3lmgrK6,*9\T&]2MeGD1]*%dKCB$(;)"8lIMAopEaas"g3e^t5_6D(D)Qq?nb[VA+8H]XT(TfM>"\3>UAu;>WdS[p),^5LWXYjZM
%4d<ir26k9GW)Y97;a-0TPkZB?\h]IE[_=JR]&,(Beh%h@cI)O$/831V))U4RKU:mN_pH&pEP\KlJ+-GCEfNV/O@IL,d1[:hkg;d@
%k1SkhXn%cF,R]0I+g@ft'.#+im[>;A=b>D\_m08<ia]FH^)5:P<'W1tbX33<i@^2/h@ht-PD/G"#1r;0$eR)@]]R73,BpiEO.$gX
%I(UBio:BlIJpTR1hc5QGb;-PeE@S0[G5C,O6AaVBbL,&%+:^3a5)trD\RLYcs5.eUW#-4goM,n>R"f54'lb!Mcnq?ZZchf]`2fPo
%V6><UPS,!9SN1UU7`EC0L5a9.%#6!Yc)gInI/D:[ciZm?lMBIC>F&c$k%2lIB44qJ<4*!fYj@(iW%,9>m&$iA1k+:lET%kW'Eh]6
%DOQ/i^N#.#[cfW2ORc3fFcT&<:`W\W3qCY>@?0ZsI9#'of*."n]:7i,k0IYlhjV3ec.HfBOn>A?@3n7PFC[OU.IE)-KET.1kXZS"
%XNPWFC2nn>89a%+#tM(9$9/j.SE6mcBAP@>0c0YSbQe6q`?h;b/Ykk_.j-+i>Vre2L;YdXN;S&UVT3FDDC=Tn=`Th>1VD!J:a"+W
%q"i/jW(+4ARuE:jX7@5h;KEKeM2(=R7Ou$kWk8"&o3^i6U4CZ]J3f2D1`c>Eb&LEE`Xau9'MXnDX_8D[Ci$tN=g12[l8@@HISqI3
%3bRdG0q[G9or79@8Qnu?pR"L4jgJCD9S7q)!`l#&6!iM:?H:p&[`]#h66'(t=$;3M?$m3;77-(Pos!ZQg4s2^N#hJh9f;!R+6E_1
%!t@mc&`e%LM3r-K#`,3S=/+!CLG%G@K4f;jio>(X-1#pj#F#Bq+73/*gskGV2aUYdGT-iJ6%'$r2DV-f$o9u>8s*]UqL1&!=:up"
%04,L^aFsWpVR(BQW`+V^]ZFDY6oCDmCL05IH`pMYe#'%oWuN^MK,]Ha;)n`D-,95taGCSB%DMU6&pD+.Pt$;+bn^.#][i5Cb$!f<
%G]71+<t7:OaOLgO<]O/+pS"S'q/+*A@%'(;Ns1R[@1O'DIRg;C6bVj^-4+bgh1Fk#k_1.8b&[oaa!mbaSo_BNA!8tX@4%CclaAfX
%5;U<jah_fXmB#tY'D:q[5ft^7*YC`(F2SdaOMecTYAOQmRWC2WKcinrP;tm6%]0WrRiEaf2n0i$q<PZ3PIUf,3D=#\[tq)h(RHL=
%9Hq6S38OZc*RFmU$q$UO>7?-UkZeO[H(\FO[iU;[]uk1Mf]uWML@(=KcN_&%h.B$h"H*7/i-aCf_8pnk%CUDUqr!rNkVK!jB>Xf3
%</?+QOs,Q++1j*/)LOm\/#I9.5E"^X!4DMQLP-*_"H`[V6UB(E7t]ENX2./\[/>W*j"m;pWOV;Z]-'h-[Q8:bk;spI/_1<o\ui;k
%Aj+36..u]$$a7<??c0A14oYHS&+)%-rV5!R:]GiBq3qWLRm2>trpubsI/:lJ5C`M*X7(Q;o^C*ZT76_.VdDXdo(cXRJ%^70jn$g5
%r:K+BbKk\<ks*1m6;c[1Dnc,/n%\keIsFTc8H~>
%AI9_PrivateDataEnd
